

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jun  7 16:02:01 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           	psect	mediumconst
    60  00795A                     __pmediumconst:
    61                           	opt stack 0
    62  00795A  00                 	db	0
    63  00795B                     _pic:
    64                           	opt stack 0
    65  00795B  00                 	db	0
    66  00795C  00                 	db	0
    67  00795D  00                 	db	0
    68  00795E  00                 	db	0
    69  00795F  00                 	db	0
    70  007960  00                 	db	0
    71  007961  00                 	db	0
    72  007962  BE                 	db	190
    73  007963  00                 	db	0
    74  007964  00                 	db	0
    75  007965  00                 	db	0
    76  007966  0E                 	db	14
    77  007967  00                 	db	0
    78  007968  0E                 	db	14
    79  007969  00                 	db	0
    80  00796A  44                 	db	68
    81  00796B  FE                 	db	254
    82  00796C  44                 	db	68
    83  00796D  FE                 	db	254
    84  00796E  44                 	db	68
    85  00796F  48                 	db	72
    86  007970  54                 	db	84
    87  007971  FE                 	db	254
    88  007972  54                 	db	84
    89  007973  24                 	db	36
    90  007974  46                 	db	70
    91  007975  26                 	db	38
    92  007976  10                 	db	16
    93  007977  C8                 	db	200
    94  007978  C4                 	db	196
    95  007979  6C                 	db	108
    96  00797A  92                 	db	146
    97  00797B  AA                 	db	170
    98  00797C  44                 	db	68
    99  00797D  80                 	db	128
   100  00797E  00                 	db	0
   101  00797F  08                 	db	8
   102  007980  06                 	db	6
   103  007981  00                 	db	0
   104  007982  00                 	db	0
   105  007983  00                 	db	0
   106  007984  00                 	db	0
   107  007985  7C                 	db	124
   108  007986  82                 	db	130
   109  007987  00                 	db	0
   110  007988  00                 	db	0
   111  007989  82                 	db	130
   112  00798A  7C                 	db	124
   113  00798B  00                 	db	0
   114  00798C  00                 	db	0
   115  00798D  28                 	db	40
   116  00798E  10                 	db	16
   117  00798F  7C                 	db	124
   118  007990  10                 	db	16
   119  007991  28                 	db	40
   120  007992  10                 	db	16
   121  007993  10                 	db	16
   122  007994  7C                 	db	124
   123  007995  10                 	db	16
   124  007996  10                 	db	16
   125  007997  00                 	db	0
   126  007998  80                 	db	128
   127  007999  60                 	db	96
   128  00799A  00                 	db	0
   129  00799B  00                 	db	0
   130  00799C  10                 	db	16
   131  00799D  10                 	db	16
   132  00799E  10                 	db	16
   133  00799F  10                 	db	16
   134  0079A0  10                 	db	16
   135  0079A1  00                 	db	0
   136  0079A2  C0                 	db	192
   137  0079A3  C0                 	db	192
   138  0079A4  00                 	db	0
   139  0079A5  00                 	db	0
   140  0079A6  40                 	db	64
   141  0079A7  20                 	db	32
   142  0079A8  10                 	db	16
   143  0079A9  08                 	db	8
   144  0079AA  04                 	db	4
   145  0079AB  7C                 	db	124
   146  0079AC  82                 	db	130
   147  0079AD  82                 	db	130
   148  0079AE  7C                 	db	124
   149  0079AF  00                 	db	0
   150  0079B0  00                 	db	0
   151  0079B1  84                 	db	132
   152  0079B2  FE                 	db	254
   153  0079B3  80                 	db	128
   154  0079B4  00                 	db	0
   155  0079B5  84                 	db	132
   156  0079B6  C2                 	db	194
   157  0079B7  A2                 	db	162
   158  0079B8  92                 	db	146
   159  0079B9  8C                 	db	140
   160  0079BA  44                 	db	68
   161  0079BB  82                 	db	130
   162  0079BC  92                 	db	146
   163  0079BD  92                 	db	146
   164  0079BE  6C                 	db	108
   165  0079BF  30                 	db	48
   166  0079C0  28                 	db	40
   167  0079C1  24                 	db	36
   168  0079C2  FE                 	db	254
   169  0079C3  20                 	db	32
   170  0079C4  4E                 	db	78
   171  0079C5  8A                 	db	138
   172  0079C6  8A                 	db	138
   173  0079C7  8A                 	db	138
   174  0079C8  72                 	db	114
   175  0079C9  78                 	db	120
   176  0079CA  94                 	db	148
   177  0079CB  92                 	db	146
   178  0079CC  92                 	db	146
   179  0079CD  60                 	db	96
   180  0079CE  02                 	db	2
   181  0079CF  E2                 	db	226
   182  0079D0  12                 	db	18
   183  0079D1  0A                 	db	10
   184  0079D2  06                 	db	6
   185  0079D3  6C                 	db	108
   186  0079D4  92                 	db	146
   187  0079D5  92                 	db	146
   188  0079D6  92                 	db	146
   189  0079D7  6C                 	db	108
   190  0079D8  0C                 	db	12
   191  0079D9  92                 	db	146
   192  0079DA  92                 	db	146
   193  0079DB  52                 	db	82
   194  0079DC  3C                 	db	60
   195  0079DD  00                 	db	0
   196  0079DE  66                 	db	102
   197  0079DF  66                 	db	102
   198  0079E0  00                 	db	0
   199  0079E1  00                 	db	0
   200  0079E2  00                 	db	0
   201  0079E3  46                 	db	70
   202  0079E4  36                 	db	54
   203  0079E5  00                 	db	0
   204  0079E6  00                 	db	0
   205  0079E7  10                 	db	16
   206  0079E8  28                 	db	40
   207  0079E9  44                 	db	68
   208  0079EA  82                 	db	130
   209  0079EB  00                 	db	0
   210  0079EC  28                 	db	40
   211  0079ED  28                 	db	40
   212  0079EE  28                 	db	40
   213  0079EF  28                 	db	40
   214  0079F0  28                 	db	40
   215  0079F1  00                 	db	0
   216  0079F2  82                 	db	130
   217  0079F3  44                 	db	68
   218  0079F4  28                 	db	40
   219  0079F5  10                 	db	16
   220  0079F6  04                 	db	4
   221  0079F7  02                 	db	2
   222  0079F8  A2                 	db	162
   223  0079F9  12                 	db	18
   224  0079FA  0C                 	db	12
   225  0079FB  64                 	db	100
   226  0079FC  92                 	db	146
   227  0079FD  F2                 	db	242
   228  0079FE  82                 	db	130
   229  0079FF  7C                 	db	124
   230  007A00  FC                 	db	252
   231  007A01  22                 	db	34
   232  007A02  22                 	db	34
   233  007A03  22                 	db	34
   234  007A04  FC                 	db	252
   235  007A05  FE                 	db	254
   236  007A06  92                 	db	146
   237  007A07  92                 	db	146
   238  007A08  92                 	db	146
   239  007A09  6C                 	db	108
   240  007A0A  7C                 	db	124
   241  007A0B  82                 	db	130
   242  007A0C  82                 	db	130
   243  007A0D  82                 	db	130
   244  007A0E  44                 	db	68
   245  007A0F  FE                 	db	254
   246  007A10  82                 	db	130
   247  007A11  82                 	db	130
   248  007A12  82                 	db	130
   249  007A13  7C                 	db	124
   250  007A14  FE                 	db	254
   251  007A15  92                 	db	146
   252  007A16  92                 	db	146
   253  007A17  92                 	db	146
   254  007A18  92                 	db	146
   255  007A19  FE                 	db	254
   256  007A1A  12                 	db	18
   257  007A1B  12                 	db	18
   258  007A1C  12                 	db	18
   259  007A1D  12                 	db	18
   260  007A1E  7C                 	db	124
   261  007A1F  82                 	db	130
   262  007A20  92                 	db	146
   263  007A21  92                 	db	146
   264  007A22  74                 	db	116
   265  007A23  FE                 	db	254
   266  007A24  10                 	db	16
   267  007A25  10                 	db	16
   268  007A26  10                 	db	16
   269  007A27  FE                 	db	254
   270  007A28  00                 	db	0
   271  007A29  00                 	db	0
   272  007A2A  FE                 	db	254
   273  007A2B  00                 	db	0
   274  007A2C  00                 	db	0
   275  007A2D  40                 	db	64
   276  007A2E  80                 	db	128
   277  007A2F  82                 	db	130
   278  007A30  7E                 	db	126
   279  007A31  02                 	db	2
   280  007A32  FE                 	db	254
   281  007A33  10                 	db	16
   282  007A34  28                 	db	40
   283  007A35  44                 	db	68
   284  007A36  82                 	db	130
   285  007A37  FE                 	db	254
   286  007A38  80                 	db	128
   287  007A39  80                 	db	128
   288  007A3A  80                 	db	128
   289  007A3B  80                 	db	128
   290  007A3C  FE                 	db	254
   291  007A3D  04                 	db	4
   292  007A3E  08                 	db	8
   293  007A3F  04                 	db	4
   294  007A40  FE                 	db	254
   295  007A41  FE                 	db	254
   296  007A42  04                 	db	4
   297  007A43  08                 	db	8
   298  007A44  10                 	db	16
   299  007A45  FE                 	db	254
   300  007A46  7C                 	db	124
   301  007A47  82                 	db	130
   302  007A48  82                 	db	130
   303  007A49  82                 	db	130
   304  007A4A  7C                 	db	124
   305  007A4B  FE                 	db	254
   306  007A4C  12                 	db	18
   307  007A4D  12                 	db	18
   308  007A4E  12                 	db	18
   309  007A4F  0C                 	db	12
   310  007A50  7C                 	db	124
   311  007A51  82                 	db	130
   312  007A52  A2                 	db	162
   313  007A53  42                 	db	66
   314  007A54  BC                 	db	188
   315  007A55  FE                 	db	254
   316  007A56  12                 	db	18
   317  007A57  32                 	db	50
   318  007A58  52                 	db	82
   319  007A59  8C                 	db	140
   320  007A5A  8C                 	db	140
   321  007A5B  92                 	db	146
   322  007A5C  92                 	db	146
   323  007A5D  92                 	db	146
   324  007A5E  62                 	db	98
   325  007A5F  02                 	db	2
   326  007A60  02                 	db	2
   327  007A61  FE                 	db	254
   328  007A62  02                 	db	2
   329  007A63  02                 	db	2
   330  007A64  7E                 	db	126
   331  007A65  80                 	db	128
   332  007A66  80                 	db	128
   333  007A67  80                 	db	128
   334  007A68  7E                 	db	126
   335  007A69  3E                 	db	62
   336  007A6A  40                 	db	64
   337  007A6B  80                 	db	128
   338  007A6C  40                 	db	64
   339  007A6D  3E                 	db	62
   340  007A6E  7E                 	db	126
   341  007A6F  80                 	db	128
   342  007A70  7E                 	db	126
   343  007A71  80                 	db	128
   344  007A72  7E                 	db	126
   345  007A73  C6                 	db	198
   346  007A74  28                 	db	40
   347  007A75  10                 	db	16
   348  007A76  28                 	db	40
   349  007A77  C6                 	db	198
   350  007A78  0E                 	db	14
   351  007A79  10                 	db	16
   352  007A7A  F0                 	db	240
   353  007A7B  10                 	db	16
   354  007A7C  0E                 	db	14
   355  007A7D  C2                 	db	194
   356  007A7E  A2                 	db	162
   357  007A7F  92                 	db	146
   358  007A80  8A                 	db	138
   359  007A81  86                 	db	134
   360  007A82  00                 	db	0
   361  007A83  00                 	db	0
   362  007A84  FE                 	db	254
   363  007A85  82                 	db	130
   364  007A86  00                 	db	0
   365  007A87  04                 	db	4
   366  007A88  08                 	db	8
   367  007A89  10                 	db	16
   368  007A8A  20                 	db	32
   369  007A8B  40                 	db	64
   370  007A8C  00                 	db	0
   371  007A8D  82                 	db	130
   372  007A8E  FE                 	db	254
   373  007A8F  00                 	db	0
   374  007A90  00                 	db	0
   375  007A91  08                 	db	8
   376  007A92  04                 	db	4
   377  007A93  02                 	db	2
   378  007A94  04                 	db	4
   379  007A95  08                 	db	8
   380  007A96  80                 	db	128
   381  007A97  80                 	db	128
   382  007A98  80                 	db	128
   383  007A99  80                 	db	128
   384  007A9A  80                 	db	128
   385  007A9B  00                 	db	0
   386  007A9C  00                 	db	0
   387  007A9D  01                 	db	1
   388  007A9E  02                 	db	2
   389  007A9F  04                 	db	4
   390  007AA0  40                 	db	64
   391  007AA1  A8                 	db	168
   392  007AA2  A8                 	db	168
   393  007AA3  A8                 	db	168
   394  007AA4  F0                 	db	240
   395  007AA5  FE                 	db	254
   396  007AA6  88                 	db	136
   397  007AA7  88                 	db	136
   398  007AA8  88                 	db	136
   399  007AA9  70                 	db	112
   400  007AAA  70                 	db	112
   401  007AAB  88                 	db	136
   402  007AAC  88                 	db	136
   403  007AAD  88                 	db	136
   404  007AAE  40                 	db	64
   405  007AAF  70                 	db	112
   406  007AB0  88                 	db	136
   407  007AB1  88                 	db	136
   408  007AB2  90                 	db	144
   409  007AB3  FE                 	db	254
   410  007AB4  70                 	db	112
   411  007AB5  A8                 	db	168
   412  007AB6  A8                 	db	168
   413  007AB7  A8                 	db	168
   414  007AB8  30                 	db	48
   415  007AB9  10                 	db	16
   416  007ABA  FC                 	db	252
   417  007ABB  12                 	db	18
   418  007ABC  02                 	db	2
   419  007ABD  04                 	db	4
   420  007ABE  18                 	db	24
   421  007ABF  A4                 	db	164
   422  007AC0  A4                 	db	164
   423  007AC1  A4                 	db	164
   424  007AC2  7C                 	db	124
   425  007AC3  FE                 	db	254
   426  007AC4  10                 	db	16
   427  007AC5  08                 	db	8
   428  007AC6  08                 	db	8
   429  007AC7  F0                 	db	240
   430  007AC8  00                 	db	0
   431  007AC9  00                 	db	0
   432  007ACA  FA                 	db	250
   433  007ACB  00                 	db	0
   434  007ACC  00                 	db	0
   435  007ACD  00                 	db	0
   436  007ACE  80                 	db	128
   437  007ACF  7A                 	db	122
   438  007AD0  00                 	db	0
   439  007AD1  00                 	db	0
   440  007AD2  FE                 	db	254
   441  007AD3  20                 	db	32
   442  007AD4  50                 	db	80
   443  007AD5  88                 	db	136
   444  007AD6  00                 	db	0
   445  007AD7  00                 	db	0
   446  007AD8  FE                 	db	254
   447  007AD9  00                 	db	0
   448  007ADA  00                 	db	0
   449  007ADB  00                 	db	0
   450  007ADC  F8                 	db	248
   451  007ADD  08                 	db	8
   452  007ADE  10                 	db	16
   453  007ADF  08                 	db	8
   454  007AE0  F0                 	db	240
   455  007AE1  F8                 	db	248
   456  007AE2  10                 	db	16
   457  007AE3  08                 	db	8
   458  007AE4  08                 	db	8
   459  007AE5  F0                 	db	240
   460  007AE6  70                 	db	112
   461  007AE7  88                 	db	136
   462  007AE8  88                 	db	136
   463  007AE9  88                 	db	136
   464  007AEA  70                 	db	112
   465  007AEB  F8                 	db	248
   466  007AEC  28                 	db	40
   467  007AED  28                 	db	40
   468  007AEE  28                 	db	40
   469  007AEF  10                 	db	16
   470  007AF0  10                 	db	16
   471  007AF1  28                 	db	40
   472  007AF2  28                 	db	40
   473  007AF3  30                 	db	48
   474  007AF4  FC                 	db	252
   475  007AF5  F8                 	db	248
   476  007AF6  10                 	db	16
   477  007AF7  08                 	db	8
   478  007AF8  08                 	db	8
   479  007AF9  10                 	db	16
   480  007AFA  90                 	db	144
   481  007AFB  A8                 	db	168
   482  007AFC  A8                 	db	168
   483  007AFD  A8                 	db	168
   484  007AFE  40                 	db	64
   485  007AFF  08                 	db	8
   486  007B00  7E                 	db	126
   487  007B01  88                 	db	136
   488  007B02  80                 	db	128
   489  007B03  40                 	db	64
   490  007B04  78                 	db	120
   491  007B05  80                 	db	128
   492  007B06  80                 	db	128
   493  007B07  40                 	db	64
   494  007B08  F8                 	db	248
   495  007B09  38                 	db	56
   496  007B0A  40                 	db	64
   497  007B0B  80                 	db	128
   498  007B0C  40                 	db	64
   499  007B0D  38                 	db	56
   500  007B0E  78                 	db	120
   501  007B0F  80                 	db	128
   502  007B10  78                 	db	120
   503  007B11  80                 	db	128
   504  007B12  78                 	db	120
   505  007B13  88                 	db	136
   506  007B14  50                 	db	80
   507  007B15  20                 	db	32
   508  007B16  50                 	db	80
   509  007B17  88                 	db	136
   510  007B18  18                 	db	24
   511  007B19  A0                 	db	160
   512  007B1A  A0                 	db	160
   513  007B1B  A0                 	db	160
   514  007B1C  78                 	db	120
   515  007B1D  88                 	db	136
   516  007B1E  C8                 	db	200
   517  007B1F  A8                 	db	168
   518  007B20  98                 	db	152
   519  007B21  88                 	db	136
   520  007B22  10                 	db	16
   521  007B23  6C                 	db	108
   522  007B24  82                 	db	130
   523  007B25  00                 	db	0
   524  007B26  00                 	db	0
   525  007B27  00                 	db	0
   526  007B28  00                 	db	0
   527  007B29  7E                 	db	126
   528  007B2A  00                 	db	0
   529  007B2B  00                 	db	0
   530  007B2C  00                 	db	0
   531  007B2D  82                 	db	130
   532  007B2E  6C                 	db	108
   533  007B2F  10                 	db	16
   534  007B30  00                 	db	0
   535  007B31  20                 	db	32
   536  007B32  10                 	db	16
   537  007B33  10                 	db	16
   538  007B34  08                 	db	8
   539  007B35  00                 	db	0
   540  007B36                     __end_of_pic:
   541                           	opt stack 0
   542  007B36                     _dpowers:
   543                           	opt stack 0
   544  007B36  0001               	dw	1
   545  007B38  0000               	dw	0
   546  007B3A  000A               	dw	10
   547  007B3C  0000               	dw	0
   548  007B3E  0064               	dw	100
   549  007B40  0000               	dw	0
   550  007B42  03E8               	dw	1000
   551  007B44  0000               	dw	0
   552  007B46  2710               	dw	10000
   553  007B48  0000               	dw	0
   554  007B4A  86A0               	dw	34464
   555  007B4C  0001               	dw	1
   556  007B4E  4240               	dw	16960
   557  007B50  000F               	dw	15
   558  007B52  9680               	dw	38528
   559  007B54  0098               	dw	152
   560  007B56  E100               	dw	57600
   561  007B58  05F5               	dw	1525
   562  007B5A  CA00               	dw	51712
   563  007B5C  3B9A               	dw	15258
   564  007B5E                     __end_of_dpowers:
   565                           	opt stack 0
   566  007B5E                     __npowers_:
   567                           	opt stack 0
   568  007B5E  00                 	db	0
   569  007B5F  80                 	db	128
   570  007B60  3F                 	db	63
   571  007B61  CD                 	db	205
   572  007B62  CC                 	db	204
   573  007B63  3D                 	db	61
   574  007B64  D7                 	db	215
   575  007B65  23                 	db	35
   576  007B66  3C                 	db	60
   577  007B67  12                 	db	18
   578  007B68  83                 	db	131
   579  007B69  3A                 	db	58
   580  007B6A  B7                 	db	183
   581  007B6B  D1                 	db	209
   582  007B6C  38                 	db	56
   583  007B6D  C6                 	db	198
   584  007B6E  27                 	db	39
   585  007B6F  37                 	db	55
   586  007B70  38                 	db	56
   587  007B71  86                 	db	134
   588  007B72  35                 	db	53
   589  007B73  C0                 	db	192
   590  007B74  D6                 	db	214
   591  007B75  33                 	db	51
   592  007B76  CC                 	db	204
   593  007B77  2B                 	db	43
   594  007B78  32                 	db	50
   595  007B79  70                 	db	112
   596  007B7A  89                 	db	137
   597  007B7B  30                 	db	48
   598  007B7C  E7                 	db	231
   599  007B7D  DB                 	db	219
   600  007B7E  2E                 	db	46
   601  007B7F  E5                 	db	229
   602  007B80  3C                 	db	60
   603  007B81  1E                 	db	30
   604  007B82  42                 	db	66
   605  007B83  A2                 	db	162
   606  007B84  0D                 	db	13
   607  007B85                     __end_of__npowers_:
   608                           	opt stack 0
   609  007B85                     __powers_:
   610                           	opt stack 0
   611  007B85  00                 	db	0
   612  007B86  80                 	db	128
   613  007B87  3F                 	db	63
   614  007B88  00                 	db	0
   615  007B89  20                 	db	32
   616  007B8A  41                 	db	65
   617  007B8B  00                 	db	0
   618  007B8C  C8                 	db	200
   619  007B8D  42                 	db	66
   620  007B8E  00                 	db	0
   621  007B8F  7A                 	db	122
   622  007B90  44                 	db	68
   623  007B91  40                 	db	64
   624  007B92  1C                 	db	28
   625  007B93  46                 	db	70
   626  007B94  50                 	db	80
   627  007B95  C3                 	db	195
   628  007B96  47                 	db	71
   629  007B97  24                 	db	36
   630  007B98  74                 	db	116
   631  007B99  49                 	db	73
   632  007B9A  97                 	db	151
   633  007B9B  18                 	db	24
   634  007B9C  4B                 	db	75
   635  007B9D  BC                 	db	188
   636  007B9E  BE                 	db	190
   637  007B9F  4C                 	db	76
   638  007BA0  6B                 	db	107
   639  007BA1  6E                 	db	110
   640  007BA2  4E                 	db	78
   641  007BA3  03                 	db	3
   642  007BA4  15                 	db	21
   643  007BA5  50                 	db	80
   644  007BA6  79                 	db	121
   645  007BA7  AD                 	db	173
   646  007BA8  60                 	db	96
   647  007BA9  F3                 	db	243
   648  007BAA  49                 	db	73
   649  007BAB  71                 	db	113
   650  007BAC                     __end_of__powers_:
   651                           	opt stack 0
   652  007BAC                     lcdplotpixel2@F4454:
   653                           	opt stack 0
   654  007BAC  01                 	db	1
   655  007BAD  02                 	db	2
   656  007BAE  04                 	db	4
   657  007BAF  08                 	db	8
   658  007BB0  10                 	db	16
   659  007BB1  20                 	db	32
   660  007BB2  40                 	db	64
   661  007BB3  80                 	db	128
   662  007BB4  00                 	db	0
   663  007BB5                     __end_oflcdplotpixel2@F4454:
   664                           	opt stack 0
   665  007BB5                     _image:
   666                           	opt stack 0
   667  007BB5  00                 	db	0
   668  007BB6  00                 	db	0
   669  007BB7  00                 	db	0
   670  007BB8  00                 	db	0
   671  007BB9  00                 	db	0
   672  007BBA  00                 	db	0
   673  007BBB  00                 	db	0
   674  007BBC  00                 	db	0
   675  007BBD  00                 	db	0
   676  007BBE  00                 	db	0
   677  007BBF  00                 	db	0
   678  007BC0  00                 	db	0
   679  007BC1  00                 	db	0
   680  007BC2  00                 	db	0
   681  007BC3  00                 	db	0
   682  007BC4  00                 	db	0
   683  007BC5  00                 	db	0
   684  007BC6  00                 	db	0
   685  007BC7  00                 	db	0
   686  007BC8  00                 	db	0
   687  007BC9  00                 	db	0
   688  007BCA  00                 	db	0
   689  007BCB  00                 	db	0
   690  007BCC  00                 	db	0
   691  007BCD  00                 	db	0
   692  007BCE  00                 	db	0
   693  007BCF  00                 	db	0
   694  007BD0  00                 	db	0
   695  007BD1  00                 	db	0
   696  007BD2  00                 	db	0
   697  007BD3  00                 	db	0
   698  007BD4  00                 	db	0
   699  007BD5  00                 	db	0
   700  007BD6  00                 	db	0
   701  007BD7  00                 	db	0
   702  007BD8  00                 	db	0
   703  007BD9  00                 	db	0
   704  007BDA  00                 	db	0
   705  007BDB  00                 	db	0
   706  007BDC  00                 	db	0
   707  007BDD  00                 	db	0
   708  007BDE  00                 	db	0
   709  007BDF  00                 	db	0
   710  007BE0  00                 	db	0
   711  007BE1  00                 	db	0
   712  007BE2  00                 	db	0
   713  007BE3  00                 	db	0
   714  007BE4  00                 	db	0
   715  007BE5  00                 	db	0
   716  007BE6  00                 	db	0
   717  007BE7  00                 	db	0
   718  007BE8  00                 	db	0
   719  007BE9  00                 	db	0
   720  007BEA  00                 	db	0
   721  007BEB  00                 	db	0
   722  007BEC  00                 	db	0
   723  007BED  00                 	db	0
   724  007BEE  00                 	db	0
   725  007BEF  00                 	db	0
   726  007BF0  00                 	db	0
   727  007BF1  00                 	db	0
   728  007BF2  00                 	db	0
   729  007BF3  00                 	db	0
   730  007BF4  00                 	db	0
   731  007BF5  00                 	db	0
   732  007BF6  00                 	db	0
   733  007BF7  00                 	db	0
   734  007BF8  00                 	db	0
   735  007BF9  00                 	db	0
   736  007BFA  00                 	db	0
   737  007BFB  00                 	db	0
   738  007BFC  00                 	db	0
   739  007BFD  00                 	db	0
   740  007BFE  00                 	db	0
   741  007BFF  00                 	db	0
   742  007C00  00                 	db	0
   743  007C01  00                 	db	0
   744  007C02  00                 	db	0
   745  007C03  00                 	db	0
   746  007C04  00                 	db	0
   747  007C05  00                 	db	0
   748  007C06  00                 	db	0
   749  007C07  00                 	db	0
   750  007C08  00                 	db	0
   751  007C09  00                 	db	0
   752  007C0A  00                 	db	0
   753  007C0B  00                 	db	0
   754  007C0C  00                 	db	0
   755  007C0D  00                 	db	0
   756  007C0E  00                 	db	0
   757  007C0F  00                 	db	0
   758  007C10  00                 	db	0
   759  007C11  00                 	db	0
   760  007C12  00                 	db	0
   761  007C13  00                 	db	0
   762  007C14  00                 	db	0
   763  007C15  00                 	db	0
   764  007C16  00                 	db	0
   765  007C17  00                 	db	0
   766  007C18  00                 	db	0
   767  007C19  00                 	db	0
   768  007C1A  00                 	db	0
   769  007C1B  00                 	db	0
   770  007C1C  00                 	db	0
   771  007C1D  00                 	db	0
   772  007C1E  00                 	db	0
   773  007C1F  00                 	db	0
   774  007C20  00                 	db	0
   775  007C21  00                 	db	0
   776  007C22  00                 	db	0
   777  007C23  00                 	db	0
   778  007C24  00                 	db	0
   779  007C25  00                 	db	0
   780  007C26  00                 	db	0
   781  007C27  00                 	db	0
   782  007C28  00                 	db	0
   783  007C29  00                 	db	0
   784  007C2A  00                 	db	0
   785  007C2B  00                 	db	0
   786  007C2C  00                 	db	0
   787  007C2D  00                 	db	0
   788  007C2E  00                 	db	0
   789  007C2F  00                 	db	0
   790  007C30  00                 	db	0
   791  007C31  00                 	db	0
   792  007C32  00                 	db	0
   793  007C33  00                 	db	0
   794  007C34  00                 	db	0
   795  007C35  00                 	db	0
   796  007C36  00                 	db	0
   797  007C37  00                 	db	0
   798  007C38  00                 	db	0
   799  007C39  00                 	db	0
   800  007C3A  00                 	db	0
   801  007C3B  00                 	db	0
   802  007C3C  00                 	db	0
   803  007C3D  00                 	db	0
   804  007C3E  00                 	db	0
   805  007C3F  00                 	db	0
   806  007C40  00                 	db	0
   807  007C41  00                 	db	0
   808  007C42  00                 	db	0
   809  007C43  FE                 	db	254
   810  007C44  02                 	db	2
   811  007C45  02                 	db	2
   812  007C46  00                 	db	0
   813  007C47  26                 	db	38
   814  007C48  2A                 	db	42
   815  007C49  2A                 	db	42
   816  007C4A  1E                 	db	30
   817  007C4B  00                 	db	0
   818  007C4C  FE                 	db	254
   819  007C4D  22                 	db	34
   820  007C4E  22                 	db	34
   821  007C4F  22                 	db	34
   822  007C50  1C                 	db	28
   823  007C51  00                 	db	0
   824  007C52  1C                 	db	28
   825  007C53  22                 	db	34
   826  007C54  22                 	db	34
   827  007C55  1C                 	db	28
   828  007C56  00                 	db	0
   829  007C57  00                 	db	0
   830  007C58  3E                 	db	62
   831  007C59  10                 	db	16
   832  007C5A  20                 	db	32
   833  007C5B  00                 	db	0
   834  007C5C  26                 	db	38
   835  007C5D  2A                 	db	42
   836  007C5E  2A                 	db	42
   837  007C5F  1E                 	db	30
   838  007C60  00                 	db	0
   839  007C61  20                 	db	32
   840  007C62  7C                 	db	124
   841  007C63  22                 	db	34
   842  007C64  00                 	db	0
   843  007C65  1C                 	db	28
   844  007C66  22                 	db	34
   845  007C67  22                 	db	34
   846  007C68  1C                 	db	28
   847  007C69  00                 	db	0
   848  007C6A  00                 	db	0
   849  007C6B  3E                 	db	62
   850  007C6C  10                 	db	16
   851  007C6D  20                 	db	32
   852  007C6E  00                 	db	0
   853  007C6F  20                 	db	32
   854  007C70  BE                 	db	190
   855  007C71  00                 	db	0
   856  007C72  1C                 	db	28
   857  007C73  22                 	db	34
   858  007C74  22                 	db	34
   859  007C75  1C                 	db	28
   860  007C76  00                 	db	0
   861  007C77  00                 	db	0
   862  007C78  00                 	db	0
   863  007C79  00                 	db	0
   864  007C7A  00                 	db	0
   865  007C7B  FE                 	db	254
   866  007C7C  00                 	db	0
   867  007C7D  3E                 	db	62
   868  007C7E  20                 	db	32
   869  007C7F  20                 	db	32
   870  007C80  1E                 	db	30
   871  007C81  00                 	db	0
   872  007C82  1A                 	db	26
   873  007C83  26                 	db	38
   874  007C84  26                 	db	38
   875  007C85  3B                 	db	59
   876  007C86  00                 	db	0
   877  007C87  1C                 	db	28
   878  007C88  2A                 	db	42
   879  007C89  2A                 	db	42
   880  007C8A  1A                 	db	26
   881  007C8B  00                 	db	0
   882  007C8C  1A                 	db	26
   883  007C8D  26                 	db	38
   884  007C8E  26                 	db	38
   885  007C8F  3B                 	db	59
   886  007C90  00                 	db	0
   887  007C91  3E                 	db	62
   888  007C92  20                 	db	32
   889  007C93  20                 	db	32
   890  007C94  1E                 	db	30
   891  007C95  00                 	db	0
   892  007C96  1C                 	db	28
   893  007C97  2A                 	db	42
   894  007C98  2A                 	db	42
   895  007C99  1A                 	db	26
   896  007C9A  00                 	db	0
   897  007C9B  00                 	db	0
   898  007C9C  3E                 	db	62
   899  007C9D  10                 	db	16
   900  007C9E  20                 	db	32
   901  007C9F  00                 	db	0
   902  007CA0  20                 	db	32
   903  007CA1  BE                 	db	190
   904  007CA2  00                 	db	0
   905  007CA3  26                 	db	38
   906  007CA4  2A                 	db	42
   907  007CA5  2A                 	db	42
   908  007CA6  1E                 	db	30
   909  007CA7  00                 	db	0
   910  007CA8  00                 	db	0
   911  007CA9  00                 	db	0
   912  007CAA  00                 	db	0
   913  007CAB  00                 	db	0
   914  007CAC  00                 	db	0
   915  007CAD  00                 	db	0
   916  007CAE  00                 	db	0
   917  007CAF  00                 	db	0
   918  007CB0  00                 	db	0
   919  007CB1  00                 	db	0
   920  007CB2  00                 	db	0
   921  007CB3  00                 	db	0
   922  007CB4  00                 	db	0
   923  007CB5  00                 	db	0
   924  007CB6  00                 	db	0
   925  007CB7  00                 	db	0
   926  007CB8  00                 	db	0
   927  007CB9  00                 	db	0
   928  007CBA  00                 	db	0
   929  007CBB  00                 	db	0
   930  007CBC  00                 	db	0
   931  007CBD  00                 	db	0
   932  007CBE  00                 	db	0
   933  007CBF  00                 	db	0
   934  007CC0  00                 	db	0
   935  007CC1  00                 	db	0
   936  007CC2  00                 	db	0
   937  007CC3  00                 	db	0
   938  007CC4  00                 	db	0
   939  007CC5  00                 	db	0
   940  007CC6  00                 	db	0
   941  007CC7  00                 	db	0
   942  007CC8  00                 	db	0
   943  007CC9  00                 	db	0
   944  007CCA  00                 	db	0
   945  007CCB  00                 	db	0
   946  007CCC  00                 	db	0
   947  007CCD  00                 	db	0
   948  007CCE  00                 	db	0
   949  007CCF  00                 	db	0
   950  007CD0  00                 	db	0
   951  007CD1  00                 	db	0
   952  007CD2  00                 	db	0
   953  007CD3  00                 	db	0
   954  007CD4  00                 	db	0
   955  007CD5  00                 	db	0
   956  007CD6  00                 	db	0
   957  007CD7  00                 	db	0
   958  007CD8  00                 	db	0
   959  007CD9  00                 	db	0
   960  007CDA  00                 	db	0
   961  007CDB  00                 	db	0
   962  007CDC  07                 	db	7
   963  007CDD  00                 	db	0
   964  007CDE  01                 	db	1
   965  007CDF  01                 	db	1
   966  007CE0  01                 	db	1
   967  007CE1  00                 	db	0
   968  007CE2  00                 	db	0
   969  007CE3  01                 	db	1
   970  007CE4  03                 	db	3
   971  007CE5  05                 	db	5
   972  007CE6  04                 	db	4
   973  007CE7  00                 	db	0
   974  007CE8  01                 	db	1
   975  007CE9  01                 	db	1
   976  007CEA  00                 	db	0
   977  007CEB  00                 	db	0
   978  007CEC  00                 	db	0
   979  007CED  01                 	db	1
   980  007CEE  00                 	db	0
   981  007CEF  01                 	db	1
   982  007CF0  00                 	db	0
   983  007CF1  01                 	db	1
   984  007CF2  01                 	db	1
   985  007CF3  01                 	db	1
   986  007CF4  01                 	db	1
   987  007CF5  01                 	db	1
   988  007CF6  01                 	db	1
   989  007CF7  00                 	db	0
   990  007CF8  00                 	db	0
   991  007CF9  01                 	db	1
   992  007CFA  01                 	db	1
   993  007CFB  01                 	db	1
   994  007CFC  00                 	db	0
   995  007CFD  00                 	db	0
   996  007CFE  01                 	db	1
   997  007CFF  03                 	db	3
   998  007D00  01                 	db	1
   999  007D01  00                 	db	0
  1000  007D02  81                 	db	129
  1001  007D03  85                 	db	133
  1002  007D04  80                 	db	128
  1003  007D05  00                 	db	0
  1004  007D06  01                 	db	1
  1005  007D07  01                 	db	1
  1006  007D08  01                 	db	1
  1007  007D09  00                 	db	0
  1008  007D0A  01                 	db	1
  1009  007D0B  01                 	db	1
  1010  007D0C  81                 	db	129
  1011  007D0D  80                 	db	128
  1012  007D0E  80                 	db	128
  1013  007D0F  00                 	db	0
  1014  007D10  00                 	db	0
  1015  007D11  00                 	db	0
  1016  007D12  00                 	db	0
  1017  007D13  00                 	db	0
  1018  007D14  00                 	db	0
  1019  007D15  00                 	db	0
  1020  007D16  00                 	db	0
  1021  007D17  00                 	db	0
  1022  007D18  00                 	db	0
  1023  007D19  00                 	db	0
  1024  007D1A  00                 	db	0
  1025  007D1B  00                 	db	0
  1026  007D1C  00                 	db	0
  1027  007D1D  00                 	db	0
  1028  007D1E  00                 	db	0
  1029  007D1F  00                 	db	0
  1030  007D20  00                 	db	0
  1031  007D21  00                 	db	0
  1032  007D22  00                 	db	0
  1033  007D23  00                 	db	0
  1034  007D24  00                 	db	0
  1035  007D25  00                 	db	0
  1036  007D26  00                 	db	0
  1037  007D27  00                 	db	0
  1038  007D28  00                 	db	0
  1039  007D29  00                 	db	0
  1040  007D2A  00                 	db	0
  1041  007D2B  00                 	db	0
  1042  007D2C  00                 	db	0
  1043  007D2D  00                 	db	0
  1044  007D2E  00                 	db	0
  1045  007D2F  00                 	db	0
  1046  007D30  00                 	db	0
  1047  007D31  00                 	db	0
  1048  007D32  00                 	db	0
  1049  007D33  00                 	db	0
  1050  007D34  00                 	db	0
  1051  007D35  00                 	db	0
  1052  007D36  00                 	db	0
  1053  007D37  00                 	db	0
  1054  007D38  00                 	db	0
  1055  007D39  00                 	db	0
  1056  007D3A  00                 	db	0
  1057  007D3B  00                 	db	0
  1058  007D3C  00                 	db	0
  1059  007D3D  00                 	db	0
  1060  007D3E  00                 	db	0
  1061  007D3F  00                 	db	0
  1062  007D40  00                 	db	0
  1063  007D41  00                 	db	0
  1064  007D42  00                 	db	0
  1065  007D43  00                 	db	0
  1066  007D44  00                 	db	0
  1067  007D45  00                 	db	0
  1068  007D46  00                 	db	0
  1069  007D47  00                 	db	0
  1070  007D48  00                 	db	0
  1071  007D49  00                 	db	0
  1072  007D4A  00                 	db	0
  1073  007D4B  00                 	db	0
  1074  007D4C  00                 	db	0
  1075  007D4D  00                 	db	0
  1076  007D4E  00                 	db	0
  1077  007D4F  00                 	db	0
  1078  007D50  00                 	db	0
  1079  007D51  00                 	db	0
  1080  007D52  00                 	db	0
  1081  007D53  00                 	db	0
  1082  007D54  00                 	db	0
  1083  007D55  00                 	db	0
  1084  007D56  00                 	db	0
  1085  007D57  00                 	db	0
  1086  007D58  00                 	db	0
  1087  007D59  00                 	db	0
  1088  007D5A  00                 	db	0
  1089  007D5B  00                 	db	0
  1090  007D5C  F0                 	db	240
  1091  007D5D  00                 	db	0
  1092  007D5E  F0                 	db	240
  1093  007D5F  00                 	db	0
  1094  007D60  00                 	db	0
  1095  007D61  F0                 	db	240
  1096  007D62  00                 	db	0
  1097  007D63  00                 	db	0
  1098  007D64  F0                 	db	240
  1099  007D65  00                 	db	0
  1100  007D66  00                 	db	0
  1101  007D67  E0                 	db	224
  1102  007D68  10                 	db	16
  1103  007D69  10                 	db	16
  1104  007D6A  E0                 	db	224
  1105  007D6B  00                 	db	0
  1106  007D6C  00                 	db	0
  1107  007D6D  F0                 	db	240
  1108  007D6E  80                 	db	128
  1109  007D6F  00                 	db	0
  1110  007D70  00                 	db	0
  1111  007D71  F0                 	db	240
  1112  007D72  00                 	db	0
  1113  007D73  00                 	db	0
  1114  007D74  F0                 	db	240
  1115  007D75  00                 	db	0
  1116  007D76  00                 	db	0
  1117  007D77  F0                 	db	240
  1118  007D78  00                 	db	0
  1119  007D79  30                 	db	48
  1120  007D7A  50                 	db	80
  1121  007D7B  50                 	db	80
  1122  007D7C  F0                 	db	240
  1123  007D7D  00                 	db	0
  1124  007D7E  00                 	db	0
  1125  007D7F  E0                 	db	224
  1126  007D80  10                 	db	16
  1127  007D81  00                 	db	0
  1128  007D82  00                 	db	0
  1129  007D83  F0                 	db	240
  1130  007D84  00                 	db	0
  1131  007D85  E0                 	db	224
  1132  007D86  10                 	db	16
  1133  007D87  10                 	db	16
  1134  007D88  10                 	db	16
  1135  007D89  00                 	db	0
  1136  007D8A  30                 	db	48
  1137  007D8B  50                 	db	80
  1138  007D8C  50                 	db	80
  1139  007D8D  F0                 	db	240
  1140  007D8E  00                 	db	0
  1141  007D8F  00                 	db	0
  1142  007D90  00                 	db	0
  1143  007D91  00                 	db	0
  1144  007D92  00                 	db	0
  1145  007D93  00                 	db	0
  1146  007D94  00                 	db	0
  1147  007D95  00                 	db	0
  1148  007D96  00                 	db	0
  1149  007D97  00                 	db	0
  1150  007D98  00                 	db	0
  1151  007D99  00                 	db	0
  1152  007D9A  00                 	db	0
  1153  007D9B  00                 	db	0
  1154  007D9C  00                 	db	0
  1155  007D9D  00                 	db	0
  1156  007D9E  00                 	db	0
  1157  007D9F  00                 	db	0
  1158  007DA0  00                 	db	0
  1159  007DA1  00                 	db	0
  1160  007DA2  00                 	db	0
  1161  007DA3  00                 	db	0
  1162  007DA4  00                 	db	0
  1163  007DA5  00                 	db	0
  1164  007DA6  00                 	db	0
  1165  007DA7  00                 	db	0
  1166  007DA8  00                 	db	0
  1167  007DA9  00                 	db	0
  1168  007DAA  00                 	db	0
  1169  007DAB  00                 	db	0
  1170  007DAC  00                 	db	0
  1171  007DAD  00                 	db	0
  1172  007DAE  00                 	db	0
  1173  007DAF  00                 	db	0
  1174  007DB0  00                 	db	0
  1175  007DB1  00                 	db	0
  1176  007DB2  00                 	db	0
  1177  007DB3  00                 	db	0
  1178  007DB4  00                 	db	0
  1179  007DB5  00                 	db	0
  1180  007DB6  00                 	db	0
  1181  007DB7  00                 	db	0
  1182  007DB8  00                 	db	0
  1183  007DB9  00                 	db	0
  1184  007DBA  00                 	db	0
  1185  007DBB  00                 	db	0
  1186  007DBC  00                 	db	0
  1187  007DBD  00                 	db	0
  1188  007DBE  00                 	db	0
  1189  007DBF  00                 	db	0
  1190  007DC0  00                 	db	0
  1191  007DC1  00                 	db	0
  1192  007DC2  00                 	db	0
  1193  007DC3  00                 	db	0
  1194  007DC4  00                 	db	0
  1195  007DC5  00                 	db	0
  1196  007DC6  00                 	db	0
  1197  007DC7  00                 	db	0
  1198  007DC8  00                 	db	0
  1199  007DC9  00                 	db	0
  1200  007DCA  00                 	db	0
  1201  007DCB  00                 	db	0
  1202  007DCC  00                 	db	0
  1203  007DCD  00                 	db	0
  1204  007DCE  00                 	db	0
  1205  007DCF  00                 	db	0
  1206  007DD0  00                 	db	0
  1207  007DD1  00                 	db	0
  1208  007DD2  00                 	db	0
  1209  007DD3  00                 	db	0
  1210  007DD4  00                 	db	0
  1211  007DD5  00                 	db	0
  1212  007DD6  00                 	db	0
  1213  007DD7  00                 	db	0
  1214  007DD8  00                 	db	0
  1215  007DD9  00                 	db	0
  1216  007DDA  00                 	db	0
  1217  007DDB  00                 	db	0
  1218  007DDC  00                 	db	0
  1219  007DDD  00                 	db	0
  1220  007DDE  00                 	db	0
  1221  007DDF  00                 	db	0
  1222  007DE0  00                 	db	0
  1223  007DE1  00                 	db	0
  1224  007DE2  00                 	db	0
  1225  007DE3  00                 	db	0
  1226  007DE4  00                 	db	0
  1227  007DE5  00                 	db	0
  1228  007DE6  00                 	db	0
  1229  007DE7  00                 	db	0
  1230  007DE8  00                 	db	0
  1231  007DE9  00                 	db	0
  1232  007DEA  00                 	db	0
  1233  007DEB  00                 	db	0
  1234  007DEC  00                 	db	0
  1235  007DED  00                 	db	0
  1236  007DEE  00                 	db	0
  1237  007DEF  00                 	db	0
  1238  007DF0  00                 	db	0
  1239  007DF1  00                 	db	0
  1240  007DF2  00                 	db	0
  1241  007DF3  00                 	db	0
  1242  007DF4  00                 	db	0
  1243  007DF5  00                 	db	0
  1244  007DF6  00                 	db	0
  1245  007DF7  00                 	db	0
  1246  007DF8  00                 	db	0
  1247  007DF9  00                 	db	0
  1248  007DFA  00                 	db	0
  1249  007DFB  00                 	db	0
  1250  007DFC  00                 	db	0
  1251  007DFD  00                 	db	0
  1252  007DFE  00                 	db	0
  1253  007DFF  00                 	db	0
  1254  007E00  00                 	db	0
  1255  007E01  00                 	db	0
  1256  007E02  00                 	db	0
  1257  007E03  00                 	db	0
  1258  007E04  00                 	db	0
  1259  007E05  00                 	db	0
  1260  007E06  00                 	db	0
  1261  007E07  00                 	db	0
  1262  007E08  00                 	db	0
  1263  007E09  00                 	db	0
  1264  007E0A  00                 	db	0
  1265  007E0B  00                 	db	0
  1266  007E0C  00                 	db	0
  1267  007E0D  00                 	db	0
  1268  007E0E  00                 	db	0
  1269  007E0F  00                 	db	0
  1270  007E10  00                 	db	0
  1271  007E11  00                 	db	0
  1272  007E12  00                 	db	0
  1273  007E13  00                 	db	0
  1274  007E14  00                 	db	0
  1275  007E15  00                 	db	0
  1276  007E16  00                 	db	0
  1277  007E17  00                 	db	0
  1278  007E18  00                 	db	0
  1279  007E19  00                 	db	0
  1280  007E1A  00                 	db	0
  1281  007E1B  00                 	db	0
  1282  007E1C  00                 	db	0
  1283  007E1D  00                 	db	0
  1284  007E1E  00                 	db	0
  1285  007E1F  00                 	db	0
  1286  007E20  00                 	db	0
  1287  007E21  00                 	db	0
  1288  007E22  00                 	db	0
  1289  007E23  00                 	db	0
  1290  007E24  00                 	db	0
  1291  007E25  00                 	db	0
  1292  007E26  00                 	db	0
  1293  007E27  00                 	db	0
  1294  007E28  00                 	db	0
  1295  007E29  00                 	db	0
  1296  007E2A  00                 	db	0
  1297  007E2B  00                 	db	0
  1298  007E2C  00                 	db	0
  1299  007E2D  00                 	db	0
  1300  007E2E  00                 	db	0
  1301  007E2F  00                 	db	0
  1302  007E30  00                 	db	0
  1303  007E31  00                 	db	0
  1304  007E32  00                 	db	0
  1305  007E33  00                 	db	0
  1306  007E34  00                 	db	0
  1307  007E35  00                 	db	0
  1308  007E36  00                 	db	0
  1309  007E37  00                 	db	0
  1310  007E38  00                 	db	0
  1311  007E39  00                 	db	0
  1312  007E3A  00                 	db	0
  1313  007E3B  00                 	db	0
  1314  007E3C  00                 	db	0
  1315  007E3D  00                 	db	0
  1316  007E3E  00                 	db	0
  1317  007E3F  00                 	db	0
  1318  007E40  00                 	db	0
  1319  007E41  00                 	db	0
  1320  007E42  00                 	db	0
  1321  007E43  00                 	db	0
  1322  007E44  00                 	db	0
  1323  007E45  00                 	db	0
  1324  007E46  00                 	db	0
  1325  007E47  00                 	db	0
  1326  007E48  00                 	db	0
  1327  007E49  00                 	db	0
  1328  007E4A  00                 	db	0
  1329  007E4B  00                 	db	0
  1330  007E4C  00                 	db	0
  1331  007E4D  00                 	db	0
  1332  007E4E  00                 	db	0
  1333  007E4F  00                 	db	0
  1334  007E50  00                 	db	0
  1335  007E51  00                 	db	0
  1336  007E52  00                 	db	0
  1337  007E53  00                 	db	0
  1338  007E54  00                 	db	0
  1339  007E55  00                 	db	0
  1340  007E56  00                 	db	0
  1341  007E57  01                 	db	1
  1342  007E58  00                 	db	0
  1343  007E59  00                 	db	0
  1344  007E5A  00                 	db	0
  1345  007E5B  00                 	db	0
  1346  007E5C  00                 	db	0
  1347  007E5D  00                 	db	0
  1348  007E5E  00                 	db	0
  1349  007E5F  00                 	db	0
  1350  007E60  00                 	db	0
  1351  007E61  00                 	db	0
  1352  007E62  00                 	db	0
  1353  007E63  00                 	db	0
  1354  007E64  00                 	db	0
  1355  007E65  00                 	db	0
  1356  007E66  00                 	db	0
  1357  007E67  00                 	db	0
  1358  007E68  00                 	db	0
  1359  007E69  00                 	db	0
  1360  007E6A  01                 	db	1
  1361  007E6B  00                 	db	0
  1362  007E6C  00                 	db	0
  1363  007E6D  00                 	db	0
  1364  007E6E  00                 	db	0
  1365  007E6F  00                 	db	0
  1366  007E70  01                 	db	1
  1367  007E71  00                 	db	0
  1368  007E72  00                 	db	0
  1369  007E73  00                 	db	0
  1370  007E74  00                 	db	0
  1371  007E75  01                 	db	1
  1372  007E76  01                 	db	1
  1373  007E77  01                 	db	1
  1374  007E78  01                 	db	1
  1375  007E79  00                 	db	0
  1376  007E7A  00                 	db	0
  1377  007E7B  00                 	db	0
  1378  007E7C  00                 	db	0
  1379  007E7D  00                 	db	0
  1380  007E7E  00                 	db	0
  1381  007E7F  00                 	db	0
  1382  007E80  00                 	db	0
  1383  007E81  00                 	db	0
  1384  007E82  00                 	db	0
  1385  007E83  00                 	db	0
  1386  007E84  00                 	db	0
  1387  007E85  00                 	db	0
  1388  007E86  01                 	db	1
  1389  007E87  00                 	db	0
  1390  007E88  00                 	db	0
  1391  007E89  00                 	db	0
  1392  007E8A  00                 	db	0
  1393  007E8B  00                 	db	0
  1394  007E8C  01                 	db	1
  1395  007E8D  00                 	db	0
  1396  007E8E  00                 	db	0
  1397  007E8F  00                 	db	0
  1398  007E90  00                 	db	0
  1399  007E91  00                 	db	0
  1400  007E92  00                 	db	0
  1401  007E93  00                 	db	0
  1402  007E94  00                 	db	0
  1403  007E95  00                 	db	0
  1404  007E96  00                 	db	0
  1405  007E97  00                 	db	0
  1406  007E98  00                 	db	0
  1407  007E99  00                 	db	0
  1408  007E9A  00                 	db	0
  1409  007E9B  00                 	db	0
  1410  007E9C  00                 	db	0
  1411  007E9D  00                 	db	0
  1412  007E9E  00                 	db	0
  1413  007E9F  00                 	db	0
  1414  007EA0  00                 	db	0
  1415  007EA1  00                 	db	0
  1416  007EA2  00                 	db	0
  1417  007EA3  00                 	db	0
  1418  007EA4  00                 	db	0
  1419  007EA5  00                 	db	0
  1420  007EA6  00                 	db	0
  1421  007EA7  00                 	db	0
  1422  007EA8  00                 	db	0
  1423  007EA9  00                 	db	0
  1424  007EAA  00                 	db	0
  1425  007EAB  00                 	db	0
  1426  007EAC  00                 	db	0
  1427  007EAD  00                 	db	0
  1428  007EAE  00                 	db	0
  1429  007EAF  00                 	db	0
  1430  007EB0  00                 	db	0
  1431  007EB1  00                 	db	0
  1432  007EB2  00                 	db	0
  1433  007EB3  00                 	db	0
  1434  007EB4  00                 	db	0
  1435  007EB5  00                 	db	0
  1436  007EB6  00                 	db	0
  1437  007EB7  00                 	db	0
  1438  007EB8  00                 	db	0
  1439  007EB9  00                 	db	0
  1440  007EBA  00                 	db	0
  1441  007EBB  00                 	db	0
  1442  007EBC  00                 	db	0
  1443  007EBD  00                 	db	0
  1444  007EBE  00                 	db	0
  1445  007EBF  00                 	db	0
  1446  007EC0  00                 	db	0
  1447  007EC1  00                 	db	0
  1448  007EC2  00                 	db	0
  1449  007EC3  00                 	db	0
  1450  007EC4  00                 	db	0
  1451  007EC5  00                 	db	0
  1452  007EC6  00                 	db	0
  1453  007EC7  00                 	db	0
  1454  007EC8  00                 	db	0
  1455  007EC9  00                 	db	0
  1456  007ECA  00                 	db	0
  1457  007ECB  00                 	db	0
  1458  007ECC  00                 	db	0
  1459  007ECD  00                 	db	0
  1460  007ECE  00                 	db	0
  1461  007ECF  00                 	db	0
  1462  007ED0  00                 	db	0
  1463  007ED1  00                 	db	0
  1464  007ED2  00                 	db	0
  1465  007ED3  00                 	db	0
  1466  007ED4  00                 	db	0
  1467  007ED5  00                 	db	0
  1468  007ED6  00                 	db	0
  1469  007ED7  FC                 	db	252
  1470  007ED8  04                 	db	4
  1471  007ED9  04                 	db	4
  1472  007EDA  00                 	db	0
  1473  007EDB  7C                 	db	124
  1474  007EDC  04                 	db	4
  1475  007EDD  04                 	db	4
  1476  007EDE  7C                 	db	124
  1477  007EDF  00                 	db	0
  1478  007EE0  38                 	db	56
  1479  007EE1  44                 	db	68
  1480  007EE2  44                 	db	68
  1481  007EE3  44                 	db	68
  1482  007EE4  00                 	db	0
  1483  007EE5  38                 	db	56
  1484  007EE6  44                 	db	68
  1485  007EE7  44                 	db	68
  1486  007EE8  44                 	db	68
  1487  007EE9  00                 	db	0
  1488  007EEA  FC                 	db	252
  1489  007EEB  40                 	db	64
  1490  007EEC  40                 	db	64
  1491  007EED  3C                 	db	60
  1492  007EEE  00                 	db	0
  1493  007EEF  40                 	db	64
  1494  007EF0  7C                 	db	124
  1495  007EF1  00                 	db	0
  1496  007EF2  00                 	db	0
  1497  007EF3  00                 	db	0
  1498  007EF4  00                 	db	0
  1499  007EF5  FC                 	db	252
  1500  007EF6  04                 	db	4
  1501  007EF7  04                 	db	4
  1502  007EF8  04                 	db	4
  1503  007EF9  F8                 	db	248
  1504  007EFA  00                 	db	0
  1505  007EFB  4C                 	db	76
  1506  007EFC  54                 	db	84
  1507  007EFD  54                 	db	84
  1508  007EFE  3C                 	db	60
  1509  007EFF  00                 	db	0
  1510  007F00  40                 	db	64
  1511  007F01  38                 	db	56
  1512  007F02  04                 	db	4
  1513  007F03  38                 	db	56
  1514  007F04  40                 	db	64
  1515  007F05  40                 	db	64
  1516  007F06  7C                 	db	124
  1517  007F07  00                 	db	0
  1518  007F08  38                 	db	56
  1519  007F09  44                 	db	68
  1520  007F0A  44                 	db	68
  1521  007F0B  44                 	db	68
  1522  007F0C  FC                 	db	252
  1523  007F0D  00                 	db	0
  1524  007F0E  38                 	db	56
  1525  007F0F  54                 	db	84
  1526  007F10  54                 	db	84
  1527  007F11  34                 	db	52
  1528  007F12  00                 	db	0
  1529  007F13  00                 	db	0
  1530  007F14  00                 	db	0
  1531  007F15  00                 	db	0
  1532  007F16  00                 	db	0
  1533  007F17  00                 	db	0
  1534  007F18  00                 	db	0
  1535  007F19  00                 	db	0
  1536  007F1A  00                 	db	0
  1537  007F1B  00                 	db	0
  1538  007F1C  00                 	db	0
  1539  007F1D  00                 	db	0
  1540  007F1E  00                 	db	0
  1541  007F1F  00                 	db	0
  1542  007F20  00                 	db	0
  1543  007F21  00                 	db	0
  1544  007F22  00                 	db	0
  1545  007F23  00                 	db	0
  1546  007F24  00                 	db	0
  1547  007F25  00                 	db	0
  1548  007F26  00                 	db	0
  1549  007F27  00                 	db	0
  1550  007F28  00                 	db	0
  1551  007F29  00                 	db	0
  1552  007F2A  00                 	db	0
  1553  007F2B  00                 	db	0
  1554  007F2C  00                 	db	0
  1555  007F2D  00                 	db	0
  1556  007F2E  00                 	db	0
  1557  007F2F  00                 	db	0
  1558  007F30  00                 	db	0
  1559  007F31  00                 	db	0
  1560  007F32  00                 	db	0
  1561  007F33  00                 	db	0
  1562  007F34  00                 	db	0
  1563  007F35  00                 	db	0
  1564  007F36  00                 	db	0
  1565  007F37  00                 	db	0
  1566  007F38  00                 	db	0
  1567  007F39  00                 	db	0
  1568  007F3A  00                 	db	0
  1569  007F3B  00                 	db	0
  1570  007F3C  00                 	db	0
  1571  007F3D  00                 	db	0
  1572  007F3E  00                 	db	0
  1573  007F3F  00                 	db	0
  1574  007F40  00                 	db	0
  1575  007F41  00                 	db	0
  1576  007F42  00                 	db	0
  1577  007F43  00                 	db	0
  1578  007F44  00                 	db	0
  1579  007F45  00                 	db	0
  1580  007F46  00                 	db	0
  1581  007F47  00                 	db	0
  1582  007F48  00                 	db	0
  1583  007F49  00                 	db	0
  1584  007F4A  00                 	db	0
  1585  007F4B  00                 	db	0
  1586  007F4C  00                 	db	0
  1587  007F4D  00                 	db	0
  1588  007F4E  00                 	db	0
  1589  007F4F  00                 	db	0
  1590  007F50  00                 	db	0
  1591  007F51  00                 	db	0
  1592  007F52  00                 	db	0
  1593  007F53  00                 	db	0
  1594  007F54  00                 	db	0
  1595  007F55  00                 	db	0
  1596  007F56  00                 	db	0
  1597  007F57  00                 	db	0
  1598  007F58  00                 	db	0
  1599  007F59  00                 	db	0
  1600  007F5A  00                 	db	0
  1601  007F5B  00                 	db	0
  1602  007F5C  00                 	db	0
  1603  007F5D  00                 	db	0
  1604  007F5E  00                 	db	0
  1605  007F5F  00                 	db	0
  1606  007F60  00                 	db	0
  1607  007F61  00                 	db	0
  1608  007F62  00                 	db	0
  1609  007F63  00                 	db	0
  1610  007F64  00                 	db	0
  1611  007F65  00                 	db	0
  1612  007F66  00                 	db	0
  1613  007F67  00                 	db	0
  1614  007F68  00                 	db	0
  1615  007F69  00                 	db	0
  1616  007F6A  00                 	db	0
  1617  007F6B  00                 	db	0
  1618  007F6C  00                 	db	0
  1619  007F6D  00                 	db	0
  1620  007F6E  00                 	db	0
  1621  007F6F  00                 	db	0
  1622  007F70  00                 	db	0
  1623  007F71  00                 	db	0
  1624  007F72  00                 	db	0
  1625  007F73  00                 	db	0
  1626  007F74  00                 	db	0
  1627  007F75  00                 	db	0
  1628  007F76  00                 	db	0
  1629  007F77  00                 	db	0
  1630  007F78  00                 	db	0
  1631  007F79  00                 	db	0
  1632  007F7A  00                 	db	0
  1633  007F7B  00                 	db	0
  1634  007F7C  00                 	db	0
  1635  007F7D  00                 	db	0
  1636  007F7E  00                 	db	0
  1637  007F7F  00                 	db	0
  1638  007F80  00                 	db	0
  1639  007F81  00                 	db	0
  1640  007F82  00                 	db	0
  1641  007F83  00                 	db	0
  1642  007F84  00                 	db	0
  1643  007F85  00                 	db	0
  1644  007F86  00                 	db	0
  1645  007F87  00                 	db	0
  1646  007F88  00                 	db	0
  1647  007F89  00                 	db	0
  1648  007F8A  00                 	db	0
  1649  007F8B  00                 	db	0
  1650  007F8C  00                 	db	0
  1651  007F8D  00                 	db	0
  1652  007F8E  00                 	db	0
  1653  007F8F  00                 	db	0
  1654  007F90  00                 	db	0
  1655  007F91  00                 	db	0
  1656  007F92  00                 	db	0
  1657  007F93  00                 	db	0
  1658  007F94  00                 	db	0
  1659  007F95  00                 	db	0
  1660  007F96  00                 	db	0
  1661  007F97  00                 	db	0
  1662  007F98  00                 	db	0
  1663  007F99  00                 	db	0
  1664  007F9A  00                 	db	0
  1665  007F9B  00                 	db	0
  1666  007F9C  00                 	db	0
  1667  007F9D  00                 	db	0
  1668  007F9E  00                 	db	0
  1669  007F9F  00                 	db	0
  1670  007FA0  00                 	db	0
  1671  007FA1  00                 	db	0
  1672  007FA2  00                 	db	0
  1673  007FA3  00                 	db	0
  1674  007FA4  00                 	db	0
  1675  007FA5  00                 	db	0
  1676  007FA6  00                 	db	0
  1677  007FA7  00                 	db	0
  1678  007FA8  00                 	db	0
  1679  007FA9  00                 	db	0
  1680  007FAA  00                 	db	0
  1681  007FAB  00                 	db	0
  1682  007FAC  00                 	db	0
  1683  007FAD  00                 	db	0
  1684  007FAE  00                 	db	0
  1685  007FAF  00                 	db	0
  1686  007FB0  00                 	db	0
  1687  007FB1  00                 	db	0
  1688  007FB2  00                 	db	0
  1689  007FB3  00                 	db	0
  1690  007FB4  00                 	db	0
  1691  007FB5                     __end_of_image:
  1692                           	opt stack 0
  1693  0000                     _ADCON0	set	4034
  1694  0000                     _ADCON0bits	set	4034
  1695  0000                     _ADCON1bits	set	4033
  1696  0000                     _ADCON2bits	set	4032
  1697  0000                     _ADRESL	set	4035
  1698  0000                     _LATCbits	set	3979
  1699  0000                     _LATEbits	set	3981
  1700  0000                     _PORTBbits	set	3969
  1701  0000                     _PORTC	set	3970
  1702  0000                     _PORTD	set	3971
  1703  0000                     _PORTE	set	3972
  1704  0000                     _TRISA	set	3986
  1705  0000                     _TRISB	set	3987
  1706  0000                     _TRISC	set	3988
  1707  0000                     _TRISD	set	3989
  1708  0000                     _TRISE	set	3990
  1709  0000                     _ADRESH	set	4036
  1710  007FB5                     STR_5:
  1711  007FB5  25                 	db	37
  1712  007FB6  2E                 	db	46
  1713  007FB7  32                 	db	50	;'2'
  1714  007FB8  66                 	db	102	;'f'
  1715  007FB9  20                 	db	32
  1716  007FBA  6D                 	db	109	;'m'
  1717  007FBB  53                 	db	83	;'S'
  1718  007FBC  2F                 	db	47
  1719  007FBD  70                 	db	112	;'p'
  1720  007FBE  00                 	db	0
  1721  007FBF                     STR_6:
  1722  007FBF  25                 	db	37
  1723  007FC0  2E                 	db	46
  1724  007FC1  32                 	db	50	;'2'
  1725  007FC2  66                 	db	102	;'f'
  1726  007FC3  20                 	db	32
  1727  007FC4  75                 	db	117	;'u'
  1728  007FC5  53                 	db	83	;'S'
  1729  007FC6  2F                 	db	47
  1730  007FC7  70                 	db	112	;'p'
  1731  007FC8  00                 	db	0
  1732  007FC9                     STR_8:
  1733  007FC9  25                 	db	37
  1734  007FCA  2E                 	db	46
  1735  007FCB  32                 	db	50	;'2'
  1736  007FCC  66                 	db	102	;'f'
  1737  007FCD  6D                 	db	109	;'m'
  1738  007FCE  56                 	db	86	;'V'
  1739  007FCF  2F                 	db	47
  1740  007FD0  70                 	db	112	;'p'
  1741  007FD1  00                 	db	0
  1742  007FD2                     STR_9:
  1743  007FD2  20                 	db	32
  1744  007FD3  25                 	db	37
  1745  007FD4  2E                 	db	46
  1746  007FD5  33                 	db	51	;'3'
  1747  007FD6  66                 	db	102	;'f'
  1748  007FD7  56                 	db	86	;'V'
  1749  007FD8  70                 	db	112	;'p'
  1750  007FD9  70                 	db	112	;'p'
  1751  007FDA  00                 	db	0
  1752  007FDB                     STR_7:
  1753  007FDB  25                 	db	37
  1754  007FDC  2E                 	db	46
  1755  007FDD  32                 	db	50	;'2'
  1756  007FDE  66                 	db	102	;'f'
  1757  007FDF  56                 	db	86	;'V'
  1758  007FE0  2F                 	db	47
  1759  007FE1  70                 	db	112	;'p'
  1760  007FE2  00                 	db	0
  1761  007FE3                     STR_3:
  1762  007FE3  25                 	db	37
  1763  007FE4  2E                 	db	46
  1764  007FE5  32                 	db	50	;'2'
  1765  007FE6  66                 	db	102	;'f'
  1766  007FE7  6D                 	db	109	;'m'
  1767  007FE8  53                 	db	83	;'S'
  1768  007FE9  00                 	db	0
  1769  007FEA                     STR_4:
  1770  007FEA  25                 	db	37
  1771  007FEB  2E                 	db	46
  1772  007FEC  32                 	db	50	;'2'
  1773  007FED  66                 	db	102	;'f'
  1774  007FEE  75                 	db	117	;'u'
  1775  007FEF  53                 	db	83	;'S'
  1776  007FF0  00                 	db	0
  1777  007FF1                     STR_2:
  1778  007FF1  25                 	db	37
  1779  007FF2  2E                 	db	46
  1780  007FF3  32                 	db	50	;'2'
  1781  007FF4  66                 	db	102	;'f'
  1782  007FF5  6D                 	db	109	;'m'
  1783  007FF6  56                 	db	86	;'V'
  1784  007FF7  00                 	db	0
  1785  007FF8                     STR_1:
  1786  007FF8  25                 	db	37
  1787  007FF9  2E                 	db	46
  1788  007FFA  32                 	db	50	;'2'
  1789  007FFB  66                 	db	102	;'f'
  1790  007FFC  56                 	db	86	;'V'
  1791  007FFD  00                 	db	0
  1792                           
  1793                           ; #config settings
  1794  007FFE  00                 	db	0	; dummy byte at the end
  1795  0000                     
  1796                           	psect	cinit
  1797  0039A8                     __pcinit:
  1798                           	opt stack 0
  1799  0039A8                     start_initialization:
  1800                           	opt stack 0
  1801  0039A8                     __initialization:
  1802                           	opt stack 0
  1803                           
  1804                           ; Clear objects allocated to BIGRAM (1025 bytes)
  1805  0039A8  EE03  F0FF         	lfsr	0,__pbssBIGRAM
  1806  0039AC  EE14 F001          	lfsr	1,1025
  1807  0039B0                     clear_0:
  1808  0039B0  6AEE               	clrf	postinc0,c
  1809  0039B2  50E5               	movf	postdec1,w,c
  1810  0039B4  50E1               	movf	fsr1l,w,c
  1811  0039B6  E1FC               	bnz	clear_0
  1812  0039B8  50E2               	movf	fsr1h,w,c
  1813  0039BA  E1FA               	bnz	clear_0
  1814                           
  1815                           ; Clear objects allocated to BANK2 (2 bytes)
  1816  0039BC  0102               	movlb	2
  1817  0039BE  6B2A               	clrf	(__pbssBANK2+1)& (0+255),b
  1818  0039C0  6B29               	clrf	__pbssBANK2& (0+255),b
  1819                           
  1820                           ; Clear objects allocated to COMRAM (4 bytes)
  1821  0039C2  6A5F               	clrf	(__pbssCOMRAM+3)& (0+255),c
  1822  0039C4  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
  1823  0039C6  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
  1824  0039C8  6A5C               	clrf	__pbssCOMRAM& (0+255),c
  1825  0039CA                     end_of_initialization:
  1826                           	opt stack 0
  1827  0039CA                     __end_of__initialization:
  1828                           	opt stack 0
  1829  0039CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1830  0039CC  6EF8               	movwf	tblptru,c
  1831  0039CE  0100               	movlb	0
  1832  0039D0  EFF7  F031         	goto	_main	;jump to C main() function
  1833                           tblptru	equ	0xFF8
  1834                           postinc0	equ	0xFEE
  1835                           postdec1	equ	0xFE5
  1836                           fsr1h	equ	0xFE2
  1837                           fsr1l	equ	0xFE1
  1838                           
  1839                           	psect	bssCOMRAM
  1840  00005C                     __pbssCOMRAM:
  1841                           	opt stack 0
  1842  00005C                     _curr_column:
  1843                           	opt stack 0
  1844  00005C                     	ds	2
  1845  00005E                     _curr_page:
  1846                           	opt stack 0
  1847  00005E                     	ds	2
  1848                           tblptru	equ	0xFF8
  1849                           postinc0	equ	0xFEE
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           
  1854                           	psect	bssBANK2
  1855  000229                     __pbssBANK2:
  1856                           	opt stack 0
  1857  000229                     _selected_side:
  1858                           	opt stack 0
  1859  000229                     	ds	2
  1860                           tblptru	equ	0xFF8
  1861                           postinc0	equ	0xFEE
  1862                           postdec1	equ	0xFE5
  1863                           fsr1h	equ	0xFE2
  1864                           fsr1l	equ	0xFE1
  1865                           
  1866                           	psect	bssBIGRAM
  1867  0003FF                     __pbssBIGRAM:
  1868                           	opt stack 0
  1869  0003FF                     _pixels:
  1870                           	opt stack 0
  1871  0003FF                     	ds	1025
  1872                           tblptru	equ	0xFF8
  1873                           postinc0	equ	0xFEE
  1874                           postdec1	equ	0xFE5
  1875                           fsr1h	equ	0xFE2
  1876                           fsr1l	equ	0xFE1
  1877                           
  1878                           	psect	cstackBANK2
  1879  000200                     __pcstackBANK2:
  1880                           	opt stack 0
  1881  000200                     main@i_342:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x0
  1885  000200                     	ds	2
  1886  000202                     main@i_349:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x2
  1890  000202                     	ds	2
  1891  000204                     main@y_div:
  1892                           	opt stack 0
  1893                           
  1894                           ; 3 bytes @ 0x4
  1895  000204                     	ds	3
  1896  000207                     main@s_time:
  1897                           	opt stack 0
  1898                           
  1899                           ; 3 bytes @ 0x7
  1900  000207                     	ds	3
  1901  00020A                     main@i_321:
  1902                           	opt stack 0
  1903                           
  1904                           ; 2 bytes @ 0xA
  1905  00020A                     	ds	2
  1906  00020C                     main@a:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0xC
  1910  00020C                     	ds	2
  1911  00020E                     main@i_338:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0xE
  1915  00020E                     	ds	2
  1916  000210                     main@i_341:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x10
  1920  000210                     	ds	2
  1921  000212                     main@i_332:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x12
  1925  000212                     	ds	2
  1926  000214                     main@i_354:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x14
  1930  000214                     	ds	2
  1931  000216                     main@amplitude:
  1932                           	opt stack 0
  1933                           
  1934                           ; 3 bytes @ 0x16
  1935  000216                     	ds	3
  1936  000219                     main@i_315:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x19
  1940  000219                     	ds	2
  1941  00021B                     main@cur1_y:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x1B
  1945  00021B                     	ds	2
  1946  00021D                     main@cur2_y:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0x1D
  1950  00021D                     	ds	2
  1951  00021F                     main@cur1_x:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x1F
  1955  00021F                     	ds	2
  1956  000221                     main@cur2_x:
  1957                           	opt stack 0
  1958                           
  1959                           ; 2 bytes @ 0x21
  1960  000221                     	ds	2
  1961  000223                     _main$1195:
  1962                           	opt stack 0
  1963                           
  1964                           ; 3 bytes @ 0x23
  1965  000223                     	ds	3
  1966  000226                     _main$1196:
  1967                           	opt stack 0
  1968                           
  1969                           ; 3 bytes @ 0x26
  1970  000226                     	ds	3
  1971                           tblptru	equ	0xFF8
  1972                           postinc0	equ	0xFEE
  1973                           postdec1	equ	0xFE5
  1974                           fsr1h	equ	0xFE2
  1975                           fsr1l	equ	0xFE1
  1976                           
  1977                           	psect	cstackBANK1
  1978  000100                     __pcstackBANK1:
  1979                           	opt stack 0
  1980  000100                     main@data:
  1981                           	opt stack 0
  1982                           
  1983                           ; 256 bytes @ 0x0
  1984  000100                     	ds	256
  1985                           tblptru	equ	0xFF8
  1986                           postinc0	equ	0xFEE
  1987                           postdec1	equ	0xFE5
  1988                           fsr1h	equ	0xFE2
  1989                           fsr1l	equ	0xFE1
  1990                           
  1991                           	psect	cstackBANK0
  1992  000060                     __pcstackBANK0:
  1993                           	opt stack 0
  1994  000060                     _sprintf$1201:
  1995                           	opt stack 0
  1996                           
  1997                           ; 3 bytes @ 0x0
  1998  000060                     	ds	3
  1999  000063                     sprintf@ap:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0x3
  2003  000063                     	ds	2
  2004  000065                     sprintf@flag:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x5
  2008  000065                     	ds	2
  2009  000067                     sprintf@val:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x7
  2013  000067                     	ds	4
  2014  00006B                     sprintf@exp:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0xB
  2018  00006B                     	ds	2
  2019  00006D                     sprintf@tmpval:
  2020                           	opt stack 0
  2021                           
  2022                           ; 4 bytes @ 0xD
  2023  00006D                     	ds	4
  2024  000071                     sprintf@prec:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x11
  2028  000071                     	ds	2
  2029  000073                     sprintf@fval:
  2030                           	opt stack 0
  2031                           
  2032                           ; 3 bytes @ 0x13
  2033  000073                     	ds	3
  2034  000076                     sprintf@c:
  2035                           	opt stack 0
  2036                           
  2037                           ; 1 bytes @ 0x16
  2038  000076                     	ds	1
  2039  000077                     main@bottom_buf:
  2040                           	opt stack 0
  2041                           
  2042                           ; 40 bytes @ 0x17
  2043  000077                     	ds	40
  2044  00009F                     main@buf_360:
  2045                           	opt stack 0
  2046                           
  2047                           ; 13 bytes @ 0x3F
  2048  00009F                     	ds	13
  2049  0000AC                     main@buf:
  2050                           	opt stack 0
  2051                           
  2052                           ; 10 bytes @ 0x4C
  2053  0000AC                     	ds	10
  2054  0000B6                     main@buf_344:
  2055                           	opt stack 0
  2056                           
  2057                           ; 10 bytes @ 0x56
  2058  0000B6                     	ds	10
  2059  0000C0                     main@y1:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x60
  2063  0000C0                     	ds	2
  2064  0000C2                     main@y2:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x62
  2068  0000C2                     	ds	2
  2069  0000C4                     main@y:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x64
  2073  0000C4                     	ds	2
  2074  0000C6                     main@y_325:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x66
  2078  0000C6                     	ds	2
  2079  0000C8                     main@y_337:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x68
  2083  0000C8                     	ds	2
  2084  0000CA                     main@y_340:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x6A
  2088  0000CA                     	ds	2
  2089  0000CC                     main@j:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x6C
  2093  0000CC                     	ds	2
  2094  0000CE                     main@freeze:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x6E
  2098  0000CE                     	ds	2
  2099  0000D0                     main@min_y:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x70
  2103  0000D0                     	ds	1
  2104  0000D1                     main@max_y:
  2105                           	opt stack 0
  2106                           
  2107                           ; 1 bytes @ 0x71
  2108  0000D1                     	ds	1
  2109  0000D2                     main@y_333:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x72
  2113  0000D2                     	ds	2
  2114  0000D4                     main@s_time_pot_348:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x74
  2118  0000D4                     	ds	2
  2119  0000D6                     main@Vpp:
  2120                           	opt stack 0
  2121                           
  2122                           ; 3 bytes @ 0x76
  2123  0000D6                     	ds	3
  2124  0000D9                     _main$1197:
  2125                           	opt stack 0
  2126                           
  2127                           ; 3 bytes @ 0x79
  2128  0000D9                     	ds	3
  2129  0000DC                     main@i:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x7C
  2133  0000DC                     	ds	2
  2134  0000DE                     main@s_val:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x7E
  2138  0000DE                     	ds	2
  2139  0000E0                     main@s_val_336:
  2140                           	opt stack 0
  2141                           
  2142                           ; 2 bytes @ 0x80
  2143  0000E0                     	ds	2
  2144  0000E2                     main@i_347:
  2145                           	opt stack 0
  2146                           
  2147                           ; 2 bytes @ 0x82
  2148  0000E2                     	ds	2
  2149  0000E4                     main@min:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x84
  2153  0000E4                     	ds	2
  2154  0000E6                     main@max:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x86
  2158  0000E6                     	ds	2
  2159  0000E8                     main@i_364:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x88
  2163  0000E8                     	ds	2
  2164  0000EA                     main@delta:
  2165                           	opt stack 0
  2166                           
  2167                           ; 3 bytes @ 0x8A
  2168  0000EA                     	ds	3
  2169  0000ED                     main@delta_343:
  2170                           	opt stack 0
  2171                           
  2172                           ; 3 bytes @ 0x8D
  2173  0000ED                     	ds	3
  2174  0000F0                     main@y_359:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x90
  2178  0000F0                     	ds	2
  2179  0000F2                     main@cur1_y_new:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x92
  2183  0000F2                     	ds	2
  2184  0000F4                     main@cur2_y_new:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x94
  2188  0000F4                     	ds	2
  2189  0000F6                     main@i_323:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x96
  2193  0000F6                     	ds	2
  2194  0000F8                     main@i_326:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x98
  2198  0000F8                     	ds	2
  2199  0000FA                     main@cur1_x_new:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x9A
  2203  0000FA                     	ds	2
  2204  0000FC                     main@cur2_x_new:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x9C
  2208  0000FC                     	ds	2
  2209  0000FE                     main@i_339:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x9E
  2213  0000FE                     	ds	2
  2214                           tblptru	equ	0xFF8
  2215                           postinc0	equ	0xFEE
  2216                           postdec1	equ	0xFE5
  2217                           fsr1h	equ	0xFE2
  2218                           fsr1l	equ	0xFE1
  2219                           
  2220                           	psect	cstackCOMRAM
  2221  000001                     __pcstackCOMRAM:
  2222                           	opt stack 0
  2223  000001                     ??_isdigit:
  2224  000001                     ?_strlen:
  2225                           	opt stack 0
  2226  000001                     ?_abs:
  2227                           	opt stack 0
  2228  000001                     ?___awmod:
  2229                           	opt stack 0
  2230  000001                     ?___ftpack:
  2231                           	opt stack 0
  2232  000001                     ?___ftneg:
  2233                           	opt stack 0
  2234  000001                     ?__tdiv_to_l_:
  2235                           	opt stack 0
  2236  000001                     ?__div_to_l_:
  2237                           	opt stack 0
  2238  000001                     ?___lldiv:
  2239                           	opt stack 0
  2240  000001                     ?___llmod:
  2241                           	opt stack 0
  2242  000001                     __lcd_status@status:
  2243                           	opt stack 0
  2244  000001                     LCDcmd@data:
  2245                           	opt stack 0
  2246  000001                     abs@a:
  2247                           	opt stack 0
  2248  000001                     ___awmod@dividend:
  2249                           	opt stack 0
  2250  000001                     strcat@to:
  2251                           	opt stack 0
  2252  000001                     strlen@s:
  2253                           	opt stack 0
  2254  000001                     __div_to_l_@f1:
  2255                           	opt stack 0
  2256  000001                     ___ftpack@arg:
  2257                           	opt stack 0
  2258  000001                     __tdiv_to_l_@f1:
  2259                           	opt stack 0
  2260  000001                     ___ftge@ff1:
  2261                           	opt stack 0
  2262  000001                     ___ftneg@f1:
  2263                           	opt stack 0
  2264  000001                     ___lldiv@dividend:
  2265                           	opt stack 0
  2266  000001                     ___llmod@dividend:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x0
  2270  000001                     	ds	1
  2271  000002                     ??_emptycolumn:
  2272  000002                     __lcd_status@cs1:
  2273                           	opt stack 0
  2274  000002                     _isdigit$851:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x1
  2278  000002                     	ds	1
  2279  000003                     ??_strlen:
  2280  000003                     ??_abs:
  2281  000003                     __lcd_status@cs2:
  2282                           	opt stack 0
  2283  000003                     isdigit@c:
  2284                           	opt stack 0
  2285  000003                     ___awmod@divisor:
  2286                           	opt stack 0
  2287  000003                     strcat@from:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x2
  2291  000003                     	ds	1
  2292  000004                     ??_LCDreset:
  2293  000004                     ??__lcd_waitbusy:
  2294  000004                     ___ftpack@exp:
  2295                           	opt stack 0
  2296  000004                     emptycolumn@char_index:
  2297                           	opt stack 0
  2298  000004                     __div_to_l_@f2:
  2299                           	opt stack 0
  2300  000004                     __tdiv_to_l_@f2:
  2301                           	opt stack 0
  2302  000004                     ___ftge@ff2:
  2303                           	opt stack 0
  2304                           
  2305                           ; 3 bytes @ 0x3
  2306  000004                     	ds	1
  2307  000005                     LCDon@on:
  2308                           	opt stack 0
  2309  000005                     LCDy@value:
  2310                           	opt stack 0
  2311  000005                     ___awmod@counter:
  2312                           	opt stack 0
  2313  000005                     ___ftpack@sign:
  2314                           	opt stack 0
  2315  000005                     strcat@cp:
  2316                           	opt stack 0
  2317  000005                     strlen@cp:
  2318                           	opt stack 0
  2319  000005                     ___lldiv@divisor:
  2320                           	opt stack 0
  2321  000005                     ___llmod@divisor:
  2322                           	opt stack 0
  2323                           
  2324                           ; 4 bytes @ 0x4
  2325  000005                     	ds	1
  2326  000006                     ??___ftpack:
  2327  000006                     LCDy@side:
  2328                           	opt stack 0
  2329  000006                     ___awmod@sign:
  2330                           	opt stack 0
  2331                           
  2332                           ; 1 bytes @ 0x5
  2333  000006                     	ds	1
  2334  000007                     ??__tdiv_to_l_:
  2335  000007                     ??___ftge:
  2336  000007                     ?___awdiv:
  2337                           	opt stack 0
  2338  000007                     ___awdiv@dividend:
  2339                           	opt stack 0
  2340  000007                     __div_to_l_@quot:
  2341                           	opt stack 0
  2342                           
  2343                           ; 4 bytes @ 0x6
  2344  000007                     	ds	2
  2345  000009                     ?___lltoft:
  2346                           	opt stack 0
  2347  000009                     ?___lwtoft:
  2348                           	opt stack 0
  2349  000009                     ___llmod@counter:
  2350                           	opt stack 0
  2351  000009                     ___awdiv@divisor:
  2352                           	opt stack 0
  2353  000009                     ___lwtoft@c:
  2354                           	opt stack 0
  2355  000009                     ___lldiv@quotient:
  2356                           	opt stack 0
  2357  000009                     ___lltoft@c:
  2358                           	opt stack 0
  2359                           
  2360                           ; 4 bytes @ 0x8
  2361  000009                     	ds	1
  2362  00000A                     __tdiv_to_l_@quot:
  2363                           	opt stack 0
  2364                           
  2365                           ; 4 bytes @ 0x9
  2366  00000A                     	ds	1
  2367  00000B                     ___awdiv@counter:
  2368                           	opt stack 0
  2369  00000B                     __div_to_l_@cntr:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0xA
  2373  00000B                     	ds	1
  2374  00000C                     ___awdiv@sign:
  2375                           	opt stack 0
  2376  00000C                     __div_to_l_@exp1:
  2377                           	opt stack 0
  2378                           
  2379                           ; 1 bytes @ 0xB
  2380  00000C                     	ds	1
  2381  00000D                     ??___lltoft:
  2382  00000D                     ___lldiv@counter:
  2383                           	opt stack 0
  2384  00000D                     ___awdiv@quotient:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0xC
  2388  00000D                     	ds	1
  2389  00000E                     __tdiv_to_l_@cntr:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0xD
  2393  00000E                     	ds	1
  2394  00000F                     ?___wmul:
  2395                           	opt stack 0
  2396  00000F                     LCDpage@page:
  2397                           	opt stack 0
  2398  00000F                     __tdiv_to_l_@exp1:
  2399                           	opt stack 0
  2400  00000F                     ___wmul@multiplier:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0xE
  2404  00000F                     	ds	1
  2405  000010                     LCDpage@side:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0xF
  2409  000010                     	ds	1
  2410  000011                     lcdplotpixel2@ry:
  2411                           	opt stack 0
  2412  000011                     ___lltoft@exp:
  2413                           	opt stack 0
  2414  000011                     write_image@image:
  2415                           	opt stack 0
  2416  000011                     ___wmul@multiplicand:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x10
  2420  000011                     	ds	1
  2421  000012                     lcdplotpixel2@blank:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x11
  2425  000012                     	ds	1
  2426  000013                     write_image@top_to_bottom:
  2427                           	opt stack 0
  2428  000013                     ___wmul@product:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x12
  2432  000013                     	ds	1
  2433  000014                     ??_write_image:
  2434  000014                     ??_lcdplotpixel2:
  2435                           
  2436                           ; 1 bytes @ 0x13
  2437  000014                     	ds	1
  2438  000015                     ?___awtoft:
  2439                           	opt stack 0
  2440  000015                     LCDchar@position:
  2441                           	opt stack 0
  2442  000015                     ___awtoft@c:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x14
  2446  000015                     	ds	1
  2447  000016                     ??_LCDchar:
  2448  000016                     lcdplotpixel2@data:
  2449                           	opt stack 0
  2450                           
  2451                           ; 9 bytes @ 0x15
  2452  000016                     	ds	2
  2453  000018                     ___awtoft@sign:
  2454                           	opt stack 0
  2455                           
  2456                           ; 1 bytes @ 0x17
  2457  000018                     	ds	1
  2458  000019                     ?___ftdiv:
  2459                           	opt stack 0
  2460  000019                     ?___ftmul:
  2461                           	opt stack 0
  2462  000019                     ___ftdiv@f1:
  2463                           	opt stack 0
  2464  000019                     ___ftmul@f1:
  2465                           	opt stack 0
  2466                           
  2467                           ; 3 bytes @ 0x18
  2468  000019                     	ds	3
  2469  00001C                     ___ftdiv@f2:
  2470                           	opt stack 0
  2471  00001C                     ___ftmul@f2:
  2472                           	opt stack 0
  2473                           
  2474                           ; 3 bytes @ 0x1B
  2475  00001C                     	ds	1
  2476  00001D                     LCDchar@c:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x1C
  2480  00001D                     	ds	1
  2481  00001E                     write_image@n_val:
  2482                           	opt stack 0
  2483  00001E                     LCDchar@index:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x1D
  2487  00001E                     	ds	1
  2488  00001F                     ??___ftdiv:
  2489  00001F                     ??___ftmul:
  2490  00001F                     lcdplotpixel2@pixel:
  2491                           	opt stack 0
  2492  00001F                     write_image@n_val_569:
  2493                           	opt stack 0
  2494                           
  2495                           ; 1 bytes @ 0x1E
  2496  00001F                     	ds	1
  2497  000020                     LCDchar@i:
  2498                           	opt stack 0
  2499  000020                     lcdplotpixel2@value:
  2500                           	opt stack 0
  2501  000020                     write_image@j:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x1F
  2505  000020                     	ds	2
  2506  000022                     ___ftdiv@cntr:
  2507                           	opt stack 0
  2508  000022                     ___ftmul@exp:
  2509                           	opt stack 0
  2510  000022                     LCDchar@i_515:
  2511                           	opt stack 0
  2512  000022                     lcdplotpixel2@index:
  2513                           	opt stack 0
  2514  000022                     write_image@j_570:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x21
  2518  000022                     	ds	1
  2519  000023                     ___ftdiv@f3:
  2520                           	opt stack 0
  2521  000023                     ___ftmul@f3_as_product:
  2522                           	opt stack 0
  2523                           
  2524                           ; 3 bytes @ 0x22
  2525  000023                     	ds	1
  2526  000024                     lcdplotpixel2@rx:
  2527                           	opt stack 0
  2528  000024                     LCDchar@i_516:
  2529                           	opt stack 0
  2530  000024                     write_image@i:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x23
  2534  000024                     	ds	1
  2535  000025                     xyaxis@i:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x24
  2539  000025                     	ds	1
  2540  000026                     ___ftdiv@exp:
  2541                           	opt stack 0
  2542  000026                     ___ftmul@cntr:
  2543                           	opt stack 0
  2544  000026                     LCDchar@i_517:
  2545                           	opt stack 0
  2546  000026                     write_image@i_567:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x25
  2550  000026                     	ds	1
  2551  000027                     ___ftdiv@sign:
  2552                           	opt stack 0
  2553  000027                     ___ftmul@sign:
  2554                           	opt stack 0
  2555  000027                     xyaxis@i_553:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x26
  2559  000027                     	ds	1
  2560  000028                     ?_fround:
  2561                           	opt stack 0
  2562  000028                     ?_scale:
  2563                           	opt stack 0
  2564  000028                     LCDchar@i_518:
  2565                           	opt stack 0
  2566  000028                     write_image@page:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x27
  2570  000028                     	ds	2
  2571  00002A                     LCDchar@tmp:
  2572                           	opt stack 0
  2573  00002A                     write_image@val:
  2574                           	opt stack 0
  2575                           
  2576                           ; 1 bytes @ 0x29
  2577  00002A                     	ds	1
  2578  00002B                     write_image@val_568:
  2579                           	opt stack 0
  2580  00002B                     LCDchar@char_index:
  2581                           	opt stack 0
  2582  00002B                     _fround$1199:
  2583                           	opt stack 0
  2584  00002B                     _scale$1200:
  2585                           	opt stack 0
  2586                           
  2587                           ; 3 bytes @ 0x2A
  2588  00002B                     	ds	2
  2589  00002D                     LCDclear@i:
  2590                           	opt stack 0
  2591  00002D                     LCDstring@buffer:
  2592                           	opt stack 0
  2593                           
  2594                           ; 2 bytes @ 0x2C
  2595  00002D                     	ds	1
  2596  00002E                     scale@scl:
  2597                           	opt stack 0
  2598  00002E                     _fround$1198:
  2599                           	opt stack 0
  2600                           
  2601                           ; 3 bytes @ 0x2D
  2602  00002E                     	ds	1
  2603  00002F                     ??_LCDstring:
  2604  00002F                     LCDclear@i_521:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x2E
  2608  00002F                     	ds	2
  2609  000031                     fround@prec:
  2610                           	opt stack 0
  2611  000031                     LCDclear@j:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x30
  2615  000031                     	ds	1
  2616  000032                     ?___ftadd:
  2617                           	opt stack 0
  2618  000032                     ___ftadd@f1:
  2619                           	opt stack 0
  2620                           
  2621                           ; 3 bytes @ 0x31
  2622  000032                     	ds	1
  2623  000033                     ??_LCDinit:
  2624                           
  2625                           ; 1 bytes @ 0x32
  2626  000033                     	ds	1
  2627  000034                     LCDinit@i:
  2628                           	opt stack 0
  2629  000034                     LCDstring@i:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x33
  2633  000034                     	ds	1
  2634  000035                     ___ftadd@f2:
  2635                           	opt stack 0
  2636                           
  2637                           ; 3 bytes @ 0x34
  2638  000035                     	ds	1
  2639  000036                     LCDstring@i_532:
  2640                           	opt stack 0
  2641                           
  2642                           ; 2 bytes @ 0x35
  2643  000036                     	ds	2
  2644  000038                     ??___ftadd:
  2645  000038                     LCDstring@i_534:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x37
  2649  000038                     	ds	2
  2650  00003A                     LCDstring@i_535:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x39
  2654  00003A                     	ds	1
  2655  00003B                     ___ftadd@sign:
  2656                           	opt stack 0
  2657                           
  2658                           ; 1 bytes @ 0x3A
  2659  00003B                     	ds	1
  2660  00003C                     ___ftadd@exp2:
  2661                           	opt stack 0
  2662  00003C                     LCDstring@i_536:
  2663                           	opt stack 0
  2664                           
  2665                           ; 2 bytes @ 0x3B
  2666  00003C                     	ds	1
  2667  00003D                     ___ftadd@exp1:
  2668                           	opt stack 0
  2669                           
  2670                           ; 1 bytes @ 0x3C
  2671  00003D                     	ds	1
  2672  00003E                     ?___ftsub:
  2673                           	opt stack 0
  2674  00003E                     ?___fttol:
  2675                           	opt stack 0
  2676  00003E                     LCDstring@i_537:
  2677                           	opt stack 0
  2678  00003E                     ___ftsub@f1:
  2679                           	opt stack 0
  2680  00003E                     ___fttol@f1:
  2681                           	opt stack 0
  2682                           
  2683                           ; 3 bytes @ 0x3D
  2684  00003E                     	ds	2
  2685  000040                     LCDstring@i_538:
  2686                           	opt stack 0
  2687                           
  2688                           ; 2 bytes @ 0x3F
  2689  000040                     	ds	1
  2690  000041                     ___ftsub@f2:
  2691                           	opt stack 0
  2692                           
  2693                           ; 3 bytes @ 0x40
  2694  000041                     	ds	1
  2695  000042                     ??___fttol:
  2696  000042                     LCDstring@i_540:
  2697                           	opt stack 0
  2698                           
  2699                           ; 2 bytes @ 0x41
  2700  000042                     	ds	2
  2701  000044                     LCDstring@i_541:
  2702                           	opt stack 0
  2703                           
  2704                           ; 2 bytes @ 0x43
  2705  000044                     	ds	2
  2706  000046                     LCDstring@i_531:
  2707                           	opt stack 0
  2708                           
  2709                           ; 2 bytes @ 0x45
  2710  000046                     	ds	1
  2711  000047                     ___fttol@sign1:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x46
  2715  000047                     	ds	1
  2716  000048                     LCDstring@i_539:
  2717                           	opt stack 0
  2718  000048                     ___fttol@lval:
  2719                           	opt stack 0
  2720                           
  2721                           ; 4 bytes @ 0x47
  2722  000048                     	ds	2
  2723  00004A                     LCDstring@p:
  2724                           	opt stack 0
  2725                           
  2726                           ; 1 bytes @ 0x49
  2727  00004A                     	ds	1
  2728  00004B                     LCDstring@l1:
  2729                           	opt stack 0
  2730                           
  2731                           ; 2 bytes @ 0x4A
  2732  00004B                     	ds	1
  2733  00004C                     ___fttol@exp1:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x4B
  2737  00004C                     	ds	1
  2738  00004D                     ?_sprintf:
  2739                           	opt stack 0
  2740  00004D                     LCDstring@length:
  2741                           	opt stack 0
  2742  00004D                     sprintf@sp:
  2743                           	opt stack 0
  2744                           
  2745                           ; 2 bytes @ 0x4C
  2746  00004D                     	ds	2
  2747  00004F                     sprintf@f:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x4E
  2751  00004F                     	ds	5
  2752  000054                     ??_sprintf:
  2753                           
  2754                           ; 1 bytes @ 0x53
  2755  000054                     	ds	6
  2756  00005A                     ??_main:
  2757                           
  2758                           ; 1 bytes @ 0x59
  2759  00005A                     	ds	2
  2760                           tblptru	equ	0xFF8
  2761                           postinc0	equ	0xFEE
  2762                           postdec1	equ	0xFE5
  2763                           fsr1h	equ	0xFE2
  2764                           fsr1l	equ	0xFE1
  2765                           
  2766 ;;
  2767 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2768 ;;
  2769 ;; *************** function _main *****************
  2770 ;; Defined at:
  2771 ;;		line 118 in file "src/main.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  y               2  114[BANK0 ] int 
  2776 ;;  y               2  102[BANK0 ] int 
  2777 ;;  y               2  100[BANK0 ] int 
  2778 ;;  i               2    0[BANK2 ] int 
  2779 ;;  i               2   16[BANK2 ] int 
  2780 ;;  i               2  158[BANK0 ] int 
  2781 ;;  i               2   14[BANK2 ] int 
  2782 ;;  i               2   18[BANK2 ] int 
  2783 ;;  i               2  152[BANK0 ] int 
  2784 ;;  a               2   12[BANK2 ] int 
  2785 ;;  i               2  150[BANK0 ] int 
  2786 ;;  i               2   10[BANK2 ] int 
  2787 ;;  i               2   25[BANK2 ] int 
  2788 ;;  y               2  106[BANK0 ] int 
  2789 ;;  y               2  104[BANK0 ] int 
  2790 ;;  y2              2   98[BANK0 ] int 
  2791 ;;  y1              2   96[BANK0 ] int 
  2792 ;;  j               2  108[BANK0 ] int 
  2793 ;;  i               2  130[BANK0 ] int 
  2794 ;;  buf            10   86[BANK0 ] unsigned char [10]
  2795 ;;  delta           3  141[BANK0 ] float 
  2796 ;;  cur2_x_new      2  156[BANK0 ] int 
  2797 ;;  cur1_x_new      2  154[BANK0 ] int 
  2798 ;;  s_val           2  128[BANK0 ] int 
  2799 ;;  buf            10   76[BANK0 ] unsigned char [10]
  2800 ;;  delta           3  138[BANK0 ] float 
  2801 ;;  cur2_y_new      2  148[BANK0 ] int 
  2802 ;;  cur1_y_new      2  146[BANK0 ] int 
  2803 ;;  s_val           2  126[BANK0 ] int 
  2804 ;;  i               2  136[BANK0 ] int 
  2805 ;;  y               2  144[BANK0 ] int 
  2806 ;;  i               2    2[BANK2 ] int 
  2807 ;;  cur2_x          2   33[BANK2 ] int 
  2808 ;;  cur1_x          2   31[BANK2 ] int 
  2809 ;;  cur2_y          2   29[BANK2 ] int 
  2810 ;;  cur1_y          2   27[BANK2 ] int 
  2811 ;;  bottom_buf     40   23[BANK0 ] unsigned char [40]
  2812 ;;  buf            13   63[BANK0 ] unsigned char [13]
  2813 ;;  i               2   20[BANK2 ] int 
  2814 ;;  max             2  134[BANK0 ] unsigned int 
  2815 ;;  min             2  132[BANK0 ] unsigned int 
  2816 ;;  s_time_pot      2  116[BANK0 ] int 
  2817 ;;  max_y           1  113[BANK0 ] unsigned char 
  2818 ;;  min_y           1  112[BANK0 ] unsigned char 
  2819 ;;  i               2  124[BANK0 ] int 
  2820 ;;  data          256    0[BANK1 ] unsigned int [128]
  2821 ;;  amplitude       3   22[BANK2 ] float 
  2822 ;;  s_time          3    7[BANK2 ] float 
  2823 ;;  y_div           3    4[BANK2 ] float 
  2824 ;;  Vpp             3  118[BANK0 ] float 
  2825 ;;  s_time_pot      3    0        float 
  2826 ;;  freeze          2  110[BANK0 ] int 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0
  2837 ;;      Locals:         0     137     256      41       0       0       0       0       0
  2838 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2839 ;;      Totals:         2     137     256      41       0       0       0       0       0
  2840 ;;Total ram usage:      436 bytes
  2841 ;; Hardware stack levels required when called:    7
  2842 ;; This function calls:
  2843 ;;		_LCDclear
  2844 ;;		_LCDinit
  2845 ;;		_LCDpage
  2846 ;;		_LCDstring
  2847 ;;		___awdiv
  2848 ;;		___awtoft
  2849 ;;		___ftadd
  2850 ;;		___ftdiv
  2851 ;;		___ftge
  2852 ;;		___ftmul
  2853 ;;		___fttol
  2854 ;;		___lwtoft
  2855 ;;		___wmul
  2856 ;;		_abs
  2857 ;;		_lcdplotpixel2
  2858 ;;		_sprintf
  2859 ;;		_strcat
  2860 ;;		_write_image
  2861 ;;		_xyaxis
  2862 ;; This function is called by:
  2863 ;;		Startup code after reset
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text0
  2868  0063EE                     __ptext0:
  2869                           	opt stack 0
  2870  0063EE                     _main:
  2871                           	opt stack 24
  2872                           
  2873                           ;main.c: 121: TRISA = 0xff;
  2874                           
  2875                           ;incstack = 0
  2876  0063EE  6892               	setf	3986,c	;volatile
  2877                           
  2878                           ;main.c: 123: TRISB = 0xff;
  2879  0063F0  6893               	setf	3987,c	;volatile
  2880                           
  2881                           ;main.c: 125: TRISC = 0x00;
  2882  0063F2  0E00               	movlw	0
  2883  0063F4  6E94               	movwf	3988,c	;volatile
  2884                           
  2885                           ;main.c: 126: TRISD = 0x00;
  2886  0063F6  0E00               	movlw	0
  2887  0063F8  6E95               	movwf	3989,c	;volatile
  2888                           
  2889                           ;main.c: 127: TRISE = 0x00;
  2890  0063FA  0E00               	movlw	0
  2891  0063FC  6E96               	movwf	3990,c	;volatile
  2892                           
  2893                           ;main.c: 130: PORTC = 0x00;
  2894  0063FE  0E00               	movlw	0
  2895  006400  6E82               	movwf	3970,c	;volatile
  2896                           
  2897                           ;main.c: 131: PORTD = 0x00;
  2898  006402  0E00               	movlw	0
  2899  006404  6E83               	movwf	3971,c	;volatile
  2900                           
  2901                           ;main.c: 132: PORTE = 0x00;
  2902  006406  0E00               	movlw	0
  2903  006408  6E84               	movwf	3972,c	;volatile
  2904                           
  2905                           ;main.c: 141: ADCON1bits.VCFG1=0;
  2906  00640A  9AC1               	bcf	4033,5,c	;volatile
  2907                           
  2908                           ;main.c: 143: ADCON1bits.VCFG0=0;
  2909  00640C  98C1               	bcf	4033,4,c	;volatile
  2910                           
  2911                           ;main.c: 145: ADCON1bits.PCFG0=1;
  2912  00640E  80C1               	bsf	4033,0,c	;volatile
  2913                           
  2914                           ;main.c: 146: ADCON1bits.PCFG1=0;
  2915  006410  92C1               	bcf	4033,1,c	;volatile
  2916                           
  2917                           ;main.c: 147: ADCON1bits.PCFG2=1;
  2918  006412  84C1               	bsf	4033,2,c	;volatile
  2919                           
  2920                           ;main.c: 148: ADCON1bits.PCFG3=0;
  2921  006414  96C1               	bcf	4033,3,c	;volatile
  2922                           
  2923                           ;main.c: 150: ADCON2bits.ADFM=1;
  2924  006416  8EC0               	bsf	4032,7,c	;volatile
  2925                           
  2926                           ;main.c: 152: ADCON2bits.ACQT2=0;
  2927  006418  9AC0               	bcf	4032,5,c	;volatile
  2928                           
  2929                           ;main.c: 153: ADCON2bits.ACQT1=0;
  2930  00641A  98C0               	bcf	4032,4,c	;volatile
  2931                           
  2932                           ;main.c: 154: ADCON2bits.ACQT0=1;
  2933  00641C  86C0               	bsf	4032,3,c	;volatile
  2934                           
  2935                           ;main.c: 156: ADCON2bits.ADCS2=1;
  2936  00641E  84C0               	bsf	4032,2,c	;volatile
  2937                           
  2938                           ;main.c: 157: ADCON2bits.ADCS1=0;
  2939  006420  92C0               	bcf	4032,1,c	;volatile
  2940                           
  2941                           ;main.c: 158: ADCON2bits.ADCS0=1;
  2942  006422  80C0               	bsf	4032,0,c	;volatile
  2943                           
  2944                           ;main.c: 160: ADCON0=0x01;
  2945  006424  0E01               	movlw	1
  2946  006426  6EC2               	movwf	4034,c	;volatile
  2947                           
  2948                           ;main.c: 163: unsigned int data[128];
  2949                           ;main.c: 165: float Vpp = 0;
  2950  006428  0E00               	movlw	0
  2951  00642A  0100               	movlb	0	; () banked
  2952  00642C  6FD6               	movwf	main@Vpp& (0+255),b
  2953  00642E  0E00               	movlw	0
  2954  006430  0100               	movlb	0	; () banked
  2955  006432  6FD7               	movwf	(main@Vpp+1)& (0+255),b
  2956  006434  0E00               	movlw	0
  2957  006436  0100               	movlb	0	; () banked
  2958  006438  6FD8               	movwf	(main@Vpp+2)& (0+255),b
  2959                           
  2960                           ;main.c: 167: float amplitude, s_time_pot;
  2961                           ;main.c: 168: float y_div,s_time;
  2962                           ;main.c: 170: int freeze = 0;
  2963  00643A  0E00               	movlw	0
  2964  00643C  0100               	movlb	0	; () banked
  2965  00643E  6FCF               	movwf	(main@freeze+1)& (0+255),b
  2966  006440  0E00               	movlw	0
  2967  006442  6FCE               	movwf	main@freeze& (0+255),b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 173: LCDinit();
  2971  006444  EC64  F01D         	call	_LCDinit	;wreg free
  2972                           
  2973                           ;main.c: 175: write_image(image,1);
  2974  006448  0EB5               	movlw	low _image
  2975  00644A  6E11               	movwf	write_image@image,c
  2976  00644C  0E7B               	movlw	high _image
  2977  00644E  6E12               	movwf	write_image@image+1,c
  2978  006450  0E01               	movlw	1
  2979  006452  6E13               	movwf	write_image@top_to_bottom,c
  2980  006454  EC26  F026         	call	_write_image	;wreg free
  2981                           
  2982                           ;main.c: 178: for (int i = 0; i < 300; i++)
  2983  006458  0E00               	movlw	0
  2984  00645A  0100               	movlb	0	; () banked
  2985  00645C  6FDD               	movwf	(main@i+1)& (0+255),b
  2986  00645E  0E00               	movlw	0
  2987  006460  6FDC               	movwf	main@i& (0+255),b
  2988  006462                     l4729:
  2989                           
  2990                           ; BSR set to: 0
  2991  006462  0100               	movlb	0	; () banked
  2992  006464  BFDD               	btfsc	(main@i+1)& (0+255),7,b
  2993  006466  D008               	goto	l4733
  2994  006468  0E2C               	movlw	44
  2995  00646A  0100               	movlb	0	; () banked
  2996  00646C  5DDC               	subwf	main@i& (0+255),w,b
  2997  00646E  0E01               	movlw	1
  2998  006470  0100               	movlb	0	; () banked
  2999  006472  59DD               	subwfb	(main@i+1)& (0+255),w,b
  3000  006474  B0D8               	btfsc	status,0,c
  3001  006476  D00B               	goto	l4737
  3002  006478                     l4733:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;main.c: 179: {
  3006                           ;main.c: 180: _delay((unsigned long)((10)*(40000000/4000.0)));
  3007  006478  0E82               	movlw	130
  3008  00647A  6E5A               	movwf	??_main& (0+255),c
  3009  00647C  0EDE               	movlw	222
  3010  00647E                     u6057:
  3011  00647E  2EE8               	decfsz	wreg,f,c
  3012  006480  D7FE               	goto	u6057
  3013  006482  2E5A               	decfsz	??_main& (0+255),f,c
  3014  006484  D7FC               	goto	u6057
  3015  006486  0100               	movlb	0	; () banked
  3016  006488  4BDC               	infsnz	main@i& (0+255),f,b
  3017  00648A  2BDD               	incf	(main@i+1)& (0+255),f,b
  3018  00648C  D7EA               	goto	l4729
  3019  00648E                     l4737:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;main.c: 181: }
  3023                           ;main.c: 182: LCDclear();
  3024  00648E  EC62  F01F         	call	_LCDclear	;wreg free
  3025  006492                     l4739:
  3026                           
  3027                           ;main.c: 185: {
  3028                           ;main.c: 187: if (PORTBbits.RB0 == 1)
  3029  006492  A081               	btfss	3969,0,c	;volatile
  3030  006494  EFFA  F039         	goto	l5051
  3031                           
  3032                           ;main.c: 188: {
  3033                           ;main.c: 190: freeze = 1;
  3034  006498  0E00               	movlw	0
  3035  00649A  0100               	movlb	0	; () banked
  3036  00649C  6FCF               	movwf	(main@freeze+1)& (0+255),b
  3037  00649E  0E01               	movlw	1
  3038  0064A0  6FCE               	movwf	main@freeze& (0+255),b
  3039                           
  3040                           ;main.c: 197: int cur1_y = 0;
  3041  0064A2  0E00               	movlw	0
  3042  0064A4  0102               	movlb	2	; () banked
  3043  0064A6  6F1C               	movwf	(main@cur1_y+1)& (0+255),b
  3044  0064A8  0E00               	movlw	0
  3045  0064AA  6F1B               	movwf	main@cur1_y& (0+255),b
  3046                           
  3047                           ;main.c: 198: int cur2_y = 0;
  3048  0064AC  0E00               	movlw	0
  3049  0064AE  0102               	movlb	2	; () banked
  3050  0064B0  6F1E               	movwf	(main@cur2_y+1)& (0+255),b
  3051  0064B2  0E00               	movlw	0
  3052  0064B4  6F1D               	movwf	main@cur2_y& (0+255),b
  3053                           
  3054                           ;main.c: 199: int cur1_x = 0;
  3055  0064B6  0E00               	movlw	0
  3056  0064B8  0102               	movlb	2	; () banked
  3057  0064BA  6F20               	movwf	(main@cur1_x+1)& (0+255),b
  3058  0064BC  0E00               	movlw	0
  3059  0064BE  6F1F               	movwf	main@cur1_x& (0+255),b
  3060                           
  3061                           ;main.c: 200: int cur2_x = 0;
  3062  0064C0  0E00               	movlw	0
  3063  0064C2  0102               	movlb	2	; () banked
  3064  0064C4  6F22               	movwf	(main@cur2_x+1)& (0+255),b
  3065  0064C6  0E00               	movlw	0
  3066  0064C8  6F21               	movwf	main@cur2_x& (0+255),b
  3067                           
  3068                           ;main.c: 202: while(freeze)
  3069  0064CA  EFF3  F039         	goto	l5049
  3070  0064CE                     l67:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 203: {
  3074                           ;main.c: 205: if (PORTBbits.RB1 == 1)
  3075  0064CE  A281               	btfss	3969,1,c	;volatile
  3076  0064D0  D3E3               	goto	l4889
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;main.c: 206: {
  3080                           ;main.c: 208: if (cur1_x != 0 || cur2_x != 0)
  3081  0064D2  0102               	movlb	2	; () banked
  3082  0064D4  511F               	movf	main@cur1_x& (0+255),w,b
  3083  0064D6  0102               	movlb	2	; () banked
  3084  0064D8  1120               	iorwf	(main@cur1_x+1)& (0+255),w,b
  3085  0064DA  A4D8               	btfss	status,2,c
  3086  0064DC  D006               	goto	l4747
  3087                           
  3088                           ; BSR set to: 2
  3089  0064DE  0102               	movlb	2	; () banked
  3090  0064E0  5121               	movf	main@cur2_x& (0+255),w,b
  3091  0064E2  0102               	movlb	2	; () banked
  3092  0064E4  1122               	iorwf	(main@cur2_x+1)& (0+255),w,b
  3093  0064E6  B4D8               	btfsc	status,2,c
  3094  0064E8  D143               	goto	l69
  3095  0064EA                     l4747:
  3096                           
  3097                           ; BSR set to: 2
  3098                           ;main.c: 209: {
  3099                           ;main.c: 211: int y1 = (int)(((((float)5/1024)*data[64-cur1_x])-2.50f)*amplitude*2);
  3100  0064EA  0E00               	movlw	0
  3101  0064EC  6E35               	movwf	___ftadd@f2,c
  3102  0064EE  0E20               	movlw	32
  3103  0064F0  6E36               	movwf	___ftadd@f2+1,c
  3104  0064F2  0EC0               	movlw	192
  3105  0064F4  6E37               	movwf	___ftadd@f2+2,c
  3106  0064F6  0E00               	movlw	0
  3107  0064F8  6E1C               	movwf	___ftmul@f2,c
  3108  0064FA  0EA0               	movlw	160
  3109  0064FC  6E1D               	movwf	___ftmul@f2+1,c
  3110  0064FE  0E3B               	movlw	59
  3111  006500  6E1E               	movwf	___ftmul@f2+2,c
  3112  006502  C21F  F05A         	movff	main@cur1_x,??_main
  3113  006506  C220  F05B         	movff	main@cur1_x+1,??_main+1
  3114  00650A  1E5A               	comf	??_main,f,c
  3115  00650C  1E5B               	comf	??_main+1,f,c
  3116  00650E  4A5A               	infsnz	??_main,f,c
  3117  006510  2A5B               	incf	??_main+1,f,c
  3118  006512  90D8               	bcf	status,0,c
  3119  006514  365A               	rlcf	??_main,f,c
  3120  006516  365B               	rlcf	??_main+1,f,c
  3121  006518  0E80               	movlw	128
  3122  00651A  265A               	addwf	??_main,f,c
  3123  00651C  0E00               	movlw	0
  3124  00651E  225B               	addwfc	??_main+1,f,c
  3125  006520  0E00               	movlw	low main@data
  3126  006522  245A               	addwf	??_main,w,c
  3127  006524  6ED9               	movwf	fsr2l,c
  3128  006526  0E01               	movlw	high main@data
  3129  006528  205B               	addwfc	??_main+1,w,c
  3130  00652A  6EDA               	movwf	fsr2h,c
  3131  00652C  CFDE F009          	movff	postinc2,___lwtoft@c
  3132  006530  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  3133  006534  EC89  F01C         	call	___lwtoft	;wreg free
  3134  006538  C009  F019         	movff	?___lwtoft,___ftmul@f1
  3135  00653C  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  3136  006540  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  3137  006544  EC36  F021         	call	___ftmul	;wreg free
  3138  006548  C019  F032         	movff	?___ftmul,___ftadd@f1
  3139  00654C  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  3140  006550  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  3141  006554  EC2D  F024         	call	___ftadd	;wreg free
  3142  006558  C032  F223         	movff	?___ftadd,_main$1195
  3143  00655C  C033  F224         	movff	?___ftadd+1,_main$1195+1
  3144  006560  C034  F225         	movff	?___ftadd+2,_main$1195+2
  3145                           
  3146                           ;main.c: 209: {
  3147                           ;main.c: 211: int y1 = (int)(((((float)5/1024)*data[64-cur1_x])-2.50f)*amplitude*2);
  3148  006564  C216  F01C         	movff	main@amplitude,___ftmul@f2
  3149  006568  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  3150  00656C  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  3151  006570  C223  F019         	movff	_main$1195,___ftmul@f1
  3152  006574  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  3153  006578  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  3154  00657C  EC36  F021         	call	___ftmul	;wreg free
  3155  006580  C019  F226         	movff	?___ftmul,_main$1196
  3156  006584  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  3157  006588  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  3158                           
  3159                           ;main.c: 209: {
  3160                           ;main.c: 211: int y1 = (int)(((((float)5/1024)*data[64-cur1_x])-2.50f)*amplitude*2);
  3161  00658C  0E00               	movlw	0
  3162  00658E  6E1C               	movwf	___ftmul@f2,c
  3163  006590  0E00               	movlw	0
  3164  006592  6E1D               	movwf	___ftmul@f2+1,c
  3165  006594  0E40               	movlw	64
  3166  006596  6E1E               	movwf	___ftmul@f2+2,c
  3167  006598  C226  F019         	movff	_main$1196,___ftmul@f1
  3168  00659C  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  3169  0065A0  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  3170  0065A4  EC36  F021         	call	___ftmul	;wreg free
  3171  0065A8  C019  F03E         	movff	?___ftmul,___fttol@f1
  3172  0065AC  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  3173  0065B0  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  3174  0065B4  ECBC  F020         	call	___fttol	;wreg free
  3175  0065B8  C03E  F0C0         	movff	?___fttol,main@y1
  3176  0065BC  C03F  F0C1         	movff	?___fttol+1,main@y1+1
  3177                           
  3178                           ;main.c: 212: int y2 = (int)(((((float)5/1024)*data[64-cur2_x])-2.50f)*amplitude*2);
  3179  0065C0  0E00               	movlw	0
  3180  0065C2  6E35               	movwf	___ftadd@f2,c
  3181  0065C4  0E20               	movlw	32
  3182  0065C6  6E36               	movwf	___ftadd@f2+1,c
  3183  0065C8  0EC0               	movlw	192
  3184  0065CA  6E37               	movwf	___ftadd@f2+2,c
  3185  0065CC  0E00               	movlw	0
  3186  0065CE  6E1C               	movwf	___ftmul@f2,c
  3187  0065D0  0EA0               	movlw	160
  3188  0065D2  6E1D               	movwf	___ftmul@f2+1,c
  3189  0065D4  0E3B               	movlw	59
  3190  0065D6  6E1E               	movwf	___ftmul@f2+2,c
  3191  0065D8  C221  F05A         	movff	main@cur2_x,??_main
  3192  0065DC  C222  F05B         	movff	main@cur2_x+1,??_main+1
  3193  0065E0  1E5A               	comf	??_main,f,c
  3194  0065E2  1E5B               	comf	??_main+1,f,c
  3195  0065E4  4A5A               	infsnz	??_main,f,c
  3196  0065E6  2A5B               	incf	??_main+1,f,c
  3197  0065E8  90D8               	bcf	status,0,c
  3198  0065EA  365A               	rlcf	??_main,f,c
  3199  0065EC  365B               	rlcf	??_main+1,f,c
  3200  0065EE  0E80               	movlw	128
  3201  0065F0  265A               	addwf	??_main,f,c
  3202  0065F2  0E00               	movlw	0
  3203  0065F4  225B               	addwfc	??_main+1,f,c
  3204  0065F6  0E00               	movlw	low main@data
  3205  0065F8  245A               	addwf	??_main,w,c
  3206  0065FA  6ED9               	movwf	fsr2l,c
  3207  0065FC  0E01               	movlw	high main@data
  3208  0065FE  205B               	addwfc	??_main+1,w,c
  3209  006600  6EDA               	movwf	fsr2h,c
  3210  006602  CFDE F009          	movff	postinc2,___lwtoft@c
  3211  006606  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  3212  00660A  EC89  F01C         	call	___lwtoft	;wreg free
  3213  00660E  C009  F019         	movff	?___lwtoft,___ftmul@f1
  3214  006612  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  3215  006616  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  3216  00661A  EC36  F021         	call	___ftmul	;wreg free
  3217  00661E  C019  F032         	movff	?___ftmul,___ftadd@f1
  3218  006622  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  3219  006626  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  3220  00662A  EC2D  F024         	call	___ftadd	;wreg free
  3221  00662E  C032  F223         	movff	?___ftadd,_main$1195
  3222  006632  C033  F224         	movff	?___ftadd+1,_main$1195+1
  3223  006636  C034  F225         	movff	?___ftadd+2,_main$1195+2
  3224                           
  3225                           ;main.c: 212: int y2 = (int)(((((float)5/1024)*data[64-cur2_x])-2.50f)*amplitude*2);
  3226  00663A  C216  F01C         	movff	main@amplitude,___ftmul@f2
  3227  00663E  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  3228  006642  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  3229  006646  C223  F019         	movff	_main$1195,___ftmul@f1
  3230  00664A  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  3231  00664E  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  3232  006652  EC36  F021         	call	___ftmul	;wreg free
  3233  006656  C019  F226         	movff	?___ftmul,_main$1196
  3234  00665A  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  3235  00665E  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  3236                           
  3237                           ;main.c: 212: int y2 = (int)(((((float)5/1024)*data[64-cur2_x])-2.50f)*amplitude*2);
  3238  006662  0E00               	movlw	0
  3239  006664  6E1C               	movwf	___ftmul@f2,c
  3240  006666  0E00               	movlw	0
  3241  006668  6E1D               	movwf	___ftmul@f2+1,c
  3242  00666A  0E40               	movlw	64
  3243  00666C  6E1E               	movwf	___ftmul@f2+2,c
  3244  00666E  C226  F019         	movff	_main$1196,___ftmul@f1
  3245  006672  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  3246  006676  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  3247  00667A  EC36  F021         	call	___ftmul	;wreg free
  3248  00667E  C019  F03E         	movff	?___ftmul,___fttol@f1
  3249  006682  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  3250  006686  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  3251  00668A  ECBC  F020         	call	___fttol	;wreg free
  3252  00668E  C03E  F0C2         	movff	?___fttol,main@y2
  3253  006692  C03F  F0C3         	movff	?___fttol+1,main@y2+1
  3254                           
  3255                           ;main.c: 214: for (int i = 8; i < 56; i++)
  3256  006696  0E00               	movlw	0
  3257  006698  0102               	movlb	2	; () banked
  3258  00669A  6F1A               	movwf	(main@i_315+1)& (0+255),b
  3259  00669C  0E08               	movlw	8
  3260  00669E  6F19               	movwf	main@i_315& (0+255),b
  3261  0066A0                     l4759:
  3262                           
  3263                           ; BSR set to: 2
  3264  0066A0  0102               	movlb	2	; () banked
  3265  0066A2  BF1A               	btfsc	(main@i_315+1)& (0+255),7,b
  3266  0066A4  D008               	goto	l4763
  3267  0066A6  0102               	movlb	2	; () banked
  3268  0066A8  511A               	movf	(main@i_315+1)& (0+255),w,b
  3269  0066AA  E159               	bnz	l4779
  3270  0066AC  0E38               	movlw	56
  3271  0066AE  0102               	movlb	2	; () banked
  3272  0066B0  5D19               	subwf	main@i_315& (0+255),w,b
  3273  0066B2  B0D8               	btfsc	status,0,c
  3274  0066B4  D054               	goto	l4779
  3275  0066B6                     l4763:
  3276                           
  3277                           ; BSR set to: 2
  3278                           ;main.c: 215: {
  3279                           ;main.c: 216: if (i != (32-y1) && i != 32 )
  3280  0066B6  C0C0  F05A         	movff	main@y1,??_main
  3281  0066BA  C0C1  F05B         	movff	main@y1+1,??_main+1
  3282  0066BE  1E5A               	comf	??_main,f,c
  3283  0066C0  1E5B               	comf	??_main+1,f,c
  3284  0066C2  4A5A               	infsnz	??_main,f,c
  3285  0066C4  2A5B               	incf	??_main+1,f,c
  3286  0066C6  0E20               	movlw	32
  3287  0066C8  265A               	addwf	??_main,f,c
  3288  0066CA  0E00               	movlw	0
  3289  0066CC  225B               	addwfc	??_main+1,f,c
  3290  0066CE  0102               	movlb	2	; () banked
  3291  0066D0  5119               	movf	main@i_315& (0+255),w,b
  3292  0066D2  185A               	xorwf	??_main,w,c
  3293  0066D4  E105               	bnz	u5350
  3294  0066D6  0102               	movlb	2	; () banked
  3295  0066D8  511A               	movf	(main@i_315+1)& (0+255),w,b
  3296  0066DA  185B               	xorwf	??_main+1,w,c
  3297  0066DC  B4D8               	btfsc	status,2,c
  3298  0066DE  D013               	goto	l4769
  3299  0066E0                     u5350:
  3300                           
  3301                           ; BSR set to: 2
  3302  0066E0  0E20               	movlw	32
  3303  0066E2  0102               	movlb	2	; () banked
  3304  0066E4  1919               	xorwf	main@i_315& (0+255),w,b
  3305  0066E6  0102               	movlb	2	; () banked
  3306  0066E8  111A               	iorwf	(main@i_315+1)& (0+255),w,b
  3307  0066EA  B4D8               	btfsc	status,2,c
  3308  0066EC  D00C               	goto	l4769
  3309                           
  3310                           ; BSR set to: 2
  3311                           ;main.c: 217: {
  3312                           ;main.c: 218: lcdplotpixel2(64-cur1_x,i,1);
  3313  0066EE  C219  F011         	movff	main@i_315,lcdplotpixel2@ry
  3314  0066F2  0E00               	movlw	0
  3315  0066F4  6E13               	movwf	lcdplotpixel2@blank+1,c
  3316  0066F6  0E01               	movlw	1
  3317  0066F8  6E12               	movwf	lcdplotpixel2@blank,c
  3318  0066FA  0102               	movlb	2	; () banked
  3319  0066FC  511F               	movf	main@cur1_x& (0+255),w,b
  3320  0066FE  0800               	sublw	0
  3321  006700  0F40               	addlw	64
  3322  006702  EC83  F023         	call	_lcdplotpixel2
  3323  006706                     l4769:
  3324                           
  3325                           ;main.c: 219: }
  3326                           ;main.c: 220: if (i != (32-y2) && i != 32 )
  3327  006706  C0C2  F05A         	movff	main@y2,??_main
  3328  00670A  C0C3  F05B         	movff	main@y2+1,??_main+1
  3329  00670E  1E5A               	comf	??_main,f,c
  3330  006710  1E5B               	comf	??_main+1,f,c
  3331  006712  4A5A               	infsnz	??_main,f,c
  3332  006714  2A5B               	incf	??_main+1,f,c
  3333  006716  0E20               	movlw	32
  3334  006718  265A               	addwf	??_main,f,c
  3335  00671A  0E00               	movlw	0
  3336  00671C  225B               	addwfc	??_main+1,f,c
  3337  00671E  0102               	movlb	2	; () banked
  3338  006720  5119               	movf	main@i_315& (0+255),w,b
  3339  006722  185A               	xorwf	??_main,w,c
  3340  006724  E105               	bnz	u5370
  3341  006726  0102               	movlb	2	; () banked
  3342  006728  511A               	movf	(main@i_315+1)& (0+255),w,b
  3343  00672A  185B               	xorwf	??_main+1,w,c
  3344  00672C  B4D8               	btfsc	status,2,c
  3345  00672E  D013               	goto	l4775
  3346  006730                     u5370:
  3347                           
  3348                           ; BSR set to: 2
  3349  006730  0E20               	movlw	32
  3350  006732  0102               	movlb	2	; () banked
  3351  006734  1919               	xorwf	main@i_315& (0+255),w,b
  3352  006736  0102               	movlb	2	; () banked
  3353  006738  111A               	iorwf	(main@i_315+1)& (0+255),w,b
  3354  00673A  B4D8               	btfsc	status,2,c
  3355  00673C  D00C               	goto	l4775
  3356                           
  3357                           ; BSR set to: 2
  3358                           ;main.c: 221: {
  3359                           ;main.c: 222: lcdplotpixel2(64-cur2_x,i,1);
  3360  00673E  C219  F011         	movff	main@i_315,lcdplotpixel2@ry
  3361  006742  0E00               	movlw	0
  3362  006744  6E13               	movwf	lcdplotpixel2@blank+1,c
  3363  006746  0E01               	movlw	1
  3364  006748  6E12               	movwf	lcdplotpixel2@blank,c
  3365  00674A  0102               	movlb	2	; () banked
  3366  00674C  5121               	movf	main@cur2_x& (0+255),w,b
  3367  00674E  0800               	sublw	0
  3368  006750  0F40               	addlw	64
  3369  006752  EC83  F023         	call	_lcdplotpixel2
  3370  006756                     l4775:
  3371  006756  0102               	movlb	2	; () banked
  3372  006758  4B19               	infsnz	main@i_315& (0+255),f,b
  3373  00675A  2B1A               	incf	(main@i_315+1)& (0+255),f,b
  3374  00675C  D7A1               	goto	l4759
  3375  00675E                     l4779:
  3376                           
  3377                           ; BSR set to: 2
  3378                           ;main.c: 223: }
  3379                           ;main.c: 224: }
  3380                           ;main.c: 226: cur1_x = cur2_x = 0;
  3381  00675E  0E00               	movlw	0
  3382  006760  0102               	movlb	2	; () banked
  3383  006762  6F22               	movwf	(main@cur2_x+1)& (0+255),b
  3384  006764  0E00               	movlw	0
  3385  006766  6F21               	movwf	main@cur2_x& (0+255),b
  3386  006768  C221  F21F         	movff	main@cur2_x,main@cur1_x
  3387  00676C  C222  F220         	movff	main@cur2_x+1,main@cur1_x+1
  3388  006770                     l69:
  3389                           
  3390                           ; BSR set to: 2
  3391                           ;main.c: 227: }
  3392                           ;main.c: 229: int cur1_y_new = 0;
  3393  006770  0E00               	movlw	0
  3394  006772  0100               	movlb	0	; () banked
  3395  006774  6FF3               	movwf	(main@cur1_y_new+1)& (0+255),b
  3396  006776  0E00               	movlw	0
  3397  006778  6FF2               	movwf	main@cur1_y_new& (0+255),b
  3398                           
  3399                           ;main.c: 230: int cur2_y_new = 0;
  3400  00677A  0E00               	movlw	0
  3401  00677C  0100               	movlb	0	; () banked
  3402  00677E  6FF5               	movwf	(main@cur2_y_new+1)& (0+255),b
  3403  006780  0E00               	movlw	0
  3404  006782  6FF4               	movwf	main@cur2_y_new& (0+255),b
  3405                           
  3406                           ;main.c: 233: ADCON0 = 0b00001101;
  3407  006784  0E0D               	movlw	13
  3408  006786  6EC2               	movwf	4034,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;main.c: 235: ADCON0bits.GO = 1;
  3412  006788  82C2               	bsf	4034,1,c	;volatile
  3413  00678A                     l76:
  3414  00678A  B2C2               	btfsc	4034,1,c	;volatile
  3415  00678C  D7FE               	goto	l76
  3416                           
  3417                           ;main.c: 241: int s_val = ((unsigned int)(ADRESH << 8) | ADRESL);
  3418  00678E  50C4               	movf	4036,w,c	;volatile
  3419  006790  6E5A               	movwf	??_main& (0+255),c
  3420  006792  50C3               	movf	4035,w,c	;volatile
  3421  006794  0100               	movlb	0	; () banked
  3422  006796  6FDE               	movwf	main@s_val& (0+255),b
  3423  006798  C05A  F0DF         	movff	??_main,main@s_val+1
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;main.c: 243: cur1_y_new = ((1024/2)-s_val)/21;
  3427  00679C  C0DE  F05A         	movff	main@s_val,??_main
  3428  0067A0  C0DF  F05B         	movff	main@s_val+1,??_main+1
  3429  0067A4  1E5A               	comf	??_main,f,c
  3430  0067A6  1E5B               	comf	??_main+1,f,c
  3431  0067A8  4A5A               	infsnz	??_main,f,c
  3432  0067AA  2A5B               	incf	??_main+1,f,c
  3433  0067AC  0E00               	movlw	0
  3434  0067AE  245A               	addwf	??_main,w,c
  3435  0067B0  6E07               	movwf	___awdiv@dividend,c
  3436  0067B2  0E02               	movlw	2
  3437  0067B4  205B               	addwfc	??_main+1,w,c
  3438  0067B6  6E08               	movwf	___awdiv@dividend+1,c
  3439  0067B8  0E00               	movlw	0
  3440  0067BA  6E0A               	movwf	___awdiv@divisor+1,c
  3441  0067BC  0E15               	movlw	21
  3442  0067BE  6E09               	movwf	___awdiv@divisor,c
  3443  0067C0  EC20  F01F         	call	___awdiv	;wreg free
  3444  0067C4  C007  F0F2         	movff	?___awdiv,main@cur1_y_new
  3445  0067C8  C008  F0F3         	movff	?___awdiv+1,main@cur1_y_new+1
  3446                           
  3447                           ;main.c: 245: if (cur1_y_new != cur1_y)
  3448  0067CC  0102               	movlb	2	; () banked
  3449  0067CE  511B               	movf	main@cur1_y& (0+255),w,b
  3450  0067D0  0100               	movlb	0	; () banked
  3451  0067D2  19F2               	xorwf	main@cur1_y_new& (0+255),w,b
  3452  0067D4  E106               	bnz	u5410
  3453  0067D6  0102               	movlb	2	; () banked
  3454  0067D8  511C               	movf	(main@cur1_y+1)& (0+255),w,b
  3455  0067DA  0100               	movlb	0	; () banked
  3456  0067DC  19F3               	xorwf	(main@cur1_y_new+1)& (0+255),w,b
  3457  0067DE  B4D8               	btfsc	status,2,c
  3458  0067E0  D0D7               	goto	l4827
  3459  0067E2                     u5410:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;main.c: 246: {
  3463                           ;main.c: 248: for (int i = 0; i < 128; i++)
  3464  0067E2  0E00               	movlw	0
  3465  0067E4  0102               	movlb	2	; () banked
  3466  0067E6  6F0B               	movwf	(main@i_321+1)& (0+255),b
  3467  0067E8  0E00               	movlw	0
  3468  0067EA  6F0A               	movwf	main@i_321& (0+255),b
  3469                           
  3470                           ; BSR set to: 2
  3471  0067EC  0102               	movlb	2	; () banked
  3472  0067EE  BF0B               	btfsc	(main@i_321+1)& (0+255),7,b
  3473  0067F0  D00A               	goto	l4795
  3474  0067F2  0102               	movlb	2	; () banked
  3475  0067F4  510B               	movf	(main@i_321+1)& (0+255),w,b
  3476  0067F6  E106               	bnz	u5420
  3477  0067F8  0E80               	movlw	128
  3478  0067FA  0102               	movlb	2	; () banked
  3479  0067FC  5D0A               	subwf	main@i_321& (0+255),w,b
  3480  0067FE  B0D8               	btfsc	status,0,c
  3481  006800  D0A4               	goto	l81
  3482  006802  D001               	goto	l4795
  3483  006804                     u5420:
  3484                           
  3485                           ; BSR set to: 2
  3486  006804  D0A2               	goto	l81
  3487  006806                     l4795:
  3488                           
  3489                           ; BSR set to: 2
  3490                           ;main.c: 249: {
  3491                           ;main.c: 250: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  3492  006806  0E00               	movlw	0
  3493  006808  6E35               	movwf	___ftadd@f2,c
  3494  00680A  0E20               	movlw	32
  3495  00680C  6E36               	movwf	___ftadd@f2+1,c
  3496  00680E  0EC0               	movlw	192
  3497  006810  6E37               	movwf	___ftadd@f2+2,c
  3498  006812  0E00               	movlw	0
  3499  006814  6E1C               	movwf	___ftmul@f2,c
  3500  006816  0EA0               	movlw	160
  3501  006818  6E1D               	movwf	___ftmul@f2+1,c
  3502  00681A  0E3B               	movlw	59
  3503  00681C  6E1E               	movwf	___ftmul@f2+2,c
  3504  00681E  90D8               	bcf	status,0,c
  3505  006820  0102               	movlb	2	; () banked
  3506  006822  350A               	rlcf	main@i_321& (0+255),w,b
  3507  006824  6ED9               	movwf	fsr2l,c
  3508  006826  0102               	movlb	2	; () banked
  3509  006828  350B               	rlcf	(main@i_321+1)& (0+255),w,b
  3510  00682A  6EDA               	movwf	fsr2h,c
  3511  00682C  0E00               	movlw	low main@data
  3512  00682E  26D9               	addwf	fsr2l,f,c
  3513  006830  0E01               	movlw	high main@data
  3514  006832  22DA               	addwfc	fsr2h,f,c
  3515  006834  CFDE F009          	movff	postinc2,___lwtoft@c
  3516  006838  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  3517  00683C  EC89  F01C         	call	___lwtoft	;wreg free
  3518  006840  C009  F019         	movff	?___lwtoft,___ftmul@f1
  3519  006844  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  3520  006848  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  3521  00684C  EC36  F021         	call	___ftmul	;wreg free
  3522  006850  C019  F032         	movff	?___ftmul,___ftadd@f1
  3523  006854  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  3524  006858  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  3525  00685C  EC2D  F024         	call	___ftadd	;wreg free
  3526  006860  C032  F223         	movff	?___ftadd,_main$1195
  3527  006864  C033  F224         	movff	?___ftadd+1,_main$1195+1
  3528  006868  C034  F225         	movff	?___ftadd+2,_main$1195+2
  3529                           
  3530                           ;main.c: 249: {
  3531                           ;main.c: 250: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  3532  00686C  C216  F01C         	movff	main@amplitude,___ftmul@f2
  3533  006870  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  3534  006874  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  3535  006878  C223  F019         	movff	_main$1195,___ftmul@f1
  3536  00687C  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  3537  006880  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  3538  006884  EC36  F021         	call	___ftmul	;wreg free
  3539  006888  C019  F226         	movff	?___ftmul,_main$1196
  3540  00688C  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  3541  006890  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  3542                           
  3543                           ;main.c: 249: {
  3544                           ;main.c: 250: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  3545  006894  0E00               	movlw	0
  3546  006896  6E1C               	movwf	___ftmul@f2,c
  3547  006898  0E00               	movlw	0
  3548  00689A  6E1D               	movwf	___ftmul@f2+1,c
  3549  00689C  0E40               	movlw	64
  3550  00689E  6E1E               	movwf	___ftmul@f2+2,c
  3551  0068A0  C226  F019         	movff	_main$1196,___ftmul@f1
  3552  0068A4  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  3553  0068A8  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  3554  0068AC  EC36  F021         	call	___ftmul	;wreg free
  3555  0068B0  C019  F03E         	movff	?___ftmul,___fttol@f1
  3556  0068B4  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  3557  0068B8  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  3558  0068BC  ECBC  F020         	call	___fttol	;wreg free
  3559  0068C0  C03E  F0C4         	movff	?___fttol,main@y
  3560  0068C4  C03F  F0C5         	movff	?___fttol+1,main@y+1
  3561                           
  3562                           ;main.c: 252: if (y != cur1_y && i != 64 && cur1_y != cur2_y )
  3563  0068C8  0102               	movlb	2	; () banked
  3564  0068CA  511B               	movf	main@cur1_y& (0+255),w,b
  3565  0068CC  0100               	movlb	0	; () banked
  3566  0068CE  19C4               	xorwf	main@y& (0+255),w,b
  3567  0068D0  E106               	bnz	u5430
  3568  0068D2  0102               	movlb	2	; () banked
  3569  0068D4  511C               	movf	(main@cur1_y+1)& (0+255),w,b
  3570  0068D6  0100               	movlb	0	; () banked
  3571  0068D8  19C5               	xorwf	(main@y+1)& (0+255),w,b
  3572  0068DA  B4D8               	btfsc	status,2,c
  3573  0068DC  D01F               	goto	l82
  3574  0068DE                     u5430:
  3575                           
  3576                           ; BSR set to: 0
  3577  0068DE  0E40               	movlw	64
  3578  0068E0  0102               	movlb	2	; () banked
  3579  0068E2  190A               	xorwf	main@i_321& (0+255),w,b
  3580  0068E4  0102               	movlb	2	; () banked
  3581  0068E6  110B               	iorwf	(main@i_321+1)& (0+255),w,b
  3582  0068E8  B4D8               	btfsc	status,2,c
  3583  0068EA  D018               	goto	l82
  3584                           
  3585                           ; BSR set to: 2
  3586  0068EC  0102               	movlb	2	; () banked
  3587  0068EE  511D               	movf	main@cur2_y& (0+255),w,b
  3588  0068F0  0102               	movlb	2	; () banked
  3589  0068F2  191B               	xorwf	main@cur1_y& (0+255),w,b
  3590  0068F4  E106               	bnz	u5450
  3591  0068F6  0102               	movlb	2	; () banked
  3592  0068F8  511E               	movf	(main@cur2_y+1)& (0+255),w,b
  3593  0068FA  0102               	movlb	2	; () banked
  3594  0068FC  191C               	xorwf	(main@cur1_y+1)& (0+255),w,b
  3595  0068FE  B4D8               	btfsc	status,2,c
  3596  006900  D00D               	goto	l82
  3597  006902                     u5450:
  3598                           
  3599                           ; BSR set to: 2
  3600                           ;main.c: 253: {
  3601                           ;main.c: 254: lcdplotpixel2(i,32-cur1_y,1);
  3602  006902  0102               	movlb	2	; () banked
  3603  006904  511B               	movf	main@cur1_y& (0+255),w,b
  3604  006906  0800               	sublw	0
  3605  006908  0F20               	addlw	32
  3606  00690A  6E11               	movwf	lcdplotpixel2@ry,c
  3607  00690C  0E00               	movlw	0
  3608  00690E  6E13               	movwf	lcdplotpixel2@blank+1,c
  3609  006910  0E01               	movlw	1
  3610  006912  6E12               	movwf	lcdplotpixel2@blank,c
  3611  006914  0102               	movlb	2	; () banked
  3612  006916  510A               	movf	main@i_321& (0+255),w,b
  3613  006918  EC83  F023         	call	_lcdplotpixel2
  3614  00691C                     l82:
  3615                           
  3616                           ;main.c: 255: }
  3617                           ;main.c: 257: lcdplotpixel2(i,32-cur1_y_new,0);
  3618  00691C  0100               	movlb	0	; () banked
  3619  00691E  51F2               	movf	main@cur1_y_new& (0+255),w,b
  3620  006920  0800               	sublw	0
  3621  006922  0F20               	addlw	32
  3622  006924  6E11               	movwf	lcdplotpixel2@ry,c
  3623  006926  0E00               	movlw	0
  3624  006928  6E13               	movwf	lcdplotpixel2@blank+1,c
  3625  00692A  0E00               	movlw	0
  3626  00692C  6E12               	movwf	lcdplotpixel2@blank,c
  3627  00692E  0102               	movlb	2	; () banked
  3628  006930  510A               	movf	main@i_321& (0+255),w,b
  3629  006932  EC83  F023         	call	_lcdplotpixel2
  3630  006936  0102               	movlb	2	; () banked
  3631  006938  4B0A               	infsnz	main@i_321& (0+255),f,b
  3632  00693A  2B0B               	incf	(main@i_321+1)& (0+255),f,b
  3633                           
  3634                           ; BSR set to: 2
  3635  00693C  0102               	movlb	2	; () banked
  3636  00693E  BF0B               	btfsc	(main@i_321+1)& (0+255),7,b
  3637  006940  D762               	goto	l4795
  3638  006942  0102               	movlb	2	; () banked
  3639  006944  510B               	movf	(main@i_321+1)& (0+255),w,b
  3640  006946  E101               	bnz	u5460
  3641  006948  D757               	goto	L1
  3642  00694A                     u5460:
  3643  00694A                     l81:
  3644                           
  3645                           ; BSR set to: 2
  3646                           ;main.c: 258: }
  3647                           ;main.c: 259: cur1_y = cur1_y_new;
  3648  00694A  C0F2  F21B         	movff	main@cur1_y_new,main@cur1_y
  3649  00694E  C0F3  F21C         	movff	main@cur1_y_new+1,main@cur1_y+1
  3650                           
  3651                           ; BSR set to: 2
  3652                           ;main.c: 264: for (int i = 70; i < 128; i++)
  3653  006952  0E00               	movlw	0
  3654  006954  0100               	movlb	0	; () banked
  3655  006956  6FF7               	movwf	(main@i_323+1)& (0+255),b
  3656  006958  0E46               	movlw	70
  3657  00695A  6FF6               	movwf	main@i_323& (0+255),b
  3658  00695C                     l4815:
  3659                           
  3660                           ; BSR set to: 0
  3661  00695C  0100               	movlb	0	; () banked
  3662  00695E  BFF7               	btfsc	(main@i_323+1)& (0+255),7,b
  3663  006960  D008               	goto	l4819
  3664  006962  0100               	movlb	0	; () banked
  3665  006964  51F7               	movf	(main@i_323+1)& (0+255),w,b
  3666  006966  E112               	bnz	l4825
  3667  006968  0E80               	movlw	128
  3668  00696A  0100               	movlb	0	; () banked
  3669  00696C  5DF6               	subwf	main@i_323& (0+255),w,b
  3670  00696E  B0D8               	btfsc	status,0,c
  3671  006970  D00D               	goto	l4825
  3672  006972                     l4819:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;main.c: 265: {
  3676                           ;main.c: 266: lcdplotpixel2(i,0,-1);
  3677  006972  0E00               	movlw	0
  3678  006974  6E11               	movwf	lcdplotpixel2@ry,c
  3679  006976  0EFF               	movlw	255
  3680  006978  6E13               	movwf	lcdplotpixel2@blank+1,c
  3681  00697A  6812               	setf	lcdplotpixel2@blank,c
  3682  00697C  0100               	movlb	0	; () banked
  3683  00697E  51F6               	movf	main@i_323& (0+255),w,b
  3684  006980  EC83  F023         	call	_lcdplotpixel2
  3685  006984  0100               	movlb	0	; () banked
  3686  006986  4BF6               	infsnz	main@i_323& (0+255),f,b
  3687  006988  2BF7               	incf	(main@i_323+1)& (0+255),f,b
  3688  00698A  D7E8               	goto	l4815
  3689  00698C                     l4825:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;main.c: 267: }
  3693                           ;main.c: 268: xyaxis();
  3694  00698C  ECDD  F022         	call	_xyaxis	;wreg free
  3695  006990                     l4827:
  3696                           
  3697                           ;main.c: 269: }
  3698                           ;main.c: 272: ADCON0=0b00010001;
  3699  006990  0E11               	movlw	17
  3700  006992  6EC2               	movwf	4034,c	;volatile
  3701                           
  3702                           ;main.c: 274: ADCON0bits.GO=1;
  3703  006994  82C2               	bsf	4034,1,c	;volatile
  3704  006996                     l85:
  3705  006996  B2C2               	btfsc	4034,1,c	;volatile
  3706  006998  D7FE               	goto	l85
  3707                           
  3708                           ;main.c: 280: int s_val = ((unsigned int)(ADRESH << 8) | ADRESL);
  3709  00699A  50C4               	movf	4036,w,c	;volatile
  3710  00699C  6E5A               	movwf	??_main& (0+255),c
  3711  00699E  50C3               	movf	4035,w,c	;volatile
  3712  0069A0  0100               	movlb	0	; () banked
  3713  0069A2  6FDE               	movwf	main@s_val& (0+255),b
  3714  0069A4  C05A  F0DF         	movff	??_main,main@s_val+1
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;main.c: 281: cur2_y_new = ((1024/2)-s_val)/21;
  3718  0069A8  C0DE  F05A         	movff	main@s_val,??_main
  3719  0069AC  C0DF  F05B         	movff	main@s_val+1,??_main+1
  3720  0069B0  1E5A               	comf	??_main,f,c
  3721  0069B2  1E5B               	comf	??_main+1,f,c
  3722  0069B4  4A5A               	infsnz	??_main,f,c
  3723  0069B6  2A5B               	incf	??_main+1,f,c
  3724  0069B8  0E00               	movlw	0
  3725  0069BA  245A               	addwf	??_main,w,c
  3726  0069BC  6E07               	movwf	___awdiv@dividend,c
  3727  0069BE  0E02               	movlw	2
  3728  0069C0  205B               	addwfc	??_main+1,w,c
  3729  0069C2  6E08               	movwf	___awdiv@dividend+1,c
  3730  0069C4  0E00               	movlw	0
  3731  0069C6  6E0A               	movwf	___awdiv@divisor+1,c
  3732  0069C8  0E15               	movlw	21
  3733  0069CA  6E09               	movwf	___awdiv@divisor,c
  3734  0069CC  EC20  F01F         	call	___awdiv	;wreg free
  3735  0069D0  C007  F0F4         	movff	?___awdiv,main@cur2_y_new
  3736  0069D4  C008  F0F5         	movff	?___awdiv+1,main@cur2_y_new+1
  3737                           
  3738                           ;main.c: 283: if (cur2_y_new != cur2_y)
  3739  0069D8  0102               	movlb	2	; () banked
  3740  0069DA  511D               	movf	main@cur2_y& (0+255),w,b
  3741  0069DC  0100               	movlb	0	; () banked
  3742  0069DE  19F4               	xorwf	main@cur2_y_new& (0+255),w,b
  3743  0069E0  E106               	bnz	u5500
  3744  0069E2  0102               	movlb	2	; () banked
  3745  0069E4  511E               	movf	(main@cur2_y+1)& (0+255),w,b
  3746  0069E6  0100               	movlb	0	; () banked
  3747  0069E8  19F5               	xorwf	(main@cur2_y_new+1)& (0+255),w,b
  3748  0069EA  B4D8               	btfsc	status,2,c
  3749  0069EC  D0D7               	goto	l4875
  3750  0069EE                     u5500:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;main.c: 284: {
  3754                           ;main.c: 286: for (int a = 0; a < 128; a++)
  3755  0069EE  0E00               	movlw	0
  3756  0069F0  0102               	movlb	2	; () banked
  3757  0069F2  6F0D               	movwf	(main@a+1)& (0+255),b
  3758  0069F4  0E00               	movlw	0
  3759  0069F6  6F0C               	movwf	main@a& (0+255),b
  3760                           
  3761                           ; BSR set to: 2
  3762  0069F8  0102               	movlb	2	; () banked
  3763  0069FA  BF0D               	btfsc	(main@a+1)& (0+255),7,b
  3764  0069FC  D00A               	goto	l4843
  3765  0069FE  0102               	movlb	2	; () banked
  3766  006A00  510D               	movf	(main@a+1)& (0+255),w,b
  3767  006A02  E106               	bnz	u5510
  3768  006A04  0E80               	movlw	128
  3769  006A06  0102               	movlb	2	; () banked
  3770  006A08  5D0C               	subwf	main@a& (0+255),w,b
  3771  006A0A  B0D8               	btfsc	status,0,c
  3772  006A0C  D0A4               	goto	l90
  3773  006A0E  D001               	goto	l4843
  3774  006A10                     u5510:
  3775                           
  3776                           ; BSR set to: 2
  3777  006A10  D0A2               	goto	l90
  3778  006A12                     l4843:
  3779                           
  3780                           ; BSR set to: 2
  3781                           ;main.c: 287: {
  3782                           ;main.c: 288: int y = (int)(((((float)5/1024)*data[a])-2.50f)*amplitude*2);
  3783  006A12  0E00               	movlw	0
  3784  006A14  6E35               	movwf	___ftadd@f2,c
  3785  006A16  0E20               	movlw	32
  3786  006A18  6E36               	movwf	___ftadd@f2+1,c
  3787  006A1A  0EC0               	movlw	192
  3788  006A1C  6E37               	movwf	___ftadd@f2+2,c
  3789  006A1E  0E00               	movlw	0
  3790  006A20  6E1C               	movwf	___ftmul@f2,c
  3791  006A22  0EA0               	movlw	160
  3792  006A24  6E1D               	movwf	___ftmul@f2+1,c
  3793  006A26  0E3B               	movlw	59
  3794  006A28  6E1E               	movwf	___ftmul@f2+2,c
  3795  006A2A  90D8               	bcf	status,0,c
  3796  006A2C  0102               	movlb	2	; () banked
  3797  006A2E  350C               	rlcf	main@a& (0+255),w,b
  3798  006A30  6ED9               	movwf	fsr2l,c
  3799  006A32  0102               	movlb	2	; () banked
  3800  006A34  350D               	rlcf	(main@a+1)& (0+255),w,b
  3801  006A36  6EDA               	movwf	fsr2h,c
  3802  006A38  0E00               	movlw	low main@data
  3803  006A3A  26D9               	addwf	fsr2l,f,c
  3804  006A3C  0E01               	movlw	high main@data
  3805  006A3E  22DA               	addwfc	fsr2h,f,c
  3806  006A40  CFDE F009          	movff	postinc2,___lwtoft@c
  3807  006A44  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  3808  006A48  EC89  F01C         	call	___lwtoft	;wreg free
  3809  006A4C  C009  F019         	movff	?___lwtoft,___ftmul@f1
  3810  006A50  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  3811  006A54  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  3812  006A58  EC36  F021         	call	___ftmul	;wreg free
  3813  006A5C  C019  F032         	movff	?___ftmul,___ftadd@f1
  3814  006A60  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  3815  006A64  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  3816  006A68  EC2D  F024         	call	___ftadd	;wreg free
  3817  006A6C  C032  F223         	movff	?___ftadd,_main$1195
  3818  006A70  C033  F224         	movff	?___ftadd+1,_main$1195+1
  3819  006A74  C034  F225         	movff	?___ftadd+2,_main$1195+2
  3820                           
  3821                           ;main.c: 287: {
  3822                           ;main.c: 288: int y = (int)(((((float)5/1024)*data[a])-2.50f)*amplitude*2);
  3823  006A78  C216  F01C         	movff	main@amplitude,___ftmul@f2
  3824  006A7C  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  3825  006A80  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  3826  006A84  C223  F019         	movff	_main$1195,___ftmul@f1
  3827  006A88  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  3828  006A8C  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  3829  006A90  EC36  F021         	call	___ftmul	;wreg free
  3830  006A94  C019  F226         	movff	?___ftmul,_main$1196
  3831  006A98  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  3832  006A9C  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  3833                           
  3834                           ;main.c: 287: {
  3835                           ;main.c: 288: int y = (int)(((((float)5/1024)*data[a])-2.50f)*amplitude*2);
  3836  006AA0  0E00               	movlw	0
  3837  006AA2  6E1C               	movwf	___ftmul@f2,c
  3838  006AA4  0E00               	movlw	0
  3839  006AA6  6E1D               	movwf	___ftmul@f2+1,c
  3840  006AA8  0E40               	movlw	64
  3841  006AAA  6E1E               	movwf	___ftmul@f2+2,c
  3842  006AAC  C226  F019         	movff	_main$1196,___ftmul@f1
  3843  006AB0  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  3844  006AB4  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  3845  006AB8  EC36  F021         	call	___ftmul	;wreg free
  3846  006ABC  C019  F03E         	movff	?___ftmul,___fttol@f1
  3847  006AC0  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  3848  006AC4  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  3849  006AC8  ECBC  F020         	call	___fttol	;wreg free
  3850  006ACC  C03E  F0C6         	movff	?___fttol,main@y_325
  3851  006AD0  C03F  F0C7         	movff	?___fttol+1,main@y_325+1
  3852                           
  3853                           ;main.c: 290: if (y != cur2_y && a != 64 && cur2_y != cur1_y )
  3854  006AD4  0102               	movlb	2	; () banked
  3855  006AD6  511D               	movf	main@cur2_y& (0+255),w,b
  3856  006AD8  0100               	movlb	0	; () banked
  3857  006ADA  19C6               	xorwf	main@y_325& (0+255),w,b
  3858  006ADC  E106               	bnz	u5520
  3859  006ADE  0102               	movlb	2	; () banked
  3860  006AE0  511E               	movf	(main@cur2_y+1)& (0+255),w,b
  3861  006AE2  0100               	movlb	0	; () banked
  3862  006AE4  19C7               	xorwf	(main@y_325+1)& (0+255),w,b
  3863  006AE6  B4D8               	btfsc	status,2,c
  3864  006AE8  D01F               	goto	l91
  3865  006AEA                     u5520:
  3866                           
  3867                           ; BSR set to: 0
  3868  006AEA  0E40               	movlw	64
  3869  006AEC  0102               	movlb	2	; () banked
  3870  006AEE  190C               	xorwf	main@a& (0+255),w,b
  3871  006AF0  0102               	movlb	2	; () banked
  3872  006AF2  110D               	iorwf	(main@a+1)& (0+255),w,b
  3873  006AF4  B4D8               	btfsc	status,2,c
  3874  006AF6  D018               	goto	l91
  3875                           
  3876                           ; BSR set to: 2
  3877  006AF8  0102               	movlb	2	; () banked
  3878  006AFA  511B               	movf	main@cur1_y& (0+255),w,b
  3879  006AFC  0102               	movlb	2	; () banked
  3880  006AFE  191D               	xorwf	main@cur2_y& (0+255),w,b
  3881  006B00  E106               	bnz	u5540
  3882  006B02  0102               	movlb	2	; () banked
  3883  006B04  511C               	movf	(main@cur1_y+1)& (0+255),w,b
  3884  006B06  0102               	movlb	2	; () banked
  3885  006B08  191E               	xorwf	(main@cur2_y+1)& (0+255),w,b
  3886  006B0A  B4D8               	btfsc	status,2,c
  3887  006B0C  D00D               	goto	l91
  3888  006B0E                     u5540:
  3889                           
  3890                           ; BSR set to: 2
  3891                           ;main.c: 291: {
  3892                           ;main.c: 292: lcdplotpixel2(a,32-cur2_y,1);
  3893  006B0E  0102               	movlb	2	; () banked
  3894  006B10  511D               	movf	main@cur2_y& (0+255),w,b
  3895  006B12  0800               	sublw	0
  3896  006B14  0F20               	addlw	32
  3897  006B16  6E11               	movwf	lcdplotpixel2@ry,c
  3898  006B18  0E00               	movlw	0
  3899  006B1A  6E13               	movwf	lcdplotpixel2@blank+1,c
  3900  006B1C  0E01               	movlw	1
  3901  006B1E  6E12               	movwf	lcdplotpixel2@blank,c
  3902  006B20  0102               	movlb	2	; () banked
  3903  006B22  510C               	movf	main@a& (0+255),w,b
  3904  006B24  EC83  F023         	call	_lcdplotpixel2
  3905  006B28                     l91:
  3906                           
  3907                           ;main.c: 293: }
  3908                           ;main.c: 295: lcdplotpixel2(a,32-cur2_y_new,0);
  3909  006B28  0100               	movlb	0	; () banked
  3910  006B2A  51F4               	movf	main@cur2_y_new& (0+255),w,b
  3911  006B2C  0800               	sublw	0
  3912  006B2E  0F20               	addlw	32
  3913  006B30  6E11               	movwf	lcdplotpixel2@ry,c
  3914  006B32  0E00               	movlw	0
  3915  006B34  6E13               	movwf	lcdplotpixel2@blank+1,c
  3916  006B36  0E00               	movlw	0
  3917  006B38  6E12               	movwf	lcdplotpixel2@blank,c
  3918  006B3A  0102               	movlb	2	; () banked
  3919  006B3C  510C               	movf	main@a& (0+255),w,b
  3920  006B3E  EC83  F023         	call	_lcdplotpixel2
  3921  006B42  0102               	movlb	2	; () banked
  3922  006B44  4B0C               	infsnz	main@a& (0+255),f,b
  3923  006B46  2B0D               	incf	(main@a+1)& (0+255),f,b
  3924                           
  3925                           ; BSR set to: 2
  3926  006B48  0102               	movlb	2	; () banked
  3927  006B4A  BF0D               	btfsc	(main@a+1)& (0+255),7,b
  3928  006B4C  D762               	goto	l4843
  3929  006B4E  0102               	movlb	2	; () banked
  3930  006B50  510D               	movf	(main@a+1)& (0+255),w,b
  3931  006B52  E101               	bnz	u5550
  3932  006B54  D757               	goto	L2
  3933  006B56                     u5550:
  3934  006B56                     l90:
  3935                           
  3936                           ; BSR set to: 2
  3937                           ;main.c: 296: }
  3938                           ;main.c: 297: cur2_y = cur2_y_new;
  3939  006B56  C0F4  F21D         	movff	main@cur2_y_new,main@cur2_y
  3940  006B5A  C0F5  F21E         	movff	main@cur2_y_new+1,main@cur2_y+1
  3941                           
  3942                           ; BSR set to: 2
  3943                           ;main.c: 299: for (int i = 70; i < 128; i++)
  3944  006B5E  0E00               	movlw	0
  3945  006B60  0100               	movlb	0	; () banked
  3946  006B62  6FF9               	movwf	(main@i_326+1)& (0+255),b
  3947  006B64  0E46               	movlw	70
  3948  006B66  6FF8               	movwf	main@i_326& (0+255),b
  3949  006B68                     l4863:
  3950                           
  3951                           ; BSR set to: 0
  3952  006B68  0100               	movlb	0	; () banked
  3953  006B6A  BFF9               	btfsc	(main@i_326+1)& (0+255),7,b
  3954  006B6C  D008               	goto	l4867
  3955  006B6E  0100               	movlb	0	; () banked
  3956  006B70  51F9               	movf	(main@i_326+1)& (0+255),w,b
  3957  006B72  E112               	bnz	l4873
  3958  006B74  0E80               	movlw	128
  3959  006B76  0100               	movlb	0	; () banked
  3960  006B78  5DF8               	subwf	main@i_326& (0+255),w,b
  3961  006B7A  B0D8               	btfsc	status,0,c
  3962  006B7C  D00D               	goto	l4873
  3963  006B7E                     l4867:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;main.c: 300: {
  3967                           ;main.c: 301: lcdplotpixel2(i,0,-1);
  3968  006B7E  0E00               	movlw	0
  3969  006B80  6E11               	movwf	lcdplotpixel2@ry,c
  3970  006B82  0EFF               	movlw	255
  3971  006B84  6E13               	movwf	lcdplotpixel2@blank+1,c
  3972  006B86  6812               	setf	lcdplotpixel2@blank,c
  3973  006B88  0100               	movlb	0	; () banked
  3974  006B8A  51F8               	movf	main@i_326& (0+255),w,b
  3975  006B8C  EC83  F023         	call	_lcdplotpixel2
  3976  006B90  0100               	movlb	0	; () banked
  3977  006B92  4BF8               	infsnz	main@i_326& (0+255),f,b
  3978  006B94  2BF9               	incf	(main@i_326+1)& (0+255),f,b
  3979  006B96  D7E8               	goto	l4863
  3980  006B98                     l4873:
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main.c: 302: }
  3984                           ;main.c: 303: xyaxis();
  3985  006B98  ECDD  F022         	call	_xyaxis	;wreg free
  3986  006B9C                     l4875:
  3987                           
  3988                           ;main.c: 304: }
  3989                           ;main.c: 306: float delta = abs(cur1_y-cur2_y) * y_div;
  3990  006B9C  C21D  F05A         	movff	main@cur2_y,??_main
  3991  006BA0  C21E  F05B         	movff	main@cur2_y+1,??_main+1
  3992  006BA4  1E5A               	comf	??_main,f,c
  3993  006BA6  1E5B               	comf	??_main+1,f,c
  3994  006BA8  4A5A               	infsnz	??_main,f,c
  3995  006BAA  2A5B               	incf	??_main+1,f,c
  3996  006BAC  0102               	movlb	2	; () banked
  3997  006BAE  511B               	movf	main@cur1_y& (0+255),w,b
  3998  006BB0  245A               	addwf	??_main,w,c
  3999  006BB2  6E01               	movwf	abs@a,c
  4000  006BB4  0102               	movlb	2	; () banked
  4001  006BB6  511C               	movf	(main@cur1_y+1)& (0+255),w,b
  4002  006BB8  205B               	addwfc	??_main+1,w,c
  4003  006BBA  6E02               	movwf	abs@a+1,c
  4004  006BBC  ECC0  F01C         	call	_abs	;wreg free
  4005  006BC0  C001  F015         	movff	?_abs,___awtoft@c
  4006  006BC4  C002  F016         	movff	?_abs+1,___awtoft@c+1
  4007  006BC8  ECEA  F01C         	call	___awtoft	;wreg free
  4008  006BCC  C015  F019         	movff	?___awtoft,___ftmul@f1
  4009  006BD0  C016  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  4010  006BD4  C017  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  4011  006BD8  C204  F01C         	movff	main@y_div,___ftmul@f2
  4012  006BDC  C205  F01D         	movff	main@y_div+1,___ftmul@f2+1
  4013  006BE0  C206  F01E         	movff	main@y_div+2,___ftmul@f2+2
  4014  006BE4  EC36  F021         	call	___ftmul	;wreg free
  4015  006BE8  C019  F0EA         	movff	?___ftmul,main@delta
  4016  006BEC  C01A  F0EB         	movff	?___ftmul+1,main@delta+1
  4017  006BF0  C01B  F0EC         	movff	?___ftmul+2,main@delta+2
  4018                           
  4019                           ;main.c: 307: char buf[10];
  4020                           ;main.c: 308: if (delta >= 1)
  4021  006BF4  C0EA  F001         	movff	main@delta,___ftge@ff1
  4022  006BF8  C0EB  F002         	movff	main@delta+1,___ftge@ff1+1
  4023  006BFC  C0EC  F003         	movff	main@delta+2,___ftge@ff1+2
  4024  006C00  0E00               	movlw	0
  4025  006C02  6E04               	movwf	___ftge@ff2,c
  4026  006C04  0E80               	movlw	128
  4027  006C06  6E05               	movwf	___ftge@ff2+1,c
  4028  006C08  0E3F               	movlw	63
  4029  006C0A  6E06               	movwf	___ftge@ff2+2,c
  4030  006C0C  ECAA  F01F         	call	___ftge	;wreg free
  4031  006C10  A0D8               	btfss	status,0,c
  4032  006C12  D011               	goto	l4881
  4033                           
  4034                           ;main.c: 309: {
  4035                           ;main.c: 310: sprintf(buf, "%.2fV", delta);
  4036  006C14  0EAC               	movlw	low main@buf
  4037  006C16  6E4D               	movwf	sprintf@sp,c
  4038  006C18  0E00               	movlw	high main@buf
  4039  006C1A  6E4E               	movwf	sprintf@sp+1,c
  4040  006C1C  0EF8               	movlw	low STR_1
  4041  006C1E  6E4F               	movwf	sprintf@f,c
  4042  006C20  0E7F               	movlw	high STR_1
  4043  006C22  6E50               	movwf	sprintf@f+1,c
  4044  006C24  C0EA  F051         	movff	main@delta,?_sprintf+4
  4045  006C28  C0EB  F052         	movff	main@delta+1,?_sprintf+5
  4046  006C2C  C0EC  F053         	movff	main@delta+2,?_sprintf+6
  4047  006C30  EC19  F02E         	call	_sprintf	;wreg free
  4048                           
  4049                           ;main.c: 311: }
  4050  006C34  D024               	goto	l4885
  4051  006C36                     l4881:
  4052                           
  4053                           ;main.c: 312: else
  4054                           ;main.c: 313: {
  4055                           ;main.c: 314: sprintf(buf, "%.2fmV", delta*1000);
  4056  006C36  C0EA  F019         	movff	main@delta,___ftmul@f1
  4057  006C3A  C0EB  F01A         	movff	main@delta+1,___ftmul@f1+1
  4058  006C3E  C0EC  F01B         	movff	main@delta+2,___ftmul@f1+2
  4059  006C42  0E00               	movlw	0
  4060  006C44  6E1C               	movwf	___ftmul@f2,c
  4061  006C46  0E7A               	movlw	122
  4062  006C48  6E1D               	movwf	___ftmul@f2+1,c
  4063  006C4A  0E44               	movlw	68
  4064  006C4C  6E1E               	movwf	___ftmul@f2+2,c
  4065  006C4E  EC36  F021         	call	___ftmul	;wreg free
  4066  006C52  C019  F0D9         	movff	?___ftmul,_main$1197
  4067  006C56  C01A  F0DA         	movff	?___ftmul+1,_main$1197+1
  4068  006C5A  C01B  F0DB         	movff	?___ftmul+2,_main$1197+2
  4069                           
  4070                           ;main.c: 312: else
  4071                           ;main.c: 313: {
  4072                           ;main.c: 314: sprintf(buf, "%.2fmV", delta*1000);
  4073  006C5E  0EAC               	movlw	low main@buf
  4074  006C60  6E4D               	movwf	sprintf@sp,c
  4075  006C62  0E00               	movlw	high main@buf
  4076  006C64  6E4E               	movwf	sprintf@sp+1,c
  4077  006C66  0EF1               	movlw	low STR_2
  4078  006C68  6E4F               	movwf	sprintf@f,c
  4079  006C6A  0E7F               	movlw	high STR_2
  4080  006C6C  6E50               	movwf	sprintf@f+1,c
  4081  006C6E  C0D9  F051         	movff	_main$1197,?_sprintf+4
  4082  006C72  C0DA  F052         	movff	_main$1197+1,?_sprintf+5
  4083  006C76  C0DB  F053         	movff	_main$1197+2,?_sprintf+6
  4084  006C7A  EC19  F02E         	call	_sprintf	;wreg free
  4085  006C7E                     l4885:
  4086                           
  4087                           ;main.c: 315: }
  4088                           ;main.c: 317: LCDpage(1,0);
  4089  006C7E  0E00               	movlw	0
  4090  006C80  6E0F               	movwf	LCDpage@page,c
  4091  006C82  0E01               	movlw	1
  4092  006C84  EC89  F01D         	call	_LCDpage
  4093                           
  4094                           ;main.c: 318: LCDstring(3,buf);
  4095  006C88  0EAC               	movlw	low main@buf
  4096  006C8A  6E2D               	movwf	LCDstring@buffer,c
  4097  006C8C  0E00               	movlw	high main@buf
  4098  006C8E  6E2E               	movwf	LCDstring@buffer+1,c
  4099  006C90  0E03               	movlw	3
  4100  006C92  ECA9  F02B         	call	_LCDstring
  4101                           
  4102                           ;main.c: 319: }
  4103  006C96  D37F               	goto	l5037
  4104  006C98                     l4889:
  4105                           
  4106                           ;main.c: 321: else
  4107                           ;main.c: 322: {
  4108                           ;main.c: 324: if (cur1_y != 0 || cur2_y != 0)
  4109  006C98  0102               	movlb	2	; () banked
  4110  006C9A  511B               	movf	main@cur1_y& (0+255),w,b
  4111  006C9C  0102               	movlb	2	; () banked
  4112  006C9E  111C               	iorwf	(main@cur1_y+1)& (0+255),w,b
  4113  006CA0  A4D8               	btfss	status,2,c
  4114  006CA2  D006               	goto	l4893
  4115                           
  4116                           ; BSR set to: 2
  4117  006CA4  0102               	movlb	2	; () banked
  4118  006CA6  511D               	movf	main@cur2_y& (0+255),w,b
  4119  006CA8  0102               	movlb	2	; () banked
  4120  006CAA  111E               	iorwf	(main@cur2_y+1)& (0+255),w,b
  4121  006CAC  B4D8               	btfsc	status,2,c
  4122  006CAE  D0C6               	goto	l4925
  4123  006CB0                     l4893:
  4124                           
  4125                           ; BSR set to: 2
  4126                           ;main.c: 325: {
  4127                           ;main.c: 327: for (int i = 0; i < 128; i++)
  4128  006CB0  0E00               	movlw	0
  4129  006CB2  0102               	movlb	2	; () banked
  4130  006CB4  6F13               	movwf	(main@i_332+1)& (0+255),b
  4131  006CB6  0E00               	movlw	0
  4132  006CB8  6F12               	movwf	main@i_332& (0+255),b
  4133                           
  4134                           ; BSR set to: 2
  4135  006CBA  0102               	movlb	2	; () banked
  4136  006CBC  BF13               	btfsc	(main@i_332+1)& (0+255),7,b
  4137  006CBE  D00A               	goto	l4899
  4138  006CC0  0102               	movlb	2	; () banked
  4139  006CC2  5113               	movf	(main@i_332+1)& (0+255),w,b
  4140  006CC4  E106               	bnz	u5610
  4141  006CC6  0E80               	movlw	128
  4142  006CC8  0102               	movlb	2	; () banked
  4143  006CCA  5D12               	subwf	main@i_332& (0+255),w,b
  4144  006CCC  B0D8               	btfsc	status,0,c
  4145  006CCE  D0AB               	goto	l4921
  4146  006CD0  D001               	goto	l4899
  4147  006CD2                     u5610:
  4148                           
  4149                           ; BSR set to: 2
  4150  006CD2  D0A9               	goto	l4921
  4151  006CD4                     l4899:
  4152                           
  4153                           ; BSR set to: 2
  4154                           ;main.c: 328: {
  4155                           ;main.c: 330: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  4156  006CD4  0E00               	movlw	0
  4157  006CD6  6E35               	movwf	___ftadd@f2,c
  4158  006CD8  0E20               	movlw	32
  4159  006CDA  6E36               	movwf	___ftadd@f2+1,c
  4160  006CDC  0EC0               	movlw	192
  4161  006CDE  6E37               	movwf	___ftadd@f2+2,c
  4162  006CE0  0E00               	movlw	0
  4163  006CE2  6E1C               	movwf	___ftmul@f2,c
  4164  006CE4  0EA0               	movlw	160
  4165  006CE6  6E1D               	movwf	___ftmul@f2+1,c
  4166  006CE8  0E3B               	movlw	59
  4167  006CEA  6E1E               	movwf	___ftmul@f2+2,c
  4168  006CEC  90D8               	bcf	status,0,c
  4169  006CEE  0102               	movlb	2	; () banked
  4170  006CF0  3512               	rlcf	main@i_332& (0+255),w,b
  4171  006CF2  6ED9               	movwf	fsr2l,c
  4172  006CF4  0102               	movlb	2	; () banked
  4173  006CF6  3513               	rlcf	(main@i_332+1)& (0+255),w,b
  4174  006CF8  6EDA               	movwf	fsr2h,c
  4175  006CFA  0E00               	movlw	low main@data
  4176  006CFC  26D9               	addwf	fsr2l,f,c
  4177  006CFE  0E01               	movlw	high main@data
  4178  006D00  22DA               	addwfc	fsr2h,f,c
  4179  006D02  CFDE F009          	movff	postinc2,___lwtoft@c
  4180  006D06  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  4181  006D0A  EC89  F01C         	call	___lwtoft	;wreg free
  4182  006D0E  C009  F019         	movff	?___lwtoft,___ftmul@f1
  4183  006D12  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  4184  006D16  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  4185  006D1A  EC36  F021         	call	___ftmul	;wreg free
  4186  006D1E  C019  F032         	movff	?___ftmul,___ftadd@f1
  4187  006D22  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  4188  006D26  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  4189  006D2A  EC2D  F024         	call	___ftadd	;wreg free
  4190  006D2E  C032  F223         	movff	?___ftadd,_main$1195
  4191  006D32  C033  F224         	movff	?___ftadd+1,_main$1195+1
  4192  006D36  C034  F225         	movff	?___ftadd+2,_main$1195+2
  4193                           
  4194                           ;main.c: 328: {
  4195                           ;main.c: 330: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  4196  006D3A  C216  F01C         	movff	main@amplitude,___ftmul@f2
  4197  006D3E  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  4198  006D42  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  4199  006D46  C223  F019         	movff	_main$1195,___ftmul@f1
  4200  006D4A  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  4201  006D4E  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  4202  006D52  EC36  F021         	call	___ftmul	;wreg free
  4203  006D56  C019  F226         	movff	?___ftmul,_main$1196
  4204  006D5A  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  4205  006D5E  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  4206                           
  4207                           ;main.c: 328: {
  4208                           ;main.c: 330: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  4209  006D62  0E00               	movlw	0
  4210  006D64  6E1C               	movwf	___ftmul@f2,c
  4211  006D66  0E00               	movlw	0
  4212  006D68  6E1D               	movwf	___ftmul@f2+1,c
  4213  006D6A  0E40               	movlw	64
  4214  006D6C  6E1E               	movwf	___ftmul@f2+2,c
  4215  006D6E  C226  F019         	movff	_main$1196,___ftmul@f1
  4216  006D72  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  4217  006D76  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  4218  006D7A  EC36  F021         	call	___ftmul	;wreg free
  4219  006D7E  C019  F03E         	movff	?___ftmul,___fttol@f1
  4220  006D82  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  4221  006D86  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  4222  006D8A  ECBC  F020         	call	___fttol	;wreg free
  4223  006D8E  C03E  F0D2         	movff	?___fttol,main@y_333
  4224  006D92  C03F  F0D3         	movff	?___fttol+1,main@y_333+1
  4225                           
  4226                           ;main.c: 331: if (y != cur1_y && i != 64)
  4227  006D96  0102               	movlb	2	; () banked
  4228  006D98  511B               	movf	main@cur1_y& (0+255),w,b
  4229  006D9A  0100               	movlb	0	; () banked
  4230  006D9C  19D2               	xorwf	main@y_333& (0+255),w,b
  4231  006D9E  E106               	bnz	u5620
  4232  006DA0  0102               	movlb	2	; () banked
  4233  006DA2  511C               	movf	(main@cur1_y+1)& (0+255),w,b
  4234  006DA4  0100               	movlb	0	; () banked
  4235  006DA6  19D3               	xorwf	(main@y_333+1)& (0+255),w,b
  4236  006DA8  B4D8               	btfsc	status,2,c
  4237  006DAA  D014               	goto	l4911
  4238  006DAC                     u5620:
  4239                           
  4240                           ; BSR set to: 0
  4241  006DAC  0E40               	movlw	64
  4242  006DAE  0102               	movlb	2	; () banked
  4243  006DB0  1912               	xorwf	main@i_332& (0+255),w,b
  4244  006DB2  0102               	movlb	2	; () banked
  4245  006DB4  1113               	iorwf	(main@i_332+1)& (0+255),w,b
  4246  006DB6  B4D8               	btfsc	status,2,c
  4247  006DB8  D00D               	goto	l4911
  4248                           
  4249                           ; BSR set to: 2
  4250                           ;main.c: 332: {
  4251                           ;main.c: 333: lcdplotpixel2(i,32-cur1_y,1);
  4252  006DBA  0102               	movlb	2	; () banked
  4253  006DBC  511B               	movf	main@cur1_y& (0+255),w,b
  4254  006DBE  0800               	sublw	0
  4255  006DC0  0F20               	addlw	32
  4256  006DC2  6E11               	movwf	lcdplotpixel2@ry,c
  4257  006DC4  0E00               	movlw	0
  4258  006DC6  6E13               	movwf	lcdplotpixel2@blank+1,c
  4259  006DC8  0E01               	movlw	1
  4260  006DCA  6E12               	movwf	lcdplotpixel2@blank,c
  4261  006DCC  0102               	movlb	2	; () banked
  4262  006DCE  5112               	movf	main@i_332& (0+255),w,b
  4263  006DD0  EC83  F023         	call	_lcdplotpixel2
  4264  006DD4                     l4911:
  4265                           
  4266                           ;main.c: 334: }
  4267                           ;main.c: 335: if (y != cur2_y && i != 64)
  4268  006DD4  0102               	movlb	2	; () banked
  4269  006DD6  511D               	movf	main@cur2_y& (0+255),w,b
  4270  006DD8  0100               	movlb	0	; () banked
  4271  006DDA  19D2               	xorwf	main@y_333& (0+255),w,b
  4272  006DDC  E106               	bnz	u5640
  4273  006DDE  0102               	movlb	2	; () banked
  4274  006DE0  511E               	movf	(main@cur2_y+1)& (0+255),w,b
  4275  006DE2  0100               	movlb	0	; () banked
  4276  006DE4  19D3               	xorwf	(main@y_333+1)& (0+255),w,b
  4277  006DE6  B4D8               	btfsc	status,2,c
  4278  006DE8  D014               	goto	l4917
  4279  006DEA                     u5640:
  4280                           
  4281                           ; BSR set to: 0
  4282  006DEA  0E40               	movlw	64
  4283  006DEC  0102               	movlb	2	; () banked
  4284  006DEE  1912               	xorwf	main@i_332& (0+255),w,b
  4285  006DF0  0102               	movlb	2	; () banked
  4286  006DF2  1113               	iorwf	(main@i_332+1)& (0+255),w,b
  4287  006DF4  B4D8               	btfsc	status,2,c
  4288  006DF6  D00D               	goto	l4917
  4289                           
  4290                           ; BSR set to: 2
  4291                           ;main.c: 336: {
  4292                           ;main.c: 337: lcdplotpixel2(i,32-cur2_y,1);
  4293  006DF8  0102               	movlb	2	; () banked
  4294  006DFA  511D               	movf	main@cur2_y& (0+255),w,b
  4295  006DFC  0800               	sublw	0
  4296  006DFE  0F20               	addlw	32
  4297  006E00  6E11               	movwf	lcdplotpixel2@ry,c
  4298  006E02  0E00               	movlw	0
  4299  006E04  6E13               	movwf	lcdplotpixel2@blank+1,c
  4300  006E06  0E01               	movlw	1
  4301  006E08  6E12               	movwf	lcdplotpixel2@blank,c
  4302  006E0A  0102               	movlb	2	; () banked
  4303  006E0C  5112               	movf	main@i_332& (0+255),w,b
  4304  006E0E  EC83  F023         	call	_lcdplotpixel2
  4305  006E12                     l4917:
  4306  006E12  0102               	movlb	2	; () banked
  4307  006E14  4B12               	infsnz	main@i_332& (0+255),f,b
  4308  006E16  2B13               	incf	(main@i_332+1)& (0+255),f,b
  4309                           
  4310                           ; BSR set to: 2
  4311  006E18  0102               	movlb	2	; () banked
  4312  006E1A  BF13               	btfsc	(main@i_332+1)& (0+255),7,b
  4313  006E1C  D75B               	goto	l4899
  4314  006E1E  0102               	movlb	2	; () banked
  4315  006E20  5113               	movf	(main@i_332+1)& (0+255),w,b
  4316  006E22  E101               	bnz	l4921
  4317  006E24  D750               	goto	L3
  4318  006E26                     l4921:
  4319                           
  4320                           ; BSR set to: 2
  4321                           ;main.c: 338: }
  4322                           ;main.c: 339: }
  4323                           ;main.c: 340: cur1_y = cur2_y = 0;
  4324  006E26  0E00               	movlw	0
  4325  006E28  0102               	movlb	2	; () banked
  4326  006E2A  6F1E               	movwf	(main@cur2_y+1)& (0+255),b
  4327  006E2C  0E00               	movlw	0
  4328  006E2E  6F1D               	movwf	main@cur2_y& (0+255),b
  4329  006E30  C21D  F21B         	movff	main@cur2_y,main@cur1_y
  4330  006E34  C21E  F21C         	movff	main@cur2_y+1,main@cur1_y+1
  4331                           
  4332                           ; BSR set to: 2
  4333                           ;main.c: 341: xyaxis();
  4334  006E38  ECDD  F022         	call	_xyaxis	;wreg free
  4335  006E3C                     l4925:
  4336                           
  4337                           ;main.c: 342: }
  4338                           ;main.c: 344: int cur1_x_new = 0;
  4339  006E3C  0E00               	movlw	0
  4340  006E3E  0100               	movlb	0	; () banked
  4341  006E40  6FFB               	movwf	(main@cur1_x_new+1)& (0+255),b
  4342  006E42  0E00               	movlw	0
  4343  006E44  6FFA               	movwf	main@cur1_x_new& (0+255),b
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;main.c: 345: int cur2_x_new = 0;
  4347  006E46  0E00               	movlw	0
  4348  006E48  0100               	movlb	0	; () banked
  4349  006E4A  6FFD               	movwf	(main@cur2_x_new+1)& (0+255),b
  4350  006E4C  0E00               	movlw	0
  4351  006E4E  6FFC               	movwf	main@cur2_x_new& (0+255),b
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;main.c: 348: ADCON0 = 0b00001101;
  4355  006E50  0E0D               	movlw	13
  4356  006E52  6EC2               	movwf	4034,c	;volatile
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;main.c: 350: ADCON0bits.GO = 1;
  4360  006E54  82C2               	bsf	4034,1,c	;volatile
  4361  006E56                     l104:
  4362  006E56  B2C2               	btfsc	4034,1,c	;volatile
  4363  006E58  D7FE               	goto	l104
  4364                           
  4365                           ;main.c: 356: int s_val = ((unsigned int)(ADRESH << 8) | ADRESL);
  4366  006E5A  50C4               	movf	4036,w,c	;volatile
  4367  006E5C  6E5A               	movwf	??_main& (0+255),c
  4368  006E5E  50C3               	movf	4035,w,c	;volatile
  4369  006E60  0100               	movlb	0	; () banked
  4370  006E62  6FE0               	movwf	main@s_val_336& (0+255),b
  4371  006E64  C05A  F0E1         	movff	??_main,main@s_val_336+1
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;main.c: 358: cur1_x_new = ((1024/2)-s_val)/8;
  4375  006E68  C0E0  F05A         	movff	main@s_val_336,??_main
  4376  006E6C  C0E1  F05B         	movff	main@s_val_336+1,??_main+1
  4377  006E70  1E5A               	comf	??_main,f,c
  4378  006E72  1E5B               	comf	??_main+1,f,c
  4379  006E74  4A5A               	infsnz	??_main,f,c
  4380  006E76  2A5B               	incf	??_main+1,f,c
  4381  006E78  0E00               	movlw	0
  4382  006E7A  245A               	addwf	??_main,w,c
  4383  006E7C  6E07               	movwf	___awdiv@dividend,c
  4384  006E7E  0E02               	movlw	2
  4385  006E80  205B               	addwfc	??_main+1,w,c
  4386  006E82  6E08               	movwf	___awdiv@dividend+1,c
  4387  006E84  0E00               	movlw	0
  4388  006E86  6E0A               	movwf	___awdiv@divisor+1,c
  4389  006E88  0E08               	movlw	8
  4390  006E8A  6E09               	movwf	___awdiv@divisor,c
  4391  006E8C  EC20  F01F         	call	___awdiv	;wreg free
  4392  006E90  C007  F0FA         	movff	?___awdiv,main@cur1_x_new
  4393  006E94  C008  F0FB         	movff	?___awdiv+1,main@cur1_x_new+1
  4394                           
  4395                           ;main.c: 360: if (cur1_x_new != cur1_x)
  4396  006E98  0102               	movlb	2	; () banked
  4397  006E9A  511F               	movf	main@cur1_x& (0+255),w,b
  4398  006E9C  0100               	movlb	0	; () banked
  4399  006E9E  19FA               	xorwf	main@cur1_x_new& (0+255),w,b
  4400  006EA0  E106               	bnz	u5680
  4401  006EA2  0102               	movlb	2	; () banked
  4402  006EA4  5120               	movf	(main@cur1_x+1)& (0+255),w,b
  4403  006EA6  0100               	movlb	0	; () banked
  4404  006EA8  19FB               	xorwf	(main@cur1_x_new+1)& (0+255),w,b
  4405  006EAA  B4D8               	btfsc	status,2,c
  4406  006EAC  D0E7               	goto	l4977
  4407  006EAE                     u5680:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;main.c: 361: {
  4411                           ;main.c: 364: int y = (int)(((((float)5/1024)*data[64-cur1_x])-2.50f)*amplitude*2);
  4412  006EAE  0E00               	movlw	0
  4413  006EB0  6E35               	movwf	___ftadd@f2,c
  4414  006EB2  0E20               	movlw	32
  4415  006EB4  6E36               	movwf	___ftadd@f2+1,c
  4416  006EB6  0EC0               	movlw	192
  4417  006EB8  6E37               	movwf	___ftadd@f2+2,c
  4418  006EBA  0E00               	movlw	0
  4419  006EBC  6E1C               	movwf	___ftmul@f2,c
  4420  006EBE  0EA0               	movlw	160
  4421  006EC0  6E1D               	movwf	___ftmul@f2+1,c
  4422  006EC2  0E3B               	movlw	59
  4423  006EC4  6E1E               	movwf	___ftmul@f2+2,c
  4424  006EC6  C21F  F05A         	movff	main@cur1_x,??_main
  4425  006ECA  C220  F05B         	movff	main@cur1_x+1,??_main+1
  4426  006ECE  1E5A               	comf	??_main,f,c
  4427  006ED0  1E5B               	comf	??_main+1,f,c
  4428  006ED2  4A5A               	infsnz	??_main,f,c
  4429  006ED4  2A5B               	incf	??_main+1,f,c
  4430  006ED6  90D8               	bcf	status,0,c
  4431  006ED8  365A               	rlcf	??_main,f,c
  4432  006EDA  365B               	rlcf	??_main+1,f,c
  4433  006EDC  0E80               	movlw	128
  4434  006EDE  265A               	addwf	??_main,f,c
  4435  006EE0  0E00               	movlw	0
  4436  006EE2  225B               	addwfc	??_main+1,f,c
  4437  006EE4  0E00               	movlw	low main@data
  4438  006EE6  245A               	addwf	??_main,w,c
  4439  006EE8  6ED9               	movwf	fsr2l,c
  4440  006EEA  0E01               	movlw	high main@data
  4441  006EEC  205B               	addwfc	??_main+1,w,c
  4442  006EEE  6EDA               	movwf	fsr2h,c
  4443  006EF0  CFDE F009          	movff	postinc2,___lwtoft@c
  4444  006EF4  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  4445  006EF8  EC89  F01C         	call	___lwtoft	;wreg free
  4446  006EFC  C009  F019         	movff	?___lwtoft,___ftmul@f1
  4447  006F00  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  4448  006F04  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  4449  006F08  EC36  F021         	call	___ftmul	;wreg free
  4450  006F0C  C019  F032         	movff	?___ftmul,___ftadd@f1
  4451  006F10  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  4452  006F14  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  4453  006F18  EC2D  F024         	call	___ftadd	;wreg free
  4454  006F1C  C032  F223         	movff	?___ftadd,_main$1195
  4455  006F20  C033  F224         	movff	?___ftadd+1,_main$1195+1
  4456  006F24  C034  F225         	movff	?___ftadd+2,_main$1195+2
  4457                           
  4458                           ;main.c: 361: {
  4459                           ;main.c: 364: int y = (int)(((((float)5/1024)*data[64-cur1_x])-2.50f)*amplitude*2);
  4460  006F28  C216  F01C         	movff	main@amplitude,___ftmul@f2
  4461  006F2C  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  4462  006F30  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  4463  006F34  C223  F019         	movff	_main$1195,___ftmul@f1
  4464  006F38  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  4465  006F3C  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  4466  006F40  EC36  F021         	call	___ftmul	;wreg free
  4467  006F44  C019  F226         	movff	?___ftmul,_main$1196
  4468  006F48  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  4469  006F4C  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  4470                           
  4471                           ;main.c: 361: {
  4472                           ;main.c: 364: int y = (int)(((((float)5/1024)*data[64-cur1_x])-2.50f)*amplitude*2);
  4473  006F50  0E00               	movlw	0
  4474  006F52  6E1C               	movwf	___ftmul@f2,c
  4475  006F54  0E00               	movlw	0
  4476  006F56  6E1D               	movwf	___ftmul@f2+1,c
  4477  006F58  0E40               	movlw	64
  4478  006F5A  6E1E               	movwf	___ftmul@f2+2,c
  4479  006F5C  C226  F019         	movff	_main$1196,___ftmul@f1
  4480  006F60  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  4481  006F64  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  4482  006F68  EC36  F021         	call	___ftmul	;wreg free
  4483  006F6C  C019  F03E         	movff	?___ftmul,___fttol@f1
  4484  006F70  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  4485  006F74  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  4486  006F78  ECBC  F020         	call	___fttol	;wreg free
  4487  006F7C  C03E  F0C8         	movff	?___fttol,main@y_337
  4488  006F80  C03F  F0C9         	movff	?___fttol+1,main@y_337+1
  4489                           
  4490                           ;main.c: 365: for (int i = 8; i < 56; i++)
  4491  006F84  0E00               	movlw	0
  4492  006F86  0102               	movlb	2	; () banked
  4493  006F88  6F0F               	movwf	(main@i_338+1)& (0+255),b
  4494  006F8A  0E08               	movlw	8
  4495  006F8C  6F0E               	movwf	main@i_338& (0+255),b
  4496                           
  4497                           ; BSR set to: 2
  4498  006F8E  0102               	movlb	2	; () banked
  4499  006F90  BF0F               	btfsc	(main@i_338+1)& (0+255),7,b
  4500  006F92  D008               	goto	l4951
  4501  006F94  0102               	movlb	2	; () banked
  4502  006F96  510F               	movf	(main@i_338+1)& (0+255),w,b
  4503  006F98  E14E               	bnz	l109
  4504  006F9A  0E38               	movlw	56
  4505  006F9C  0102               	movlb	2	; () banked
  4506  006F9E  5D0E               	subwf	main@i_338& (0+255),w,b
  4507  006FA0  B0D8               	btfsc	status,0,c
  4508  006FA2  D049               	goto	l109
  4509  006FA4                     l4951:
  4510                           
  4511                           ; BSR set to: 2
  4512                           ;main.c: 366: {
  4513                           ;main.c: 367: if (i != (32-y) && i != 32 && cur1_x != cur2_x )
  4514  006FA4  C0C8  F05A         	movff	main@y_337,??_main
  4515  006FA8  C0C9  F05B         	movff	main@y_337+1,??_main+1
  4516  006FAC  1E5A               	comf	??_main,f,c
  4517  006FAE  1E5B               	comf	??_main+1,f,c
  4518  006FB0  4A5A               	infsnz	??_main,f,c
  4519  006FB2  2A5B               	incf	??_main+1,f,c
  4520  006FB4  0E20               	movlw	32
  4521  006FB6  265A               	addwf	??_main,f,c
  4522  006FB8  0E00               	movlw	0
  4523  006FBA  225B               	addwfc	??_main+1,f,c
  4524  006FBC  0102               	movlb	2	; () banked
  4525  006FBE  510E               	movf	main@i_338& (0+255),w,b
  4526  006FC0  185A               	xorwf	??_main,w,c
  4527  006FC2  E105               	bnz	u5700
  4528  006FC4  0102               	movlb	2	; () banked
  4529  006FC6  510F               	movf	(main@i_338+1)& (0+255),w,b
  4530  006FC8  185B               	xorwf	??_main+1,w,c
  4531  006FCA  B4D8               	btfsc	status,2,c
  4532  006FCC  D01E               	goto	l110
  4533  006FCE                     u5700:
  4534                           
  4535                           ; BSR set to: 2
  4536  006FCE  0E20               	movlw	32
  4537  006FD0  0102               	movlb	2	; () banked
  4538  006FD2  190E               	xorwf	main@i_338& (0+255),w,b
  4539  006FD4  0102               	movlb	2	; () banked
  4540  006FD6  110F               	iorwf	(main@i_338+1)& (0+255),w,b
  4541  006FD8  B4D8               	btfsc	status,2,c
  4542  006FDA  D017               	goto	l110
  4543                           
  4544                           ; BSR set to: 2
  4545  006FDC  0102               	movlb	2	; () banked
  4546  006FDE  5121               	movf	main@cur2_x& (0+255),w,b
  4547  006FE0  0102               	movlb	2	; () banked
  4548  006FE2  191F               	xorwf	main@cur1_x& (0+255),w,b
  4549  006FE4  E106               	bnz	u5720
  4550  006FE6  0102               	movlb	2	; () banked
  4551  006FE8  5122               	movf	(main@cur2_x+1)& (0+255),w,b
  4552  006FEA  0102               	movlb	2	; () banked
  4553  006FEC  1920               	xorwf	(main@cur1_x+1)& (0+255),w,b
  4554  006FEE  B4D8               	btfsc	status,2,c
  4555  006FF0  D00C               	goto	l110
  4556  006FF2                     u5720:
  4557                           
  4558                           ; BSR set to: 2
  4559                           ;main.c: 368: {
  4560                           ;main.c: 369: lcdplotpixel2(64-cur1_x,i,1);
  4561  006FF2  C20E  F011         	movff	main@i_338,lcdplotpixel2@ry
  4562  006FF6  0E00               	movlw	0
  4563  006FF8  6E13               	movwf	lcdplotpixel2@blank+1,c
  4564  006FFA  0E01               	movlw	1
  4565  006FFC  6E12               	movwf	lcdplotpixel2@blank,c
  4566  006FFE  0102               	movlb	2	; () banked
  4567  007000  511F               	movf	main@cur1_x& (0+255),w,b
  4568  007002  0800               	sublw	0
  4569  007004  0F40               	addlw	64
  4570  007006  EC83  F023         	call	_lcdplotpixel2
  4571  00700A                     l110:
  4572                           
  4573                           ;main.c: 370: }
  4574                           ;main.c: 372: lcdplotpixel2(64-cur1_x_new,i,0);
  4575  00700A  C20E  F011         	movff	main@i_338,lcdplotpixel2@ry
  4576  00700E  0E00               	movlw	0
  4577  007010  6E13               	movwf	lcdplotpixel2@blank+1,c
  4578  007012  0E00               	movlw	0
  4579  007014  6E12               	movwf	lcdplotpixel2@blank,c
  4580  007016  0100               	movlb	0	; () banked
  4581  007018  51FA               	movf	main@cur1_x_new& (0+255),w,b
  4582  00701A  0800               	sublw	0
  4583  00701C  0F40               	addlw	64
  4584  00701E  EC83  F023         	call	_lcdplotpixel2
  4585  007022  0102               	movlb	2	; () banked
  4586  007024  4B0E               	infsnz	main@i_338& (0+255),f,b
  4587  007026  2B0F               	incf	(main@i_338+1)& (0+255),f,b
  4588                           
  4589                           ; BSR set to: 2
  4590  007028  0102               	movlb	2	; () banked
  4591  00702A  BF0F               	btfsc	(main@i_338+1)& (0+255),7,b
  4592  00702C  D7BB               	goto	l4951
  4593  00702E  0102               	movlb	2	; () banked
  4594  007030  510F               	movf	(main@i_338+1)& (0+255),w,b
  4595  007032  E101               	bnz	u5730
  4596  007034  D7B2               	goto	L4
  4597  007036                     u5730:
  4598  007036                     l109:
  4599                           
  4600                           ; BSR set to: 2
  4601                           ;main.c: 373: }
  4602                           ;main.c: 374: cur1_x = cur1_x_new;
  4603  007036  C0FA  F21F         	movff	main@cur1_x_new,main@cur1_x
  4604  00703A  C0FB  F220         	movff	main@cur1_x_new+1,main@cur1_x+1
  4605                           
  4606                           ; BSR set to: 2
  4607                           ;main.c: 376: for (int i = 70; i < 128; i++)
  4608  00703E  0E00               	movlw	0
  4609  007040  0100               	movlb	0	; () banked
  4610  007042  6FFF               	movwf	(main@i_339+1)& (0+255),b
  4611  007044  0E46               	movlw	70
  4612  007046  6FFE               	movwf	main@i_339& (0+255),b
  4613  007048                     l4965:
  4614                           
  4615                           ; BSR set to: 0
  4616  007048  0100               	movlb	0	; () banked
  4617  00704A  BFFF               	btfsc	(main@i_339+1)& (0+255),7,b
  4618  00704C  D008               	goto	l4969
  4619  00704E  0100               	movlb	0	; () banked
  4620  007050  51FF               	movf	(main@i_339+1)& (0+255),w,b
  4621  007052  E112               	bnz	l4975
  4622  007054  0E80               	movlw	128
  4623  007056  0100               	movlb	0	; () banked
  4624  007058  5DFE               	subwf	main@i_339& (0+255),w,b
  4625  00705A  B0D8               	btfsc	status,0,c
  4626  00705C  D00D               	goto	l4975
  4627  00705E                     l4969:
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;main.c: 377: {
  4631                           ;main.c: 378: lcdplotpixel2(i,1,-1);
  4632  00705E  0E01               	movlw	1
  4633  007060  6E11               	movwf	lcdplotpixel2@ry,c
  4634  007062  0EFF               	movlw	255
  4635  007064  6E13               	movwf	lcdplotpixel2@blank+1,c
  4636  007066  6812               	setf	lcdplotpixel2@blank,c
  4637  007068  0100               	movlb	0	; () banked
  4638  00706A  51FE               	movf	main@i_339& (0+255),w,b
  4639  00706C  EC83  F023         	call	_lcdplotpixel2
  4640  007070  0100               	movlb	0	; () banked
  4641  007072  4BFE               	infsnz	main@i_339& (0+255),f,b
  4642  007074  2BFF               	incf	(main@i_339+1)& (0+255),f,b
  4643  007076  D7E8               	goto	l4965
  4644  007078                     l4975:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;main.c: 379: }
  4648                           ;main.c: 380: xyaxis();
  4649  007078  ECDD  F022         	call	_xyaxis	;wreg free
  4650  00707C                     l4977:
  4651                           
  4652                           ;main.c: 381: }
  4653                           ;main.c: 383: ADCON0=0b00010001;
  4654  00707C  0E11               	movlw	17
  4655  00707E  6EC2               	movwf	4034,c	;volatile
  4656                           
  4657                           ;main.c: 385: ADCON0bits.GO=1;
  4658  007080  82C2               	bsf	4034,1,c	;volatile
  4659  007082                     l113:
  4660  007082  B2C2               	btfsc	4034,1,c	;volatile
  4661  007084  D7FE               	goto	l113
  4662                           
  4663                           ;main.c: 391: int s_val = ((unsigned int)(ADRESH << 8) | ADRESL);
  4664  007086  50C4               	movf	4036,w,c	;volatile
  4665  007088  6E5A               	movwf	??_main& (0+255),c
  4666  00708A  50C3               	movf	4035,w,c	;volatile
  4667  00708C  0100               	movlb	0	; () banked
  4668  00708E  6FE0               	movwf	main@s_val_336& (0+255),b
  4669  007090  C05A  F0E1         	movff	??_main,main@s_val_336+1
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;main.c: 393: cur2_x_new = ((1024/2)-s_val)/8;
  4673  007094  C0E0  F05A         	movff	main@s_val_336,??_main
  4674  007098  C0E1  F05B         	movff	main@s_val_336+1,??_main+1
  4675  00709C  1E5A               	comf	??_main,f,c
  4676  00709E  1E5B               	comf	??_main+1,f,c
  4677  0070A0  4A5A               	infsnz	??_main,f,c
  4678  0070A2  2A5B               	incf	??_main+1,f,c
  4679  0070A4  0E00               	movlw	0
  4680  0070A6  245A               	addwf	??_main,w,c
  4681  0070A8  6E07               	movwf	___awdiv@dividend,c
  4682  0070AA  0E02               	movlw	2
  4683  0070AC  205B               	addwfc	??_main+1,w,c
  4684  0070AE  6E08               	movwf	___awdiv@dividend+1,c
  4685  0070B0  0E00               	movlw	0
  4686  0070B2  6E0A               	movwf	___awdiv@divisor+1,c
  4687  0070B4  0E08               	movlw	8
  4688  0070B6  6E09               	movwf	___awdiv@divisor,c
  4689  0070B8  EC20  F01F         	call	___awdiv	;wreg free
  4690  0070BC  C007  F0FC         	movff	?___awdiv,main@cur2_x_new
  4691  0070C0  C008  F0FD         	movff	?___awdiv+1,main@cur2_x_new+1
  4692                           
  4693                           ;main.c: 395: if (cur2_x_new != cur2_x)
  4694  0070C4  0102               	movlb	2	; () banked
  4695  0070C6  5121               	movf	main@cur2_x& (0+255),w,b
  4696  0070C8  0100               	movlb	0	; () banked
  4697  0070CA  19FC               	xorwf	main@cur2_x_new& (0+255),w,b
  4698  0070CC  E106               	bnz	u5770
  4699  0070CE  0102               	movlb	2	; () banked
  4700  0070D0  5122               	movf	(main@cur2_x+1)& (0+255),w,b
  4701  0070D2  0100               	movlb	0	; () banked
  4702  0070D4  19FD               	xorwf	(main@cur2_x_new+1)& (0+255),w,b
  4703  0070D6  B4D8               	btfsc	status,2,c
  4704  0070D8  D0E7               	goto	l5025
  4705  0070DA                     u5770:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;main.c: 396: {
  4709                           ;main.c: 398: int y = (int)(((((float)5/1024)*data[64-cur2_x])-2.50f)*amplitude*2);
  4710  0070DA  0E00               	movlw	0
  4711  0070DC  6E35               	movwf	___ftadd@f2,c
  4712  0070DE  0E20               	movlw	32
  4713  0070E0  6E36               	movwf	___ftadd@f2+1,c
  4714  0070E2  0EC0               	movlw	192
  4715  0070E4  6E37               	movwf	___ftadd@f2+2,c
  4716  0070E6  0E00               	movlw	0
  4717  0070E8  6E1C               	movwf	___ftmul@f2,c
  4718  0070EA  0EA0               	movlw	160
  4719  0070EC  6E1D               	movwf	___ftmul@f2+1,c
  4720  0070EE  0E3B               	movlw	59
  4721  0070F0  6E1E               	movwf	___ftmul@f2+2,c
  4722  0070F2  C221  F05A         	movff	main@cur2_x,??_main
  4723  0070F6  C222  F05B         	movff	main@cur2_x+1,??_main+1
  4724  0070FA  1E5A               	comf	??_main,f,c
  4725  0070FC  1E5B               	comf	??_main+1,f,c
  4726  0070FE  4A5A               	infsnz	??_main,f,c
  4727  007100  2A5B               	incf	??_main+1,f,c
  4728  007102  90D8               	bcf	status,0,c
  4729  007104  365A               	rlcf	??_main,f,c
  4730  007106  365B               	rlcf	??_main+1,f,c
  4731  007108  0E80               	movlw	128
  4732  00710A  265A               	addwf	??_main,f,c
  4733  00710C  0E00               	movlw	0
  4734  00710E  225B               	addwfc	??_main+1,f,c
  4735  007110  0E00               	movlw	low main@data
  4736  007112  245A               	addwf	??_main,w,c
  4737  007114  6ED9               	movwf	fsr2l,c
  4738  007116  0E01               	movlw	high main@data
  4739  007118  205B               	addwfc	??_main+1,w,c
  4740  00711A  6EDA               	movwf	fsr2h,c
  4741  00711C  CFDE F009          	movff	postinc2,___lwtoft@c
  4742  007120  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  4743  007124  EC89  F01C         	call	___lwtoft	;wreg free
  4744  007128  C009  F019         	movff	?___lwtoft,___ftmul@f1
  4745  00712C  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  4746  007130  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  4747  007134  EC36  F021         	call	___ftmul	;wreg free
  4748  007138  C019  F032         	movff	?___ftmul,___ftadd@f1
  4749  00713C  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  4750  007140  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  4751  007144  EC2D  F024         	call	___ftadd	;wreg free
  4752  007148  C032  F223         	movff	?___ftadd,_main$1195
  4753  00714C  C033  F224         	movff	?___ftadd+1,_main$1195+1
  4754  007150  C034  F225         	movff	?___ftadd+2,_main$1195+2
  4755                           
  4756                           ;main.c: 396: {
  4757                           ;main.c: 398: int y = (int)(((((float)5/1024)*data[64-cur2_x])-2.50f)*amplitude*2);
  4758  007154  C216  F01C         	movff	main@amplitude,___ftmul@f2
  4759  007158  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  4760  00715C  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  4761  007160  C223  F019         	movff	_main$1195,___ftmul@f1
  4762  007164  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  4763  007168  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  4764  00716C  EC36  F021         	call	___ftmul	;wreg free
  4765  007170  C019  F226         	movff	?___ftmul,_main$1196
  4766  007174  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  4767  007178  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  4768                           
  4769                           ;main.c: 396: {
  4770                           ;main.c: 398: int y = (int)(((((float)5/1024)*data[64-cur2_x])-2.50f)*amplitude*2);
  4771  00717C  0E00               	movlw	0
  4772  00717E  6E1C               	movwf	___ftmul@f2,c
  4773  007180  0E00               	movlw	0
  4774  007182  6E1D               	movwf	___ftmul@f2+1,c
  4775  007184  0E40               	movlw	64
  4776  007186  6E1E               	movwf	___ftmul@f2+2,c
  4777  007188  C226  F019         	movff	_main$1196,___ftmul@f1
  4778  00718C  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  4779  007190  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  4780  007194  EC36  F021         	call	___ftmul	;wreg free
  4781  007198  C019  F03E         	movff	?___ftmul,___fttol@f1
  4782  00719C  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  4783  0071A0  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  4784  0071A4  ECBC  F020         	call	___fttol	;wreg free
  4785  0071A8  C03E  F0CA         	movff	?___fttol,main@y_340
  4786  0071AC  C03F  F0CB         	movff	?___fttol+1,main@y_340+1
  4787                           
  4788                           ;main.c: 399: for (int i = 8; i < 56; i++)
  4789  0071B0  0E00               	movlw	0
  4790  0071B2  0102               	movlb	2	; () banked
  4791  0071B4  6F11               	movwf	(main@i_341+1)& (0+255),b
  4792  0071B6  0E08               	movlw	8
  4793  0071B8  6F10               	movwf	main@i_341& (0+255),b
  4794                           
  4795                           ; BSR set to: 2
  4796  0071BA  0102               	movlb	2	; () banked
  4797  0071BC  BF11               	btfsc	(main@i_341+1)& (0+255),7,b
  4798  0071BE  D008               	goto	l4999
  4799  0071C0  0102               	movlb	2	; () banked
  4800  0071C2  5111               	movf	(main@i_341+1)& (0+255),w,b
  4801  0071C4  E14E               	bnz	l118
  4802  0071C6  0E38               	movlw	56
  4803  0071C8  0102               	movlb	2	; () banked
  4804  0071CA  5D10               	subwf	main@i_341& (0+255),w,b
  4805  0071CC  B0D8               	btfsc	status,0,c
  4806  0071CE  D049               	goto	l118
  4807  0071D0                     l4999:
  4808                           
  4809                           ; BSR set to: 2
  4810                           ;main.c: 400: {
  4811                           ;main.c: 402: if (i != (32-y) && i != 32 && cur2_x != cur1_x )
  4812  0071D0  C0CA  F05A         	movff	main@y_340,??_main
  4813  0071D4  C0CB  F05B         	movff	main@y_340+1,??_main+1
  4814  0071D8  1E5A               	comf	??_main,f,c
  4815  0071DA  1E5B               	comf	??_main+1,f,c
  4816  0071DC  4A5A               	infsnz	??_main,f,c
  4817  0071DE  2A5B               	incf	??_main+1,f,c
  4818  0071E0  0E20               	movlw	32
  4819  0071E2  265A               	addwf	??_main,f,c
  4820  0071E4  0E00               	movlw	0
  4821  0071E6  225B               	addwfc	??_main+1,f,c
  4822  0071E8  0102               	movlb	2	; () banked
  4823  0071EA  5110               	movf	main@i_341& (0+255),w,b
  4824  0071EC  185A               	xorwf	??_main,w,c
  4825  0071EE  E105               	bnz	u5790
  4826  0071F0  0102               	movlb	2	; () banked
  4827  0071F2  5111               	movf	(main@i_341+1)& (0+255),w,b
  4828  0071F4  185B               	xorwf	??_main+1,w,c
  4829  0071F6  B4D8               	btfsc	status,2,c
  4830  0071F8  D01E               	goto	l119
  4831  0071FA                     u5790:
  4832                           
  4833                           ; BSR set to: 2
  4834  0071FA  0E20               	movlw	32
  4835  0071FC  0102               	movlb	2	; () banked
  4836  0071FE  1910               	xorwf	main@i_341& (0+255),w,b
  4837  007200  0102               	movlb	2	; () banked
  4838  007202  1111               	iorwf	(main@i_341+1)& (0+255),w,b
  4839  007204  B4D8               	btfsc	status,2,c
  4840  007206  D017               	goto	l119
  4841                           
  4842                           ; BSR set to: 2
  4843  007208  0102               	movlb	2	; () banked
  4844  00720A  511F               	movf	main@cur1_x& (0+255),w,b
  4845  00720C  0102               	movlb	2	; () banked
  4846  00720E  1921               	xorwf	main@cur2_x& (0+255),w,b
  4847  007210  E106               	bnz	u5810
  4848  007212  0102               	movlb	2	; () banked
  4849  007214  5120               	movf	(main@cur1_x+1)& (0+255),w,b
  4850  007216  0102               	movlb	2	; () banked
  4851  007218  1922               	xorwf	(main@cur2_x+1)& (0+255),w,b
  4852  00721A  B4D8               	btfsc	status,2,c
  4853  00721C  D00C               	goto	l119
  4854  00721E                     u5810:
  4855                           
  4856                           ; BSR set to: 2
  4857                           ;main.c: 403: {
  4858                           ;main.c: 404: lcdplotpixel2(64-cur2_x,i,1);
  4859  00721E  C210  F011         	movff	main@i_341,lcdplotpixel2@ry
  4860  007222  0E00               	movlw	0
  4861  007224  6E13               	movwf	lcdplotpixel2@blank+1,c
  4862  007226  0E01               	movlw	1
  4863  007228  6E12               	movwf	lcdplotpixel2@blank,c
  4864  00722A  0102               	movlb	2	; () banked
  4865  00722C  5121               	movf	main@cur2_x& (0+255),w,b
  4866  00722E  0800               	sublw	0
  4867  007230  0F40               	addlw	64
  4868  007232  EC83  F023         	call	_lcdplotpixel2
  4869  007236                     l119:
  4870                           
  4871                           ;main.c: 405: }
  4872                           ;main.c: 407: lcdplotpixel2(64-cur2_x_new,i,0);
  4873  007236  C210  F011         	movff	main@i_341,lcdplotpixel2@ry
  4874  00723A  0E00               	movlw	0
  4875  00723C  6E13               	movwf	lcdplotpixel2@blank+1,c
  4876  00723E  0E00               	movlw	0
  4877  007240  6E12               	movwf	lcdplotpixel2@blank,c
  4878  007242  0100               	movlb	0	; () banked
  4879  007244  51FC               	movf	main@cur2_x_new& (0+255),w,b
  4880  007246  0800               	sublw	0
  4881  007248  0F40               	addlw	64
  4882  00724A  EC83  F023         	call	_lcdplotpixel2
  4883  00724E  0102               	movlb	2	; () banked
  4884  007250  4B10               	infsnz	main@i_341& (0+255),f,b
  4885  007252  2B11               	incf	(main@i_341+1)& (0+255),f,b
  4886                           
  4887                           ; BSR set to: 2
  4888  007254  0102               	movlb	2	; () banked
  4889  007256  BF11               	btfsc	(main@i_341+1)& (0+255),7,b
  4890  007258  D7BB               	goto	l4999
  4891  00725A  0102               	movlb	2	; () banked
  4892  00725C  5111               	movf	(main@i_341+1)& (0+255),w,b
  4893  00725E  E101               	bnz	u5820
  4894  007260  D7B2               	goto	L5
  4895  007262                     u5820:
  4896  007262                     l118:
  4897                           
  4898                           ; BSR set to: 2
  4899                           ;main.c: 408: }
  4900                           ;main.c: 409: cur2_x = cur2_x_new;
  4901  007262  C0FC  F221         	movff	main@cur2_x_new,main@cur2_x
  4902  007266  C0FD  F222         	movff	main@cur2_x_new+1,main@cur2_x+1
  4903                           
  4904                           ; BSR set to: 2
  4905                           ;main.c: 411: for (int i = 70; i < 128; i++)
  4906  00726A  0E00               	movlw	0
  4907  00726C  0102               	movlb	2	; () banked
  4908  00726E  6F01               	movwf	(main@i_342+1)& (0+255),b
  4909  007270  0E46               	movlw	70
  4910  007272  6F00               	movwf	main@i_342& (0+255),b
  4911  007274                     l5013:
  4912                           
  4913                           ; BSR set to: 2
  4914  007274  0102               	movlb	2	; () banked
  4915  007276  BF01               	btfsc	(main@i_342+1)& (0+255),7,b
  4916  007278  D008               	goto	l5017
  4917  00727A  0102               	movlb	2	; () banked
  4918  00727C  5101               	movf	(main@i_342+1)& (0+255),w,b
  4919  00727E  E112               	bnz	l5023
  4920  007280  0E80               	movlw	128
  4921  007282  0102               	movlb	2	; () banked
  4922  007284  5D00               	subwf	main@i_342& (0+255),w,b
  4923  007286  B0D8               	btfsc	status,0,c
  4924  007288  D00D               	goto	l5023
  4925  00728A                     l5017:
  4926                           
  4927                           ; BSR set to: 2
  4928                           ;main.c: 412: {
  4929                           ;main.c: 413: lcdplotpixel2(i,0,-1);
  4930  00728A  0E00               	movlw	0
  4931  00728C  6E11               	movwf	lcdplotpixel2@ry,c
  4932  00728E  0EFF               	movlw	255
  4933  007290  6E13               	movwf	lcdplotpixel2@blank+1,c
  4934  007292  6812               	setf	lcdplotpixel2@blank,c
  4935  007294  0102               	movlb	2	; () banked
  4936  007296  5100               	movf	main@i_342& (0+255),w,b
  4937  007298  EC83  F023         	call	_lcdplotpixel2
  4938  00729C  0102               	movlb	2	; () banked
  4939  00729E  4B00               	infsnz	main@i_342& (0+255),f,b
  4940  0072A0  2B01               	incf	(main@i_342+1)& (0+255),f,b
  4941  0072A2  D7E8               	goto	l5013
  4942  0072A4                     l5023:
  4943                           
  4944                           ; BSR set to: 2
  4945                           ;main.c: 414: }
  4946                           ;main.c: 415: xyaxis();
  4947  0072A4  ECDD  F022         	call	_xyaxis	;wreg free
  4948  0072A8                     l5025:
  4949                           
  4950                           ;main.c: 416: }
  4951                           ;main.c: 418: float delta = abs(cur1_x-cur2_x) * s_time;
  4952  0072A8  C221  F05A         	movff	main@cur2_x,??_main
  4953  0072AC  C222  F05B         	movff	main@cur2_x+1,??_main+1
  4954  0072B0  1E5A               	comf	??_main,f,c
  4955  0072B2  1E5B               	comf	??_main+1,f,c
  4956  0072B4  4A5A               	infsnz	??_main,f,c
  4957  0072B6  2A5B               	incf	??_main+1,f,c
  4958  0072B8  0102               	movlb	2	; () banked
  4959  0072BA  511F               	movf	main@cur1_x& (0+255),w,b
  4960  0072BC  245A               	addwf	??_main,w,c
  4961  0072BE  6E01               	movwf	abs@a,c
  4962  0072C0  0102               	movlb	2	; () banked
  4963  0072C2  5120               	movf	(main@cur1_x+1)& (0+255),w,b
  4964  0072C4  205B               	addwfc	??_main+1,w,c
  4965  0072C6  6E02               	movwf	abs@a+1,c
  4966  0072C8  ECC0  F01C         	call	_abs	;wreg free
  4967  0072CC  C001  F015         	movff	?_abs,___awtoft@c
  4968  0072D0  C002  F016         	movff	?_abs+1,___awtoft@c+1
  4969  0072D4  ECEA  F01C         	call	___awtoft	;wreg free
  4970  0072D8  C015  F019         	movff	?___awtoft,___ftmul@f1
  4971  0072DC  C016  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  4972  0072E0  C017  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  4973  0072E4  C207  F01C         	movff	main@s_time,___ftmul@f2
  4974  0072E8  C208  F01D         	movff	main@s_time+1,___ftmul@f2+1
  4975  0072EC  C209  F01E         	movff	main@s_time+2,___ftmul@f2+2
  4976  0072F0  EC36  F021         	call	___ftmul	;wreg free
  4977  0072F4  C019  F0ED         	movff	?___ftmul,main@delta_343
  4978  0072F8  C01A  F0EE         	movff	?___ftmul+1,main@delta_343+1
  4979  0072FC  C01B  F0EF         	movff	?___ftmul+2,main@delta_343+2
  4980                           
  4981                           ;main.c: 419: char buf[10];
  4982                           ;main.c: 420: if (delta >= 1000)
  4983  007300  C0ED  F001         	movff	main@delta_343,___ftge@ff1
  4984  007304  C0EE  F002         	movff	main@delta_343+1,___ftge@ff1+1
  4985  007308  C0EF  F003         	movff	main@delta_343+2,___ftge@ff1+2
  4986  00730C  0E00               	movlw	0
  4987  00730E  6E04               	movwf	___ftge@ff2,c
  4988  007310  0E7A               	movlw	122
  4989  007312  6E05               	movwf	___ftge@ff2+1,c
  4990  007314  0E44               	movlw	68
  4991  007316  6E06               	movwf	___ftge@ff2+2,c
  4992  007318  ECAA  F01F         	call	___ftge	;wreg free
  4993  00731C  A0D8               	btfss	status,0,c
  4994  00731E  D01F               	goto	l5031
  4995                           
  4996                           ;main.c: 421: {
  4997                           ;main.c: 422: sprintf(buf, "%.2fmS", delta/1000);
  4998  007320  0EB6               	movlw	low main@buf_344
  4999  007322  6E4D               	movwf	sprintf@sp,c
  5000  007324  0E00               	movlw	high main@buf_344
  5001  007326  6E4E               	movwf	sprintf@sp+1,c
  5002  007328  0EE3               	movlw	low STR_3
  5003  00732A  6E4F               	movwf	sprintf@f,c
  5004  00732C  0E7F               	movlw	high STR_3
  5005  00732E  6E50               	movwf	sprintf@f+1,c
  5006  007330  C0ED  F019         	movff	main@delta_343,___ftdiv@f1
  5007  007334  C0EE  F01A         	movff	main@delta_343+1,___ftdiv@f1+1
  5008  007338  C0EF  F01B         	movff	main@delta_343+2,___ftdiv@f1+2
  5009  00733C  0E00               	movlw	0
  5010  00733E  6E1C               	movwf	___ftdiv@f2,c
  5011  007340  0E7A               	movlw	122
  5012  007342  6E1D               	movwf	___ftdiv@f2+1,c
  5013  007344  0E44               	movlw	68
  5014  007346  6E1E               	movwf	___ftdiv@f2+2,c
  5015  007348  EC49  F020         	call	___ftdiv	;wreg free
  5016  00734C  C019  F051         	movff	?___ftdiv,?_sprintf+4
  5017  007350  C01A  F052         	movff	?___ftdiv+1,?_sprintf+5
  5018  007354  C01B  F053         	movff	?___ftdiv+2,?_sprintf+6
  5019  007358  EC19  F02E         	call	_sprintf	;wreg free
  5020                           
  5021                           ;main.c: 423: }
  5022  00735C  D010               	goto	l5033
  5023  00735E                     l5031:
  5024                           
  5025                           ;main.c: 424: else
  5026                           ;main.c: 425: {
  5027                           ;main.c: 426: sprintf(buf, "%.2fuS", delta);
  5028  00735E  0EB6               	movlw	low main@buf_344
  5029  007360  6E4D               	movwf	sprintf@sp,c
  5030  007362  0E00               	movlw	high main@buf_344
  5031  007364  6E4E               	movwf	sprintf@sp+1,c
  5032  007366  0EEA               	movlw	low STR_4
  5033  007368  6E4F               	movwf	sprintf@f,c
  5034  00736A  0E7F               	movlw	high STR_4
  5035  00736C  6E50               	movwf	sprintf@f+1,c
  5036  00736E  C0ED  F051         	movff	main@delta_343,?_sprintf+4
  5037  007372  C0EE  F052         	movff	main@delta_343+1,?_sprintf+5
  5038  007376  C0EF  F053         	movff	main@delta_343+2,?_sprintf+6
  5039  00737A  EC19  F02E         	call	_sprintf	;wreg free
  5040  00737E                     l5033:
  5041                           
  5042                           ;main.c: 427: }
  5043                           ;main.c: 429: LCDpage(1,0);
  5044  00737E  0E00               	movlw	0
  5045  007380  6E0F               	movwf	LCDpage@page,c
  5046  007382  0E01               	movlw	1
  5047  007384  EC89  F01D         	call	_LCDpage
  5048                           
  5049                           ;main.c: 430: LCDstring(3,buf);
  5050  007388  0EB6               	movlw	low main@buf_344
  5051  00738A  6E2D               	movwf	LCDstring@buffer,c
  5052  00738C  0E00               	movlw	high main@buf_344
  5053  00738E  6E2E               	movwf	LCDstring@buffer+1,c
  5054  007390  0E03               	movlw	3
  5055  007392  ECA9  F02B         	call	_LCDstring
  5056  007396                     l5037:
  5057                           
  5058                           ;main.c: 431: }
  5059                           ;main.c: 432: for (int i = 0; i < 10; i++)
  5060  007396  0E00               	movlw	0
  5061  007398  0100               	movlb	0	; () banked
  5062  00739A  6FE3               	movwf	(main@i_347+1)& (0+255),b
  5063  00739C  0E00               	movlw	0
  5064  00739E  6FE2               	movwf	main@i_347& (0+255),b
  5065                           
  5066                           ; BSR set to: 0
  5067  0073A0  0100               	movlb	0	; () banked
  5068  0073A2  BFE3               	btfsc	(main@i_347+1)& (0+255),7,b
  5069  0073A4  D008               	goto	l5043
  5070  0073A6  0100               	movlb	0	; () banked
  5071  0073A8  51E3               	movf	(main@i_347+1)& (0+255),w,b
  5072  0073AA  E116               	bnz	l125
  5073  0073AC  0E0A               	movlw	10
  5074  0073AE  0100               	movlb	0	; () banked
  5075  0073B0  5DE2               	subwf	main@i_347& (0+255),w,b
  5076  0073B2  B0D8               	btfsc	status,0,c
  5077  0073B4  D011               	goto	l125
  5078  0073B6                     l5043:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;main.c: 433: {
  5082                           ;main.c: 434: _delay((unsigned long)((10)*(40000000/4000.0)));
  5083  0073B6  0E82               	movlw	130
  5084  0073B8  6E5A               	movwf	??_main& (0+255),c
  5085  0073BA  0EDE               	movlw	222
  5086  0073BC                     u6067:
  5087  0073BC  2EE8               	decfsz	wreg,f,c
  5088  0073BE  D7FE               	goto	u6067
  5089  0073C0  2E5A               	decfsz	??_main& (0+255),f,c
  5090  0073C2  D7FC               	goto	u6067
  5091  0073C4  0100               	movlb	0	; () banked
  5092  0073C6  4BE2               	infsnz	main@i_347& (0+255),f,b
  5093  0073C8  2BE3               	incf	(main@i_347+1)& (0+255),f,b
  5094  0073CA  0100               	movlb	0	; () banked
  5095  0073CC  BFE3               	btfsc	(main@i_347+1)& (0+255),7,b
  5096  0073CE  D7F3               	goto	l5043
  5097  0073D0  0100               	movlb	0	; () banked
  5098  0073D2  51E3               	movf	(main@i_347+1)& (0+255),w,b
  5099  0073D4  E101               	bnz	u5870
  5100  0073D6  D7EA               	goto	L6
  5101  0073D8                     u5870:
  5102  0073D8                     l125:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;main.c: 435: }
  5106                           ;main.c: 437: if (PORTBbits.RB0 == 1)
  5107  0073D8  A081               	btfss	3969,0,c	;volatile
  5108  0073DA  D005               	goto	l5049
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;main.c: 438: {
  5112                           ;main.c: 439: freeze = 0;
  5113  0073DC  0E00               	movlw	0
  5114  0073DE  0100               	movlb	0	; () banked
  5115  0073E0  6FCF               	movwf	(main@freeze+1)& (0+255),b
  5116  0073E2  0E00               	movlw	0
  5117  0073E4  6FCE               	movwf	main@freeze& (0+255),b
  5118  0073E6                     l5049:
  5119  0073E6  0100               	movlb	0	; () banked
  5120  0073E8  51CE               	movf	main@freeze& (0+255),w,b
  5121  0073EA  0100               	movlb	0	; () banked
  5122  0073EC  11CF               	iorwf	(main@freeze+1)& (0+255),w,b
  5123  0073EE  A4D8               	btfss	status,2,c
  5124  0073F0  EF67  F032         	goto	l67
  5125  0073F4                     l5051:
  5126                           
  5127                           ;main.c: 440: }
  5128                           ;main.c: 441: }
  5129                           ;main.c: 442: }
  5130                           ;main.c: 446: ADCON0=0x01;
  5131  0073F4  0E01               	movlw	1
  5132  0073F6  6EC2               	movwf	4034,c	;volatile
  5133                           
  5134                           ;main.c: 448: ADCON0bits.GO=1;
  5135  0073F8  82C2               	bsf	4034,1,c	;volatile
  5136  0073FA                     l128:
  5137  0073FA  B2C2               	btfsc	4034,1,c	;volatile
  5138  0073FC  D7FE               	goto	l128
  5139                           
  5140                           ;main.c: 452: amplitude = ((float)5/1024)*((unsigned int)(ADRESH << 8) | ADRESL);
  5141  0073FE  50C4               	movf	4036,w,c	;volatile
  5142  007400  6E5A               	movwf	??_main& (0+255),c
  5143  007402  50C3               	movf	4035,w,c	;volatile
  5144  007404  6E09               	movwf	___lwtoft@c,c
  5145  007406  C05A  F00A         	movff	??_main,___lwtoft@c+1
  5146  00740A  EC89  F01C         	call	___lwtoft	;wreg free
  5147  00740E  C009  F019         	movff	?___lwtoft,___ftmul@f1
  5148  007412  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  5149  007416  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  5150  00741A  0E00               	movlw	0
  5151  00741C  6E1C               	movwf	___ftmul@f2,c
  5152  00741E  0EA0               	movlw	160
  5153  007420  6E1D               	movwf	___ftmul@f2+1,c
  5154  007422  0E3B               	movlw	59
  5155  007424  6E1E               	movwf	___ftmul@f2+2,c
  5156  007426  EC36  F021         	call	___ftmul	;wreg free
  5157  00742A  C019  F216         	movff	?___ftmul,main@amplitude
  5158  00742E  C01A  F217         	movff	?___ftmul+1,main@amplitude+1
  5159  007432  C01B  F218         	movff	?___ftmul+2,main@amplitude+2
  5160                           
  5161                           ;main.c: 456: ADCON0 = 0b00000101;
  5162  007436  0E05               	movlw	5
  5163  007438  6EC2               	movwf	4034,c	;volatile
  5164                           
  5165                           ;main.c: 458: ADCON0bits.GO=1;
  5166  00743A  82C2               	bsf	4034,1,c	;volatile
  5167  00743C                     l131:
  5168  00743C  B2C2               	btfsc	4034,1,c	;volatile
  5169  00743E  D7FE               	goto	l131
  5170                           
  5171                           ;main.c: 462: int s_time_pot = ((unsigned int)(ADRESH << 8) | ADRESL);
  5172  007440  50C4               	movf	4036,w,c	;volatile
  5173  007442  6E5A               	movwf	??_main& (0+255),c
  5174  007444  50C3               	movf	4035,w,c	;volatile
  5175  007446  0100               	movlb	0	; () banked
  5176  007448  6FD4               	movwf	main@s_time_pot_348& (0+255),b
  5177  00744A  C05A  F0D5         	movff	??_main,main@s_time_pot_348+1
  5178                           
  5179                           ;main.c: 467: ADCON0=0b00001001;
  5180  00744E  0E09               	movlw	9
  5181  007450  6EC2               	movwf	4034,c	;volatile
  5182                           
  5183                           ;main.c: 471: for (int i = 0; i < 128; i++)
  5184  007452  0E00               	movlw	0
  5185  007454  0102               	movlb	2	; () banked
  5186  007456  6F03               	movwf	(main@i_349+1)& (0+255),b
  5187  007458  0E00               	movlw	0
  5188  00745A  6F02               	movwf	main@i_349& (0+255),b
  5189  00745C                     l5063:
  5190                           
  5191                           ; BSR set to: 2
  5192  00745C  0102               	movlb	2	; () banked
  5193  00745E  BF03               	btfsc	(main@i_349+1)& (0+255),7,b
  5194  007460  D008               	goto	l134
  5195  007462  0102               	movlb	2	; () banked
  5196  007464  5103               	movf	(main@i_349+1)& (0+255),w,b
  5197  007466  E13C               	bnz	l5079
  5198  007468  0E80               	movlw	128
  5199  00746A  0102               	movlb	2	; () banked
  5200  00746C  5D02               	subwf	main@i_349& (0+255),w,b
  5201  00746E  B0D8               	btfsc	status,0,c
  5202  007470  D037               	goto	l5079
  5203  007472                     l134:
  5204                           
  5205                           ; BSR set to: 2
  5206                           ;main.c: 472: {
  5207                           ;main.c: 474: ADCON0bits.GO=1;
  5208  007472  82C2               	bsf	4034,1,c	;volatile
  5209  007474                     l136:
  5210  007474  B2C2               	btfsc	4034,1,c	;volatile
  5211  007476  D7FE               	goto	l136
  5212                           
  5213                           ;main.c: 477: data[i] = ((unsigned int)(ADRESH << 8) | ADRESL);
  5214  007478  50C3               	movf	4035,w,c	;volatile
  5215  00747A  CFC4 F05A          	movff	4036,??_main	;volatile
  5216  00747E  6A5B               	clrf	(??_main+1)& (0+255),c
  5217  007480  C05A  F05B         	movff	??_main,??_main+1
  5218  007484  6A5A               	clrf	??_main,c
  5219  007486  125A               	iorwf	??_main,f,c
  5220  007488  0E00               	movlw	0
  5221  00748A  125B               	iorwf	??_main+1,f,c
  5222  00748C  90D8               	bcf	status,0,c
  5223  00748E  0102               	movlb	2	; () banked
  5224  007490  3502               	rlcf	main@i_349& (0+255),w,b
  5225  007492  6ED9               	movwf	fsr2l,c
  5226  007494  0102               	movlb	2	; () banked
  5227  007496  3503               	rlcf	(main@i_349+1)& (0+255),w,b
  5228  007498  6EDA               	movwf	fsr2h,c
  5229  00749A  0E00               	movlw	low main@data
  5230  00749C  26D9               	addwf	fsr2l,f,c
  5231  00749E  0E01               	movlw	high main@data
  5232  0074A0  22DA               	addwfc	fsr2h,f,c
  5233  0074A2  C05A  FFDE         	movff	??_main,postinc2
  5234  0074A6  C05B  FFDD         	movff	??_main+1,postdec2
  5235                           
  5236                           ; BSR set to: 2
  5237                           ;main.c: 480: for (int j = 0; j <s_time_pot; j++)
  5238  0074AA  0E00               	movlw	0
  5239  0074AC  0100               	movlb	0	; () banked
  5240  0074AE  6FCD               	movwf	(main@j+1)& (0+255),b
  5241  0074B0  0E00               	movlw	0
  5242  0074B2  6FCC               	movwf	main@j& (0+255),b
  5243  0074B4  D003               	goto	l5073
  5244  0074B6                     l5071:
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;main.c: 481: {
  5248                           ;main.c: 482: ;
  5249  0074B6  0100               	movlb	0	; () banked
  5250  0074B8  4BCC               	infsnz	main@j& (0+255),f,b
  5251  0074BA  2BCD               	incf	(main@j+1)& (0+255),f,b
  5252  0074BC                     l5073:
  5253                           
  5254                           ; BSR set to: 0
  5255  0074BC  0100               	movlb	0	; () banked
  5256  0074BE  51D4               	movf	main@s_time_pot_348& (0+255),w,b
  5257  0074C0  0100               	movlb	0	; () banked
  5258  0074C2  5DCC               	subwf	main@j& (0+255),w,b
  5259  0074C4  0100               	movlb	0	; () banked
  5260  0074C6  51CD               	movf	(main@j+1)& (0+255),w,b
  5261  0074C8  0A80               	xorlw	128
  5262  0074CA  6E5A               	movwf	??_main& (0+255),c
  5263  0074CC  0100               	movlb	0	; () banked
  5264  0074CE  51D5               	movf	(main@s_time_pot_348+1)& (0+255),w,b
  5265  0074D0  0A80               	xorlw	128
  5266  0074D2  585A               	subwfb	??_main& (0+255),w,c
  5267  0074D4  A0D8               	btfss	status,0,c
  5268  0074D6  D7EF               	goto	l5071
  5269                           
  5270                           ; BSR set to: 0
  5271                           
  5272                           ; BSR set to: 0
  5273  0074D8  0102               	movlb	2	; () banked
  5274  0074DA  4B02               	infsnz	main@i_349& (0+255),f,b
  5275  0074DC  2B03               	incf	(main@i_349+1)& (0+255),f,b
  5276  0074DE  D7BE               	goto	l5063
  5277  0074E0                     l5079:
  5278                           
  5279                           ; BSR set to: 2
  5280                           ;main.c: 483: }
  5281                           ;main.c: 484: }
  5282                           ;main.c: 486: char bottom_buf[40];
  5283                           ;main.c: 490: s_time = ( 99+19*(s_time_pot-2))*0.1;
  5284  0074E0  0EFE               	movlw	254
  5285  0074E2  0100               	movlb	0	; () banked
  5286  0074E4  25D4               	addwf	main@s_time_pot_348& (0+255),w,b
  5287  0074E6  6E0F               	movwf	___wmul@multiplier,c
  5288  0074E8  0EFF               	movlw	255
  5289  0074EA  0100               	movlb	0	; () banked
  5290  0074EC  21D5               	addwfc	(main@s_time_pot_348+1)& (0+255),w,b
  5291  0074EE  6E10               	movwf	___wmul@multiplier+1,c
  5292  0074F0  0E00               	movlw	0
  5293  0074F2  6E12               	movwf	___wmul@multiplicand+1,c
  5294  0074F4  0E13               	movlw	19
  5295  0074F6  6E11               	movwf	___wmul@multiplicand,c
  5296  0074F8  ECAD  F01C         	call	___wmul	;wreg free
  5297  0074FC  0E63               	movlw	99
  5298  0074FE  240F               	addwf	?___wmul,w,c
  5299  007500  6E15               	movwf	___awtoft@c,c
  5300  007502  0E00               	movlw	0
  5301  007504  2010               	addwfc	?___wmul+1,w,c
  5302  007506  6E16               	movwf	___awtoft@c+1,c
  5303  007508  ECEA  F01C         	call	___awtoft	;wreg free
  5304  00750C  C015  F019         	movff	?___awtoft,___ftmul@f1
  5305  007510  C016  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  5306  007514  C017  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  5307  007518  0ECD               	movlw	205
  5308  00751A  6E1C               	movwf	___ftmul@f2,c
  5309  00751C  0ECC               	movlw	204
  5310  00751E  6E1D               	movwf	___ftmul@f2+1,c
  5311  007520  0E3D               	movlw	61
  5312  007522  6E1E               	movwf	___ftmul@f2+2,c
  5313  007524  EC36  F021         	call	___ftmul	;wreg free
  5314  007528  C019  F207         	movff	?___ftmul,main@s_time
  5315  00752C  C01A  F208         	movff	?___ftmul+1,main@s_time+1
  5316  007530  C01B  F209         	movff	?___ftmul+2,main@s_time+2
  5317                           
  5318                           ;main.c: 492: if (s_time > 1000)
  5319  007534  0E00               	movlw	0
  5320  007536  6E01               	movwf	___ftge@ff1,c
  5321  007538  0E7A               	movlw	122
  5322  00753A  6E02               	movwf	___ftge@ff1+1,c
  5323  00753C  0E44               	movlw	68
  5324  00753E  6E03               	movwf	___ftge@ff1+2,c
  5325  007540  C207  F004         	movff	main@s_time,___ftge@ff2
  5326  007544  C208  F005         	movff	main@s_time+1,___ftge@ff2+1
  5327  007548  C209  F006         	movff	main@s_time+2,___ftge@ff2+2
  5328  00754C  ECAA  F01F         	call	___ftge	;wreg free
  5329  007550  B0D8               	btfsc	status,0,c
  5330  007552  D01F               	goto	l5085
  5331                           
  5332                           ;main.c: 493: {
  5333                           ;main.c: 494: sprintf(bottom_buf,"%.2f mS/p",s_time/1000);
  5334  007554  0E77               	movlw	low main@bottom_buf
  5335  007556  6E4D               	movwf	sprintf@sp,c
  5336  007558  0E00               	movlw	high main@bottom_buf
  5337  00755A  6E4E               	movwf	sprintf@sp+1,c
  5338  00755C  0EB5               	movlw	low STR_5
  5339  00755E  6E4F               	movwf	sprintf@f,c
  5340  007560  0E7F               	movlw	high STR_5
  5341  007562  6E50               	movwf	sprintf@f+1,c
  5342  007564  C207  F019         	movff	main@s_time,___ftdiv@f1
  5343  007568  C208  F01A         	movff	main@s_time+1,___ftdiv@f1+1
  5344  00756C  C209  F01B         	movff	main@s_time+2,___ftdiv@f1+2
  5345  007570  0E00               	movlw	0
  5346  007572  6E1C               	movwf	___ftdiv@f2,c
  5347  007574  0E7A               	movlw	122
  5348  007576  6E1D               	movwf	___ftdiv@f2+1,c
  5349  007578  0E44               	movlw	68
  5350  00757A  6E1E               	movwf	___ftdiv@f2+2,c
  5351  00757C  EC49  F020         	call	___ftdiv	;wreg free
  5352  007580  C019  F051         	movff	?___ftdiv,?_sprintf+4
  5353  007584  C01A  F052         	movff	?___ftdiv+1,?_sprintf+5
  5354  007588  C01B  F053         	movff	?___ftdiv+2,?_sprintf+6
  5355  00758C  EC19  F02E         	call	_sprintf	;wreg free
  5356                           
  5357                           ;main.c: 495: }
  5358  007590  D010               	goto	l5087
  5359  007592                     l5085:
  5360                           
  5361                           ;main.c: 496: else
  5362                           ;main.c: 497: {
  5363                           ;main.c: 498: sprintf(bottom_buf,"%.2f uS/p",s_time);
  5364  007592  0E77               	movlw	low main@bottom_buf
  5365  007594  6E4D               	movwf	sprintf@sp,c
  5366  007596  0E00               	movlw	high main@bottom_buf
  5367  007598  6E4E               	movwf	sprintf@sp+1,c
  5368  00759A  0EBF               	movlw	low STR_6
  5369  00759C  6E4F               	movwf	sprintf@f,c
  5370  00759E  0E7F               	movlw	high STR_6
  5371  0075A0  6E50               	movwf	sprintf@f+1,c
  5372  0075A2  C207  F051         	movff	main@s_time,?_sprintf+4
  5373  0075A6  C208  F052         	movff	main@s_time+1,?_sprintf+5
  5374  0075AA  C209  F053         	movff	main@s_time+2,?_sprintf+6
  5375  0075AE  EC19  F02E         	call	_sprintf	;wreg free
  5376  0075B2                     l5087:
  5377                           
  5378                           ;main.c: 499: }
  5379                           ;main.c: 502: LCDclear();
  5380  0075B2  EC62  F01F         	call	_LCDclear	;wreg free
  5381                           
  5382                           ;main.c: 503: xyaxis();
  5383  0075B6  ECDD  F022         	call	_xyaxis	;wreg free
  5384                           
  5385                           ;main.c: 506: int i = 0;
  5386  0075BA  0E00               	movlw	0
  5387  0075BC  0102               	movlb	2	; () banked
  5388  0075BE  6F15               	movwf	(main@i_354+1)& (0+255),b
  5389  0075C0  0E00               	movlw	0
  5390  0075C2  6F14               	movwf	main@i_354& (0+255),b
  5391                           
  5392                           ; BSR set to: 2
  5393                           ;main.c: 508: unsigned int min = 1025;
  5394  0075C4  0E04               	movlw	4
  5395  0075C6  0100               	movlb	0	; () banked
  5396  0075C8  6FE5               	movwf	(main@min+1)& (0+255),b
  5397  0075CA  0E01               	movlw	1
  5398  0075CC  6FE4               	movwf	main@min& (0+255),b
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;main.c: 509: unsigned int max = 0;
  5402  0075CE  0E00               	movlw	0
  5403  0075D0  0100               	movlb	0	; () banked
  5404  0075D2  6FE7               	movwf	(main@max+1)& (0+255),b
  5405  0075D4  0E00               	movlw	0
  5406  0075D6  6FE6               	movwf	main@max& (0+255),b
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;main.c: 511: char min_y = 0;
  5410  0075D8  0E00               	movlw	0
  5411  0075DA  0100               	movlb	0	; () banked
  5412  0075DC  6FD0               	movwf	main@min_y& (0+255),b
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;main.c: 512: char max_y = 0;
  5416  0075DE  0E00               	movlw	0
  5417  0075E0  0100               	movlb	0	; () banked
  5418  0075E2  6FD1               	movwf	main@max_y& (0+255),b
  5419                           
  5420                           ;main.c: 513: while (i < 128)
  5421  0075E4  D0C7               	goto	l5123
  5422  0075E6                     l5101:
  5423                           
  5424                           ;main.c: 514: {
  5425                           ;main.c: 515: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  5426  0075E6  0E00               	movlw	0
  5427  0075E8  6E35               	movwf	___ftadd@f2,c
  5428  0075EA  0E20               	movlw	32
  5429  0075EC  6E36               	movwf	___ftadd@f2+1,c
  5430  0075EE  0EC0               	movlw	192
  5431  0075F0  6E37               	movwf	___ftadd@f2+2,c
  5432  0075F2  0E00               	movlw	0
  5433  0075F4  6E1C               	movwf	___ftmul@f2,c
  5434  0075F6  0EA0               	movlw	160
  5435  0075F8  6E1D               	movwf	___ftmul@f2+1,c
  5436  0075FA  0E3B               	movlw	59
  5437  0075FC  6E1E               	movwf	___ftmul@f2+2,c
  5438  0075FE  90D8               	bcf	status,0,c
  5439  007600  0102               	movlb	2	; () banked
  5440  007602  3514               	rlcf	main@i_354& (0+255),w,b
  5441  007604  6ED9               	movwf	fsr2l,c
  5442  007606  0102               	movlb	2	; () banked
  5443  007608  3515               	rlcf	(main@i_354+1)& (0+255),w,b
  5444  00760A  6EDA               	movwf	fsr2h,c
  5445  00760C  0E00               	movlw	low main@data
  5446  00760E  26D9               	addwf	fsr2l,f,c
  5447  007610  0E01               	movlw	high main@data
  5448  007612  22DA               	addwfc	fsr2h,f,c
  5449  007614  CFDE F009          	movff	postinc2,___lwtoft@c
  5450  007618  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  5451  00761C  EC89  F01C         	call	___lwtoft	;wreg free
  5452  007620  C009  F019         	movff	?___lwtoft,___ftmul@f1
  5453  007624  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  5454  007628  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  5455  00762C  EC36  F021         	call	___ftmul	;wreg free
  5456  007630  C019  F032         	movff	?___ftmul,___ftadd@f1
  5457  007634  C01A  F033         	movff	?___ftmul+1,___ftadd@f1+1
  5458  007638  C01B  F034         	movff	?___ftmul+2,___ftadd@f1+2
  5459  00763C  EC2D  F024         	call	___ftadd	;wreg free
  5460  007640  C032  F223         	movff	?___ftadd,_main$1195
  5461  007644  C033  F224         	movff	?___ftadd+1,_main$1195+1
  5462  007648  C034  F225         	movff	?___ftadd+2,_main$1195+2
  5463                           
  5464                           ;main.c: 514: {
  5465                           ;main.c: 515: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  5466  00764C  C216  F01C         	movff	main@amplitude,___ftmul@f2
  5467  007650  C217  F01D         	movff	main@amplitude+1,___ftmul@f2+1
  5468  007654  C218  F01E         	movff	main@amplitude+2,___ftmul@f2+2
  5469  007658  C223  F019         	movff	_main$1195,___ftmul@f1
  5470  00765C  C224  F01A         	movff	_main$1195+1,___ftmul@f1+1
  5471  007660  C225  F01B         	movff	_main$1195+2,___ftmul@f1+2
  5472  007664  EC36  F021         	call	___ftmul	;wreg free
  5473  007668  C019  F226         	movff	?___ftmul,_main$1196
  5474  00766C  C01A  F227         	movff	?___ftmul+1,_main$1196+1
  5475  007670  C01B  F228         	movff	?___ftmul+2,_main$1196+2
  5476                           
  5477                           ;main.c: 514: {
  5478                           ;main.c: 515: int y = (int)(((((float)5/1024)*data[i])-2.50f)*amplitude*2);
  5479  007674  0E00               	movlw	0
  5480  007676  6E1C               	movwf	___ftmul@f2,c
  5481  007678  0E00               	movlw	0
  5482  00767A  6E1D               	movwf	___ftmul@f2+1,c
  5483  00767C  0E40               	movlw	64
  5484  00767E  6E1E               	movwf	___ftmul@f2+2,c
  5485  007680  C226  F019         	movff	_main$1196,___ftmul@f1
  5486  007684  C227  F01A         	movff	_main$1196+1,___ftmul@f1+1
  5487  007688  C228  F01B         	movff	_main$1196+2,___ftmul@f1+2
  5488  00768C  EC36  F021         	call	___ftmul	;wreg free
  5489  007690  C019  F03E         	movff	?___ftmul,___fttol@f1
  5490  007694  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  5491  007698  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  5492  00769C  ECBC  F020         	call	___fttol	;wreg free
  5493  0076A0  C03E  F0F0         	movff	?___fttol,main@y_359
  5494  0076A4  C03F  F0F1         	movff	?___fttol+1,main@y_359+1
  5495                           
  5496                           ;main.c: 516: if (data[i] < min)
  5497  0076A8  90D8               	bcf	status,0,c
  5498  0076AA  0102               	movlb	2	; () banked
  5499  0076AC  3514               	rlcf	main@i_354& (0+255),w,b
  5500  0076AE  6ED9               	movwf	fsr2l,c
  5501  0076B0  0102               	movlb	2	; () banked
  5502  0076B2  3515               	rlcf	(main@i_354+1)& (0+255),w,b
  5503  0076B4  6EDA               	movwf	fsr2h,c
  5504  0076B6  0E00               	movlw	low main@data
  5505  0076B8  26D9               	addwf	fsr2l,f,c
  5506  0076BA  0E01               	movlw	high main@data
  5507  0076BC  22DA               	addwfc	fsr2h,f,c
  5508  0076BE  0100               	movlb	0	; () banked
  5509  0076C0  51E4               	movf	main@min& (0+255),w,b
  5510  0076C2  5CDE               	subwf	postinc2,w,c
  5511  0076C4  0100               	movlb	0	; () banked
  5512  0076C6  51E5               	movf	(main@min+1)& (0+255),w,b
  5513  0076C8  58DE               	subwfb	postinc2,w,c
  5514  0076CA  B0D8               	btfsc	status,0,c
  5515  0076CC  D018               	goto	l5113
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;main.c: 517: {
  5519                           ;main.c: 519: min = data[i];
  5520  0076CE  90D8               	bcf	status,0,c
  5521  0076D0  0102               	movlb	2	; () banked
  5522  0076D2  3514               	rlcf	main@i_354& (0+255),w,b
  5523  0076D4  6ED9               	movwf	fsr2l,c
  5524  0076D6  0102               	movlb	2	; () banked
  5525  0076D8  3515               	rlcf	(main@i_354+1)& (0+255),w,b
  5526  0076DA  6EDA               	movwf	fsr2h,c
  5527  0076DC  0E00               	movlw	low main@data
  5528  0076DE  26D9               	addwf	fsr2l,f,c
  5529  0076E0  0E01               	movlw	high main@data
  5530  0076E2  22DA               	addwfc	fsr2h,f,c
  5531  0076E4  CFDE F0E4          	movff	postinc2,main@min
  5532  0076E8  CFDD F0E5          	movff	postdec2,main@min+1
  5533                           
  5534                           ; BSR set to: 2
  5535                           ;main.c: 521: min_y = abs(y);
  5536  0076EC  C0F0  F001         	movff	main@y_359,abs@a
  5537  0076F0  C0F1  F002         	movff	main@y_359+1,abs@a+1
  5538  0076F4  ECC0  F01C         	call	_abs	;wreg free
  5539  0076F8  5001               	movf	?_abs,w,c
  5540  0076FA  0100               	movlb	0	; () banked
  5541  0076FC  6FD0               	movwf	main@min_y& (0+255),b
  5542  0076FE                     l5113:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;main.c: 522: }
  5546                           ;main.c: 523: if (data[i] > max)
  5547  0076FE  90D8               	bcf	status,0,c
  5548  007700  0102               	movlb	2	; () banked
  5549  007702  3514               	rlcf	main@i_354& (0+255),w,b
  5550  007704  6ED9               	movwf	fsr2l,c
  5551  007706  0102               	movlb	2	; () banked
  5552  007708  3515               	rlcf	(main@i_354+1)& (0+255),w,b
  5553  00770A  6EDA               	movwf	fsr2h,c
  5554  00770C  0E00               	movlw	low main@data
  5555  00770E  26D9               	addwf	fsr2l,f,c
  5556  007710  0E01               	movlw	high main@data
  5557  007712  22DA               	addwfc	fsr2h,f,c
  5558  007714  50DE               	movf	postinc2,w,c
  5559  007716  0100               	movlb	0	; () banked
  5560  007718  5DE6               	subwf	main@max& (0+255),w,b
  5561  00771A  50DE               	movf	postinc2,w,c
  5562  00771C  0100               	movlb	0	; () banked
  5563  00771E  59E7               	subwfb	(main@max+1)& (0+255),w,b
  5564  007720  B0D8               	btfsc	status,0,c
  5565  007722  D018               	goto	l5119
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;main.c: 524: {
  5569                           ;main.c: 526: max = data[i];
  5570  007724  90D8               	bcf	status,0,c
  5571  007726  0102               	movlb	2	; () banked
  5572  007728  3514               	rlcf	main@i_354& (0+255),w,b
  5573  00772A  6ED9               	movwf	fsr2l,c
  5574  00772C  0102               	movlb	2	; () banked
  5575  00772E  3515               	rlcf	(main@i_354+1)& (0+255),w,b
  5576  007730  6EDA               	movwf	fsr2h,c
  5577  007732  0E00               	movlw	low main@data
  5578  007734  26D9               	addwf	fsr2l,f,c
  5579  007736  0E01               	movlw	high main@data
  5580  007738  22DA               	addwfc	fsr2h,f,c
  5581  00773A  CFDE F0E6          	movff	postinc2,main@max
  5582  00773E  CFDD F0E7          	movff	postdec2,main@max+1
  5583                           
  5584                           ; BSR set to: 2
  5585                           ;main.c: 528: max_y = abs(y);
  5586  007742  C0F0  F001         	movff	main@y_359,abs@a
  5587  007746  C0F1  F002         	movff	main@y_359+1,abs@a+1
  5588  00774A  ECC0  F01C         	call	_abs	;wreg free
  5589  00774E  5001               	movf	?_abs,w,c
  5590  007750  0100               	movlb	0	; () banked
  5591  007752  6FD1               	movwf	main@max_y& (0+255),b
  5592  007754                     l5119:
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;main.c: 529: }
  5596                           ;main.c: 531: lcdplotpixel2(i,32-y,0);
  5597  007754  0100               	movlb	0	; () banked
  5598  007756  51F0               	movf	main@y_359& (0+255),w,b
  5599  007758  0800               	sublw	0
  5600  00775A  0F20               	addlw	32
  5601  00775C  6E11               	movwf	lcdplotpixel2@ry,c
  5602  00775E  0E00               	movlw	0
  5603  007760  6E13               	movwf	lcdplotpixel2@blank+1,c
  5604  007762  0E00               	movlw	0
  5605  007764  6E12               	movwf	lcdplotpixel2@blank,c
  5606  007766  0102               	movlb	2	; () banked
  5607  007768  5114               	movf	main@i_354& (0+255),w,b
  5608  00776A  EC83  F023         	call	_lcdplotpixel2
  5609                           
  5610                           ;main.c: 532: i++;
  5611  00776E  0102               	movlb	2	; () banked
  5612  007770  4B14               	infsnz	main@i_354& (0+255),f,b
  5613  007772  2B15               	incf	(main@i_354+1)& (0+255),f,b
  5614  007774                     l5123:
  5615  007774  0102               	movlb	2	; () banked
  5616  007776  BF15               	btfsc	(main@i_354+1)& (0+255),7,b
  5617  007778  D736               	goto	l5101
  5618  00777A  0102               	movlb	2	; () banked
  5619  00777C  5115               	movf	(main@i_354+1)& (0+255),w,b
  5620  00777E  E105               	bnz	l5125
  5621  007780  0E80               	movlw	128
  5622  007782  0102               	movlb	2	; () banked
  5623  007784  5D14               	subwf	main@i_354& (0+255),w,b
  5624  007786  A0D8               	btfss	status,0,c
  5625  007788  D72E               	goto	l5101
  5626  00778A                     l5125:
  5627                           
  5628                           ; BSR set to: 2
  5629                           ;main.c: 533: }
  5630                           ;main.c: 536: Vpp = ((float)5/1024)*(max-min);
  5631  00778A  C0E4  F05A         	movff	main@min,??_main
  5632  00778E  C0E5  F05B         	movff	main@min+1,??_main+1
  5633  007792  1E5A               	comf	??_main,f,c
  5634  007794  1E5B               	comf	??_main+1,f,c
  5635  007796  4A5A               	infsnz	??_main,f,c
  5636  007798  2A5B               	incf	??_main+1,f,c
  5637  00779A  0100               	movlb	0	; () banked
  5638  00779C  51E6               	movf	main@max& (0+255),w,b
  5639  00779E  245A               	addwf	??_main,w,c
  5640  0077A0  6E09               	movwf	___lwtoft@c,c
  5641  0077A2  0100               	movlb	0	; () banked
  5642  0077A4  51E7               	movf	(main@max+1)& (0+255),w,b
  5643  0077A6  205B               	addwfc	??_main+1,w,c
  5644  0077A8  6E0A               	movwf	___lwtoft@c+1,c
  5645  0077AA  EC89  F01C         	call	___lwtoft	;wreg free
  5646  0077AE  C009  F019         	movff	?___lwtoft,___ftmul@f1
  5647  0077B2  C00A  F01A         	movff	?___lwtoft+1,___ftmul@f1+1
  5648  0077B6  C00B  F01B         	movff	?___lwtoft+2,___ftmul@f1+2
  5649  0077BA  0E00               	movlw	0
  5650  0077BC  6E1C               	movwf	___ftmul@f2,c
  5651  0077BE  0EA0               	movlw	160
  5652  0077C0  6E1D               	movwf	___ftmul@f2+1,c
  5653  0077C2  0E3B               	movlw	59
  5654  0077C4  6E1E               	movwf	___ftmul@f2+2,c
  5655  0077C6  EC36  F021         	call	___ftmul	;wreg free
  5656  0077CA  C019  F0D6         	movff	?___ftmul,main@Vpp
  5657  0077CE  C01A  F0D7         	movff	?___ftmul+1,main@Vpp+1
  5658  0077D2  C01B  F0D8         	movff	?___ftmul+2,main@Vpp+2
  5659                           
  5660                           ;main.c: 539: y_div = Vpp/(max_y + min_y +1);
  5661  0077D6  C0D6  F019         	movff	main@Vpp,___ftdiv@f1
  5662  0077DA  C0D7  F01A         	movff	main@Vpp+1,___ftdiv@f1+1
  5663  0077DE  C0D8  F01B         	movff	main@Vpp+2,___ftdiv@f1+2
  5664  0077E2  0100               	movlb	0	; () banked
  5665  0077E4  51D0               	movf	main@min_y& (0+255),w,b
  5666  0077E6  C0D1  F05A         	movff	main@max_y,??_main
  5667  0077EA  6A5B               	clrf	(??_main+1)& (0+255),c
  5668  0077EC  265A               	addwf	??_main,f,c
  5669  0077EE  0E00               	movlw	0
  5670  0077F0  225B               	addwfc	??_main+1,f,c
  5671  0077F2  0E01               	movlw	1
  5672  0077F4  245A               	addwf	??_main,w,c
  5673  0077F6  6E15               	movwf	___awtoft@c,c
  5674  0077F8  0E00               	movlw	0
  5675  0077FA  205B               	addwfc	??_main+1,w,c
  5676  0077FC  6E16               	movwf	___awtoft@c+1,c
  5677  0077FE  ECEA  F01C         	call	___awtoft	;wreg free
  5678  007802  C015  F01C         	movff	?___awtoft,___ftdiv@f2
  5679  007806  C016  F01D         	movff	?___awtoft+1,___ftdiv@f2+1
  5680  00780A  C017  F01E         	movff	?___awtoft+2,___ftdiv@f2+2
  5681  00780E  EC49  F020         	call	___ftdiv	;wreg free
  5682  007812  C019  F204         	movff	?___ftdiv,main@y_div
  5683  007816  C01A  F205         	movff	?___ftdiv+1,main@y_div+1
  5684  00781A  C01B  F206         	movff	?___ftdiv+2,main@y_div+2
  5685                           
  5686                           ;main.c: 542: char buf[13];
  5687                           ;main.c: 543: if (y_div >= 1)
  5688  00781E  C204  F001         	movff	main@y_div,___ftge@ff1
  5689  007822  C205  F002         	movff	main@y_div+1,___ftge@ff1+1
  5690  007826  C206  F003         	movff	main@y_div+2,___ftge@ff1+2
  5691  00782A  0E00               	movlw	0
  5692  00782C  6E04               	movwf	___ftge@ff2,c
  5693  00782E  0E80               	movlw	128
  5694  007830  6E05               	movwf	___ftge@ff2+1,c
  5695  007832  0E3F               	movlw	63
  5696  007834  6E06               	movwf	___ftge@ff2+2,c
  5697  007836  ECAA  F01F         	call	___ftge	;wreg free
  5698  00783A  A0D8               	btfss	status,0,c
  5699  00783C  D011               	goto	l5129
  5700                           
  5701                           ;main.c: 544: {
  5702                           ;main.c: 545: sprintf(buf, "%.2fV/p", y_div);
  5703  00783E  0E9F               	movlw	low main@buf_360
  5704  007840  6E4D               	movwf	sprintf@sp,c
  5705  007842  0E00               	movlw	high main@buf_360
  5706  007844  6E4E               	movwf	sprintf@sp+1,c
  5707  007846  0EDB               	movlw	low STR_7
  5708  007848  6E4F               	movwf	sprintf@f,c
  5709  00784A  0E7F               	movlw	high STR_7
  5710  00784C  6E50               	movwf	sprintf@f+1,c
  5711  00784E  C204  F051         	movff	main@y_div,?_sprintf+4
  5712  007852  C205  F052         	movff	main@y_div+1,?_sprintf+5
  5713  007856  C206  F053         	movff	main@y_div+2,?_sprintf+6
  5714  00785A  EC19  F02E         	call	_sprintf	;wreg free
  5715                           
  5716                           ;main.c: 546: }
  5717  00785E  D024               	goto	l5133
  5718  007860                     l5129:
  5719                           
  5720                           ;main.c: 547: else
  5721                           ;main.c: 548: {
  5722                           ;main.c: 549: sprintf(buf, "%.2fmV/p", y_div*1000);
  5723  007860  C204  F019         	movff	main@y_div,___ftmul@f1
  5724  007864  C205  F01A         	movff	main@y_div+1,___ftmul@f1+1
  5725  007868  C206  F01B         	movff	main@y_div+2,___ftmul@f1+2
  5726  00786C  0E00               	movlw	0
  5727  00786E  6E1C               	movwf	___ftmul@f2,c
  5728  007870  0E7A               	movlw	122
  5729  007872  6E1D               	movwf	___ftmul@f2+1,c
  5730  007874  0E44               	movlw	68
  5731  007876  6E1E               	movwf	___ftmul@f2+2,c
  5732  007878  EC36  F021         	call	___ftmul	;wreg free
  5733  00787C  C019  F0D9         	movff	?___ftmul,_main$1197
  5734  007880  C01A  F0DA         	movff	?___ftmul+1,_main$1197+1
  5735  007884  C01B  F0DB         	movff	?___ftmul+2,_main$1197+2
  5736                           
  5737                           ;main.c: 547: else
  5738                           ;main.c: 548: {
  5739                           ;main.c: 549: sprintf(buf, "%.2fmV/p", y_div*1000);
  5740  007888  0E9F               	movlw	low main@buf_360
  5741  00788A  6E4D               	movwf	sprintf@sp,c
  5742  00788C  0E00               	movlw	high main@buf_360
  5743  00788E  6E4E               	movwf	sprintf@sp+1,c
  5744  007890  0EC9               	movlw	low STR_8
  5745  007892  6E4F               	movwf	sprintf@f,c
  5746  007894  0E7F               	movlw	high STR_8
  5747  007896  6E50               	movwf	sprintf@f+1,c
  5748  007898  C0D9  F051         	movff	_main$1197,?_sprintf+4
  5749  00789C  C0DA  F052         	movff	_main$1197+1,?_sprintf+5
  5750  0078A0  C0DB  F053         	movff	_main$1197+2,?_sprintf+6
  5751  0078A4  EC19  F02E         	call	_sprintf	;wreg free
  5752  0078A8                     l5133:
  5753                           
  5754                           ;main.c: 550: }
  5755                           ;main.c: 551: LCDpage(0,0);
  5756  0078A8  0E00               	movlw	0
  5757  0078AA  6E0F               	movwf	LCDpage@page,c
  5758  0078AC  0E00               	movlw	0
  5759  0078AE  EC89  F01D         	call	_LCDpage
  5760                           
  5761                           ;main.c: 552: LCDstring(1,buf);
  5762  0078B2  0E9F               	movlw	low main@buf_360
  5763  0078B4  6E2D               	movwf	LCDstring@buffer,c
  5764  0078B6  0E00               	movlw	high main@buf_360
  5765  0078B8  6E2E               	movwf	LCDstring@buffer+1,c
  5766  0078BA  0E01               	movlw	1
  5767  0078BC  ECA9  F02B         	call	_LCDstring
  5768                           
  5769                           ;main.c: 554: sprintf(buf," %.3fVpp",Vpp);
  5770  0078C0  0E9F               	movlw	low main@buf_360
  5771  0078C2  6E4D               	movwf	sprintf@sp,c
  5772  0078C4  0E00               	movlw	high main@buf_360
  5773  0078C6  6E4E               	movwf	sprintf@sp+1,c
  5774  0078C8  0ED2               	movlw	low STR_9
  5775  0078CA  6E4F               	movwf	sprintf@f,c
  5776  0078CC  0E7F               	movlw	high STR_9
  5777  0078CE  6E50               	movwf	sprintf@f+1,c
  5778  0078D0  C0D6  F051         	movff	main@Vpp,?_sprintf+4
  5779  0078D4  C0D7  F052         	movff	main@Vpp+1,?_sprintf+5
  5780  0078D8  C0D8  F053         	movff	main@Vpp+2,?_sprintf+6
  5781  0078DC  EC19  F02E         	call	_sprintf	;wreg free
  5782                           
  5783                           ;main.c: 555: strcat(bottom_buf,buf);
  5784  0078E0  0E77               	movlw	low main@bottom_buf
  5785  0078E2  6E01               	movwf	strcat@to,c
  5786  0078E4  0E00               	movlw	high main@bottom_buf
  5787  0078E6  6E02               	movwf	strcat@to+1,c
  5788  0078E8  0E9F               	movlw	low main@buf_360
  5789  0078EA  6E03               	movwf	strcat@from,c
  5790  0078EC  0E00               	movlw	high main@buf_360
  5791  0078EE  6E04               	movwf	strcat@from+1,c
  5792  0078F0  EC43  F01D         	call	_strcat	;wreg free
  5793                           
  5794                           ;main.c: 557: LCDpage(0,7);
  5795  0078F4  0E07               	movlw	7
  5796  0078F6  6E0F               	movwf	LCDpage@page,c
  5797  0078F8  0E00               	movlw	0
  5798  0078FA  EC89  F01D         	call	_LCDpage
  5799                           
  5800                           ;main.c: 558: LCDstring(1,bottom_buf);
  5801  0078FE  0E77               	movlw	low main@bottom_buf
  5802  007900  6E2D               	movwf	LCDstring@buffer,c
  5803  007902  0E00               	movlw	high main@bottom_buf
  5804  007904  6E2E               	movwf	LCDstring@buffer+1,c
  5805  007906  0E01               	movlw	1
  5806  007908  ECA9  F02B         	call	_LCDstring
  5807                           
  5808                           ;main.c: 561: for (int i = 0; i < 5; i++)
  5809  00790C  0E00               	movlw	0
  5810  00790E  0100               	movlb	0	; () banked
  5811  007910  6FE9               	movwf	(main@i_364+1)& (0+255),b
  5812  007912  0E00               	movlw	0
  5813  007914  6FE8               	movwf	main@i_364& (0+255),b
  5814                           
  5815                           ; BSR set to: 0
  5816  007916  0100               	movlb	0	; () banked
  5817  007918  BFE9               	btfsc	(main@i_364+1)& (0+255),7,b
  5818  00791A  D00C               	goto	l5151
  5819  00791C  0100               	movlb	0	; () banked
  5820  00791E  51E9               	movf	(main@i_364+1)& (0+255),w,b
  5821  007920  E107               	bnz	u6010
  5822  007922  0E05               	movlw	5
  5823  007924  0100               	movlb	0	; () banked
  5824  007926  5DE8               	subwf	main@i_364& (0+255),w,b
  5825  007928  B0D8               	btfsc	status,0,c
  5826  00792A  EF49  F032         	goto	l4739
  5827  00792E  D002               	goto	l5151
  5828  007930                     u6010:
  5829                           
  5830                           ; BSR set to: 0
  5831  007930  EF49  F032         	goto	l4739
  5832  007934                     l5151:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;main.c: 562: {
  5836                           ;main.c: 563: _delay((unsigned long)((10)*(40000000/4000.0)));
  5837  007934  0E82               	movlw	130
  5838  007936  6E5A               	movwf	??_main& (0+255),c
  5839  007938  0EDE               	movlw	222
  5840  00793A                     u6077:
  5841  00793A  2EE8               	decfsz	wreg,f,c
  5842  00793C  D7FE               	goto	u6077
  5843  00793E  2E5A               	decfsz	??_main& (0+255),f,c
  5844  007940  D7FC               	goto	u6077
  5845  007942  0100               	movlb	0	; () banked
  5846  007944  4BE8               	infsnz	main@i_364& (0+255),f,b
  5847  007946  2BE9               	incf	(main@i_364+1)& (0+255),f,b
  5848  007948  0100               	movlb	0	; () banked
  5849  00794A  BFE9               	btfsc	(main@i_364+1)& (0+255),7,b
  5850  00794C  D7F3               	goto	l5151
  5851  00794E  0100               	movlb	0	; () banked
  5852  007950  51E9               	movf	(main@i_364+1)& (0+255),w,b
  5853  007952  E101               	bnz	u6020
  5854  007954  D7E6               	goto	L7
  5855  007956                     u6020:
  5856                           
  5857                           ; BSR set to: 0
  5858                           
  5859                           ; BSR set to: 0
  5860  007956  EF49  F032         	goto	l4739
  5861  00795A                     __end_of_main:
  5862                           	opt stack 0
  5863                           tblptru	equ	0xFF8
  5864                           postinc0	equ	0xFEE
  5865                           wreg	equ	0xFE8
  5866                           postdec1	equ	0xFE5
  5867                           fsr1h	equ	0xFE2
  5868                           fsr1l	equ	0xFE1
  5869                           postinc2	equ	0xFDE
  5870                           postdec2	equ	0xFDD
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875 ;; *************** function _xyaxis *****************
  5876 ;; Defined at:
  5877 ;;		line 883 in file "src/LCDgraphic.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;		None
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;  i               2   38[COMRAM] int 
  5882 ;;  i               2   36[COMRAM] int 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      void 
  5885 ;; Registers used:
  5886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0
  5893 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5895 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5896 ;;Total ram usage:        4 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    5
  5899 ;; This function calls:
  5900 ;;		_lcdplotpixel2
  5901 ;; This function is called by:
  5902 ;;		_main
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text1
  5907  0045BA                     __ptext1:
  5908                           	opt stack 0
  5909  0045BA                     _xyaxis:
  5910                           	opt stack 25
  5911                           
  5912                           ;LCDgraphic.c: 885: for(int i=0;i<55;i++)
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;incstack = 0
  5916  0045BA  0E00               	movlw	0
  5917  0045BC  6E26               	movwf	xyaxis@i+1,c
  5918  0045BE  0E00               	movlw	0
  5919  0045C0  6E25               	movwf	xyaxis@i,c
  5920  0045C2                     l4157:
  5921  0045C2  BE26               	btfsc	xyaxis@i+1,7,c
  5922  0045C4  D006               	goto	l4161
  5923  0045C6  5026               	movf	xyaxis@i+1,w,c
  5924  0045C8  E110               	bnz	l4167
  5925  0045CA  0E37               	movlw	55
  5926  0045CC  5C25               	subwf	xyaxis@i,w,c
  5927  0045CE  B0D8               	btfsc	status,0,c
  5928  0045D0  D00C               	goto	l4167
  5929  0045D2                     l4161:
  5930                           
  5931                           ;LCDgraphic.c: 886: {
  5932                           ;LCDgraphic.c: 887: lcdplotpixel2(64,i,0);
  5933  0045D2  C025  F011         	movff	xyaxis@i,lcdplotpixel2@ry
  5934  0045D6  0E00               	movlw	0
  5935  0045D8  6E13               	movwf	lcdplotpixel2@blank+1,c
  5936  0045DA  0E00               	movlw	0
  5937  0045DC  6E12               	movwf	lcdplotpixel2@blank,c
  5938  0045DE  0E40               	movlw	64
  5939  0045E0  EC83  F023         	call	_lcdplotpixel2
  5940  0045E4  4A25               	infsnz	xyaxis@i,f,c
  5941  0045E6  2A26               	incf	xyaxis@i+1,f,c
  5942  0045E8  D7EC               	goto	l4157
  5943  0045EA                     l4167:
  5944                           
  5945                           ;LCDgraphic.c: 888: }
  5946                           ;LCDgraphic.c: 890: for(int i=0;i<=126;i++)
  5947  0045EA  0E00               	movlw	0
  5948  0045EC  6E28               	movwf	xyaxis@i_553+1,c
  5949  0045EE  0E00               	movlw	0
  5950  0045F0  6E27               	movwf	xyaxis@i_553,c
  5951  0045F2                     l4169:
  5952  0045F2  BE28               	btfsc	xyaxis@i_553+1,7,c
  5953  0045F4  D006               	goto	l4173
  5954  0045F6  5028               	movf	xyaxis@i_553+1,w,c
  5955  0045F8  E110               	bnz	l4179
  5956  0045FA  0E7F               	movlw	127
  5957  0045FC  5C27               	subwf	xyaxis@i_553,w,c
  5958  0045FE  B0D8               	btfsc	status,0,c
  5959  004600  D00C               	goto	l4179
  5960  004602                     l4173:
  5961                           
  5962                           ;LCDgraphic.c: 891: {
  5963                           ;LCDgraphic.c: 892: lcdplotpixel2(i,32,0);
  5964  004602  0E20               	movlw	32
  5965  004604  6E11               	movwf	lcdplotpixel2@ry,c
  5966  004606  0E00               	movlw	0
  5967  004608  6E13               	movwf	lcdplotpixel2@blank+1,c
  5968  00460A  0E00               	movlw	0
  5969  00460C  6E12               	movwf	lcdplotpixel2@blank,c
  5970  00460E  5027               	movf	xyaxis@i_553,w,c
  5971  004610  EC83  F023         	call	_lcdplotpixel2
  5972  004614  4A27               	infsnz	xyaxis@i_553,f,c
  5973  004616  2A28               	incf	xyaxis@i_553+1,f,c
  5974  004618  D7EC               	goto	l4169
  5975  00461A                     l4179:
  5976                           
  5977                           ;LCDgraphic.c: 893: }
  5978                           ;LCDgraphic.c: 896: lcdplotpixel2(63,1,0);
  5979  00461A  0E01               	movlw	1
  5980  00461C  6E11               	movwf	lcdplotpixel2@ry,c
  5981  00461E  0E00               	movlw	0
  5982  004620  6E13               	movwf	lcdplotpixel2@blank+1,c
  5983  004622  0E00               	movlw	0
  5984  004624  6E12               	movwf	lcdplotpixel2@blank,c
  5985  004626  0E3F               	movlw	63
  5986  004628  EC83  F023         	call	_lcdplotpixel2
  5987                           
  5988                           ;LCDgraphic.c: 897: lcdplotpixel2(62,2,0);
  5989  00462C  0E02               	movlw	2
  5990  00462E  6E11               	movwf	lcdplotpixel2@ry,c
  5991  004630  0E00               	movlw	0
  5992  004632  6E13               	movwf	lcdplotpixel2@blank+1,c
  5993  004634  0E00               	movlw	0
  5994  004636  6E12               	movwf	lcdplotpixel2@blank,c
  5995  004638  0E3E               	movlw	62
  5996  00463A  EC83  F023         	call	_lcdplotpixel2
  5997                           
  5998                           ;LCDgraphic.c: 898: lcdplotpixel2(61,3,0);
  5999  00463E  0E03               	movlw	3
  6000  004640  6E11               	movwf	lcdplotpixel2@ry,c
  6001  004642  0E00               	movlw	0
  6002  004644  6E13               	movwf	lcdplotpixel2@blank+1,c
  6003  004646  0E00               	movlw	0
  6004  004648  6E12               	movwf	lcdplotpixel2@blank,c
  6005  00464A  0E3D               	movlw	61
  6006  00464C  EC83  F023         	call	_lcdplotpixel2
  6007                           
  6008                           ;LCDgraphic.c: 899: lcdplotpixel2(65,1,0);
  6009  004650  0E01               	movlw	1
  6010  004652  6E11               	movwf	lcdplotpixel2@ry,c
  6011  004654  0E00               	movlw	0
  6012  004656  6E13               	movwf	lcdplotpixel2@blank+1,c
  6013  004658  0E00               	movlw	0
  6014  00465A  6E12               	movwf	lcdplotpixel2@blank,c
  6015  00465C  0E41               	movlw	65
  6016  00465E  EC83  F023         	call	_lcdplotpixel2
  6017                           
  6018                           ;LCDgraphic.c: 900: lcdplotpixel2(66,2,0);
  6019  004662  0E02               	movlw	2
  6020  004664  6E11               	movwf	lcdplotpixel2@ry,c
  6021  004666  0E00               	movlw	0
  6022  004668  6E13               	movwf	lcdplotpixel2@blank+1,c
  6023  00466A  0E00               	movlw	0
  6024  00466C  6E12               	movwf	lcdplotpixel2@blank,c
  6025  00466E  0E42               	movlw	66
  6026  004670  EC83  F023         	call	_lcdplotpixel2
  6027                           
  6028                           ;LCDgraphic.c: 901: lcdplotpixel2(67,3,0);
  6029  004674  0E03               	movlw	3
  6030  004676  6E11               	movwf	lcdplotpixel2@ry,c
  6031  004678  0E00               	movlw	0
  6032  00467A  6E13               	movwf	lcdplotpixel2@blank+1,c
  6033  00467C  0E00               	movlw	0
  6034  00467E  6E12               	movwf	lcdplotpixel2@blank,c
  6035  004680  0E43               	movlw	67
  6036  004682  EC83  F023         	call	_lcdplotpixel2
  6037                           
  6038                           ;LCDgraphic.c: 904: lcdplotpixel2(127,32,0);
  6039  004686  0E20               	movlw	32
  6040  004688  6E11               	movwf	lcdplotpixel2@ry,c
  6041  00468A  0E00               	movlw	0
  6042  00468C  6E13               	movwf	lcdplotpixel2@blank+1,c
  6043  00468E  0E00               	movlw	0
  6044  004690  6E12               	movwf	lcdplotpixel2@blank,c
  6045  004692  0E7F               	movlw	127
  6046  004694  EC83  F023         	call	_lcdplotpixel2
  6047                           
  6048                           ;LCDgraphic.c: 905: lcdplotpixel2(126,31,0);
  6049  004698  0E1F               	movlw	31
  6050  00469A  6E11               	movwf	lcdplotpixel2@ry,c
  6051  00469C  0E00               	movlw	0
  6052  00469E  6E13               	movwf	lcdplotpixel2@blank+1,c
  6053  0046A0  0E00               	movlw	0
  6054  0046A2  6E12               	movwf	lcdplotpixel2@blank,c
  6055  0046A4  0E7E               	movlw	126
  6056  0046A6  EC83  F023         	call	_lcdplotpixel2
  6057                           
  6058                           ;LCDgraphic.c: 906: lcdplotpixel2(126,33,0);
  6059  0046AA  0E21               	movlw	33
  6060  0046AC  6E11               	movwf	lcdplotpixel2@ry,c
  6061  0046AE  0E00               	movlw	0
  6062  0046B0  6E13               	movwf	lcdplotpixel2@blank+1,c
  6063  0046B2  0E00               	movlw	0
  6064  0046B4  6E12               	movwf	lcdplotpixel2@blank,c
  6065  0046B6  0E7E               	movlw	126
  6066  0046B8  EC83  F023         	call	_lcdplotpixel2
  6067                           
  6068                           ;LCDgraphic.c: 907: lcdplotpixel2(125,30,0);
  6069  0046BC  0E1E               	movlw	30
  6070  0046BE  6E11               	movwf	lcdplotpixel2@ry,c
  6071  0046C0  0E00               	movlw	0
  6072  0046C2  6E13               	movwf	lcdplotpixel2@blank+1,c
  6073  0046C4  0E00               	movlw	0
  6074  0046C6  6E12               	movwf	lcdplotpixel2@blank,c
  6075  0046C8  0E7D               	movlw	125
  6076  0046CA  EC83  F023         	call	_lcdplotpixel2
  6077                           
  6078                           ;LCDgraphic.c: 908: lcdplotpixel2(125,34,0);
  6079  0046CE  0E22               	movlw	34
  6080  0046D0  6E11               	movwf	lcdplotpixel2@ry,c
  6081  0046D2  0E00               	movlw	0
  6082  0046D4  6E13               	movwf	lcdplotpixel2@blank+1,c
  6083  0046D6  0E00               	movlw	0
  6084  0046D8  6E12               	movwf	lcdplotpixel2@blank,c
  6085  0046DA  0E7D               	movlw	125
  6086  0046DC  EC83  F023         	call	_lcdplotpixel2
  6087                           
  6088                           ;LCDgraphic.c: 909: lcdplotpixel2(124,29,0);
  6089  0046E0  0E1D               	movlw	29
  6090  0046E2  6E11               	movwf	lcdplotpixel2@ry,c
  6091  0046E4  0E00               	movlw	0
  6092  0046E6  6E13               	movwf	lcdplotpixel2@blank+1,c
  6093  0046E8  0E00               	movlw	0
  6094  0046EA  6E12               	movwf	lcdplotpixel2@blank,c
  6095  0046EC  0E7C               	movlw	124
  6096  0046EE  EC83  F023         	call	_lcdplotpixel2
  6097                           
  6098                           ;LCDgraphic.c: 910: lcdplotpixel2(124,35,0);
  6099  0046F2  0E23               	movlw	35
  6100  0046F4  6E11               	movwf	lcdplotpixel2@ry,c
  6101  0046F6  0E00               	movlw	0
  6102  0046F8  6E13               	movwf	lcdplotpixel2@blank+1,c
  6103  0046FA  0E00               	movlw	0
  6104  0046FC  6E12               	movwf	lcdplotpixel2@blank,c
  6105  0046FE  0E7C               	movlw	124
  6106  004700  EC83  F023         	call	_lcdplotpixel2
  6107  004704  0012               	return		;funcret
  6108  004706                     __end_of_xyaxis:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           postinc0	equ	0xFEE
  6112                           wreg	equ	0xFE8
  6113                           postdec1	equ	0xFE5
  6114                           fsr1h	equ	0xFE2
  6115                           fsr1l	equ	0xFE1
  6116                           postinc2	equ	0xFDE
  6117                           postdec2	equ	0xFDD
  6118                           fsr2h	equ	0xFDA
  6119                           fsr2l	equ	0xFD9
  6120                           status	equ	0xFD8
  6121                           
  6122 ;; *************** function _lcdplotpixel2 *****************
  6123 ;; Defined at:
  6124 ;;		line 830 in file "src/LCDgraphic.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  rx              1    wreg     unsigned char 
  6127 ;;  ry              1   16[COMRAM] unsigned char 
  6128 ;;  blank           2   17[COMRAM] int 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  rx              1   35[COMRAM] unsigned char 
  6131 ;;  data            9   21[COMRAM] const unsigned char [9]
  6132 ;;  index           2   33[COMRAM] int 
  6133 ;;  value           2   31[COMRAM] int 
  6134 ;;  pixel           1   30[COMRAM] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  1    wreg      unsigned char 
  6137 ;; Registers used:
  6138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6144 ;;      Params:         3       0       0       0       0       0       0       0       0
  6145 ;;      Locals:        15       0       0       0       0       0       0       0       0
  6146 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6147 ;;      Totals:        20       0       0       0       0       0       0       0       0
  6148 ;;Total ram usage:       20 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    4
  6151 ;; This function calls:
  6152 ;;		_LCDcmd
  6153 ;;		_LCDpage
  6154 ;;		_LCDy
  6155 ;;		___awdiv
  6156 ;; This function is called by:
  6157 ;;		_main
  6158 ;;		_xyaxis
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text2
  6163  004706                     __ptext2:
  6164                           	opt stack 0
  6165  004706                     _lcdplotpixel2:
  6166                           	opt stack 25
  6167                           
  6168                           ;incstack = 0
  6169                           ;lcdplotpixel2@rx stored from wreg
  6170  004706  6E24               	movwf	lcdplotpixel2@rx,c
  6171                           
  6172                           ;LCDgraphic.c: 832: char pixel;
  6173                           ;LCDgraphic.c: 833: int index,value;
  6174                           ;LCDgraphic.c: 834: const char data[]={0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,0x
      +                          00};
  6175  004708  0EAC               	movlw	low lcdplotpixel2@F4454
  6176  00470A  6EF6               	movwf	tblptrl,c
  6177  00470C                     	if	1	;There is more than 1 active tblptr byte
  6178  00470C  0E7B               	movlw	high lcdplotpixel2@F4454
  6179  00470E  6EF7               	movwf	tblptrh,c
  6180  004710                     	endif
  6181  004710                     	if	0	;There are less than 3 active tblptr bytes
  6182  004710                     	endif
  6183  004710  EE20  F016         	lfsr	2,lcdplotpixel2@data
  6184  004714  0E08               	movlw	8
  6185  004716                     u3800:
  6186  004716  0009               	tblrd		*+
  6187  004718  CFF5 FFDE          	movff	tablat,postinc2
  6188  00471C  06E8               	decf	wreg,f,c
  6189  00471E  E2FB               	bc	u3800
  6190                           
  6191                           ;LCDgraphic.c: 837: if(rx < 64)
  6192  004720  0E40               	movlw	64
  6193  004722  6024               	cpfslt	lcdplotpixel2@rx,c
  6194  004724  D014               	goto	l3671
  6195                           
  6196                           ;LCDgraphic.c: 838: {
  6197                           ;LCDgraphic.c: 839: LCDpage(0,(int)ry/8);
  6198  004726  C011  F007         	movff	lcdplotpixel2@ry,___awdiv@dividend
  6199  00472A  6A08               	clrf	___awdiv@dividend+1,c
  6200  00472C  0E00               	movlw	0
  6201  00472E  6E0A               	movwf	___awdiv@divisor+1,c
  6202  004730  0E08               	movlw	8
  6203  004732  6E09               	movwf	___awdiv@divisor,c
  6204  004734  EC20  F01F         	call	___awdiv	;wreg free
  6205  004738  5007               	movf	?___awdiv,w,c
  6206  00473A  6E0F               	movwf	LCDpage@page,c
  6207  00473C  0E00               	movlw	0
  6208  00473E  EC89  F01D         	call	_LCDpage
  6209                           
  6210                           ;LCDgraphic.c: 840: LCDy(0,rx);
  6211  004742  C024  F005         	movff	lcdplotpixel2@rx,LCDy@value
  6212  004746  0E00               	movlw	0
  6213  004748  ECDA  F01D         	call	_LCDy
  6214                           
  6215                           ;LCDgraphic.c: 841: }
  6216  00474C  D014               	goto	l337
  6217  00474E                     l3671:
  6218                           
  6219                           ;LCDgraphic.c: 842: else
  6220                           ;LCDgraphic.c: 843: {
  6221                           ;LCDgraphic.c: 844: LCDpage(1,(int)ry/8);
  6222  00474E  C011  F007         	movff	lcdplotpixel2@ry,___awdiv@dividend
  6223  004752  6A08               	clrf	___awdiv@dividend+1,c
  6224  004754  0E00               	movlw	0
  6225  004756  6E0A               	movwf	___awdiv@divisor+1,c
  6226  004758  0E08               	movlw	8
  6227  00475A  6E09               	movwf	___awdiv@divisor,c
  6228  00475C  EC20  F01F         	call	___awdiv	;wreg free
  6229  004760  5007               	movf	?___awdiv,w,c
  6230  004762  6E0F               	movwf	LCDpage@page,c
  6231  004764  0E01               	movlw	1
  6232  004766  EC89  F01D         	call	_LCDpage
  6233                           
  6234                           ;LCDgraphic.c: 845: LCDy(1,rx-64);
  6235  00476A  5024               	movf	lcdplotpixel2@rx,w,c
  6236  00476C  0FC0               	addlw	192
  6237  00476E  6E05               	movwf	LCDy@value,c
  6238  004770  0E01               	movlw	1
  6239  004772  ECDA  F01D         	call	_LCDy
  6240  004776                     l337:
  6241                           
  6242                           ;LCDgraphic.c: 846: }
  6243                           ;LCDgraphic.c: 849: pixel = ry-8*(ry/8);
  6244  004776  C011  F007         	movff	lcdplotpixel2@ry,___awdiv@dividend
  6245  00477A  6A08               	clrf	___awdiv@dividend+1,c
  6246  00477C  0E00               	movlw	0
  6247  00477E  6E0A               	movwf	___awdiv@divisor+1,c
  6248  004780  0E08               	movlw	8
  6249  004782  6E09               	movwf	___awdiv@divisor,c
  6250  004784  EC20  F01F         	call	___awdiv	;wreg free
  6251  004788  90D8               	bcf	status,0,c
  6252  00478A  3607               	rlcf	?___awdiv,f,c
  6253  00478C  90D8               	bcf	status,0,c
  6254  00478E  3607               	rlcf	?___awdiv,f,c
  6255  004790  90D8               	bcf	status,0,c
  6256  004792  3407               	rlcf	?___awdiv,w,c
  6257  004794  0800               	sublw	0
  6258  004796  2411               	addwf	lcdplotpixel2@ry,w,c
  6259  004798  6E1F               	movwf	lcdplotpixel2@pixel,c
  6260                           
  6261                           ;LCDgraphic.c: 850: index = rx+128*(ry/8);
  6262  00479A  C011  F007         	movff	lcdplotpixel2@ry,___awdiv@dividend
  6263  00479E  6A08               	clrf	___awdiv@dividend+1,c
  6264  0047A0  0E00               	movlw	0
  6265  0047A2  6E0A               	movwf	___awdiv@divisor+1,c
  6266  0047A4  0E08               	movlw	8
  6267  0047A6  6E09               	movwf	___awdiv@divisor,c
  6268  0047A8  EC20  F01F         	call	___awdiv	;wreg free
  6269  0047AC  0E07               	movlw	7
  6270  0047AE                     u3825:
  6271  0047AE  90D8               	bcf	status,0,c
  6272  0047B0  3607               	rlcf	?___awdiv,f,c
  6273  0047B2  3608               	rlcf	?___awdiv+1,f,c
  6274  0047B4  2EE8               	decfsz	wreg,f,c
  6275  0047B6  D7FB               	goto	u3825
  6276  0047B8  5024               	movf	lcdplotpixel2@rx,w,c
  6277  0047BA  2407               	addwf	?___awdiv,w,c
  6278  0047BC  6E22               	movwf	lcdplotpixel2@index,c
  6279  0047BE  0E00               	movlw	0
  6280  0047C0  2008               	addwfc	?___awdiv+1,w,c
  6281  0047C2  6E23               	movwf	lcdplotpixel2@index+1,c
  6282                           
  6283                           ;LCDgraphic.c: 852: if(blank > 0)
  6284  0047C4  BE13               	btfsc	lcdplotpixel2@blank+1,7,c
  6285  0047C6  D018               	goto	l3677
  6286  0047C8  5013               	movf	lcdplotpixel2@blank+1,w,c
  6287  0047CA  E103               	bnz	u3830
  6288  0047CC  0412               	decf	lcdplotpixel2@blank,w,c
  6289  0047CE  A0D8               	btfss	status,0,c
  6290  0047D0  D013               	goto	l3677
  6291  0047D2                     u3830:
  6292                           
  6293                           ;LCDgraphic.c: 853: {
  6294                           ;LCDgraphic.c: 854: value = ~data[pixel] & pixels[index];
  6295  0047D2  0EFF               	movlw	low _pixels
  6296  0047D4  2422               	addwf	lcdplotpixel2@index,w,c
  6297  0047D6  6ED9               	movwf	fsr2l,c
  6298  0047D8  0E03               	movlw	high _pixels
  6299  0047DA  2023               	addwfc	lcdplotpixel2@index+1,w,c
  6300  0047DC  6EDA               	movwf	fsr2h,c
  6301  0047DE  50DF               	movf	indf2,w,c
  6302  0047E0  6E14               	movwf	??_lcdplotpixel2& (0+255),c
  6303  0047E2  501F               	movf	lcdplotpixel2@pixel,w,c
  6304  0047E4  0D01               	mullw	1
  6305  0047E6  0E16               	movlw	low lcdplotpixel2@data
  6306  0047E8  24F3               	addwf	prodl,w,c
  6307  0047EA  6ED9               	movwf	fsr2l,c
  6308  0047EC  0E00               	movlw	high lcdplotpixel2@data
  6309  0047EE  20F4               	addwfc	prodh,w,c
  6310  0047F0  6EDA               	movwf	fsr2h,c
  6311  0047F2  50DF               	movf	indf2,w,c
  6312  0047F4  0AFF               	xorlw	255
  6313  0047F6  D00B               	goto	L8
  6314  0047F8                     l3677:
  6315                           
  6316                           ;LCDgraphic.c: 856: else if (blank < 0)
  6317  0047F8  AE13               	btfss	lcdplotpixel2@blank+1,7,c
  6318  0047FA  D00B               	goto	l3681
  6319                           
  6320                           ;LCDgraphic.c: 857: {
  6321                           ;LCDgraphic.c: 858: value = data[8] & pixels[index];
  6322  0047FC  0EFF               	movlw	low _pixels
  6323  0047FE  2422               	addwf	lcdplotpixel2@index,w,c
  6324  004800  6ED9               	movwf	fsr2l,c
  6325  004802  0E03               	movlw	high _pixels
  6326  004804  2023               	addwfc	lcdplotpixel2@index+1,w,c
  6327  004806  6EDA               	movwf	fsr2h,c
  6328  004808  50DF               	movf	indf2,w,c
  6329  00480A  6E14               	movwf	??_lcdplotpixel2& (0+255),c
  6330  00480C  501E               	movf	lcdplotpixel2@data+8,w,c
  6331  00480E                     L8:
  6332  00480E  1414               	andwf	??_lcdplotpixel2,w,c
  6333  004810  D012               	goto	L9
  6334  004812                     l3681:
  6335                           
  6336                           ;LCDgraphic.c: 860: else
  6337                           ;LCDgraphic.c: 861: {
  6338                           ;LCDgraphic.c: 862: value = data[pixel] | pixels[index];
  6339  004812  0EFF               	movlw	low _pixels
  6340  004814  2422               	addwf	lcdplotpixel2@index,w,c
  6341  004816  6ED9               	movwf	fsr2l,c
  6342  004818  0E03               	movlw	high _pixels
  6343  00481A  2023               	addwfc	lcdplotpixel2@index+1,w,c
  6344  00481C  6EDA               	movwf	fsr2h,c
  6345  00481E  50DF               	movf	indf2,w,c
  6346  004820  6E14               	movwf	??_lcdplotpixel2& (0+255),c
  6347  004822  501F               	movf	lcdplotpixel2@pixel,w,c
  6348  004824  0D01               	mullw	1
  6349  004826  0E16               	movlw	low lcdplotpixel2@data
  6350  004828  24F3               	addwf	prodl,w,c
  6351  00482A  6ED9               	movwf	fsr2l,c
  6352  00482C  0E00               	movlw	high lcdplotpixel2@data
  6353  00482E  20F4               	addwfc	prodh,w,c
  6354  004830  6EDA               	movwf	fsr2h,c
  6355  004832  50DF               	movf	indf2,w,c
  6356  004834  1014               	iorwf	??_lcdplotpixel2,w,c
  6357  004836                     L9:
  6358  004836  6E15               	movwf	(??_lcdplotpixel2+1)& (0+255),c
  6359  004838  5015               	movf	??_lcdplotpixel2+1,w,c
  6360  00483A  6E20               	movwf	lcdplotpixel2@value,c
  6361  00483C  6A21               	clrf	lcdplotpixel2@value+1,c
  6362                           
  6363                           ;LCDgraphic.c: 863: }
  6364                           ;LCDgraphic.c: 865: LATCbits.LATC2=1;
  6365  00483E  848B               	bsf	3979,2,c	;volatile
  6366                           
  6367                           ;LCDgraphic.c: 866: LATCbits.LATC1=0;
  6368  004840  928B               	bcf	3979,1,c	;volatile
  6369                           
  6370                           ;LCDgraphic.c: 868: LCDcmd(value);
  6371  004842  5020               	movf	lcdplotpixel2@value,w,c
  6372  004844  EC43  F01C         	call	_LCDcmd
  6373                           
  6374                           ;LCDgraphic.c: 870: pixels[index]=value;
  6375  004848  0EFF               	movlw	low _pixels
  6376  00484A  2422               	addwf	lcdplotpixel2@index,w,c
  6377  00484C  6ED9               	movwf	fsr2l,c
  6378  00484E  0E03               	movlw	high _pixels
  6379  004850  2023               	addwfc	lcdplotpixel2@index+1,w,c
  6380  004852  6EDA               	movwf	fsr2h,c
  6381  004854  C020  FFDF         	movff	lcdplotpixel2@value,indf2
  6382  004858  0012               	return	
  6383  00485A                     __end_of_lcdplotpixel2:
  6384                           	opt stack 0
  6385                           tblptru	equ	0xFF8
  6386                           tblptrh	equ	0xFF7
  6387                           tblptrl	equ	0xFF6
  6388                           tablat	equ	0xFF5
  6389                           prodh	equ	0xFF4
  6390                           prodl	equ	0xFF3
  6391                           postinc0	equ	0xFEE
  6392                           wreg	equ	0xFE8
  6393                           postdec1	equ	0xFE5
  6394                           fsr1h	equ	0xFE2
  6395                           fsr1l	equ	0xFE1
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _write_image *****************
  6404 ;; Defined at:
  6405 ;;		line 1017 in file "src/LCDgraphic.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  image           2   16[COMRAM] PTR const unsigned char 
  6408 ;;		 -> image(1024), 
  6409 ;;  top_to_botto    1   18[COMRAM] unsigned char 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  j               2   33[COMRAM] int 
  6412 ;;  j               2   31[COMRAM] int 
  6413 ;;  val             1   42[COMRAM] unsigned char 
  6414 ;;  n_val           1   30[COMRAM] unsigned char 
  6415 ;;  val             1   41[COMRAM] unsigned char 
  6416 ;;  n_val           1   29[COMRAM] unsigned char 
  6417 ;;  i               2   37[COMRAM] int 
  6418 ;;  i               2   35[COMRAM] int 
  6419 ;;  page            2   39[COMRAM] int 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  1    wreg      void 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6429 ;;      Params:         3       0       0       0       0       0       0       0       0
  6430 ;;      Locals:        14       0       0       0       0       0       0       0       0
  6431 ;;      Temps:         10       0       0       0       0       0       0       0       0
  6432 ;;      Totals:        27       0       0       0       0       0       0       0       0
  6433 ;;Total ram usage:       27 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    4
  6436 ;; This function calls:
  6437 ;;		_LCDcmd
  6438 ;;		_LCDpage
  6439 ;;		_LCDy
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text3
  6446  004C4C                     __ptext3:
  6447                           	opt stack 0
  6448  004C4C                     _write_image:
  6449                           	opt stack 26
  6450                           
  6451                           ;LCDgraphic.c: 1019: for (int page = 0; page < 8; page++)
  6452                           
  6453                           ;incstack = 0
  6454  004C4C  0E00               	movlw	0
  6455  004C4E  6E29               	movwf	write_image@page+1,c
  6456  004C50  0E00               	movlw	0
  6457  004C52  6E28               	movwf	write_image@page,c
  6458  004C54  BE29               	btfsc	write_image@page+1,7,c
  6459  004C56  D008               	goto	l4079
  6460  004C58  5029               	movf	write_image@page+1,w,c
  6461  004C5A  E105               	bnz	u4400
  6462  004C5C  0E08               	movlw	8
  6463  004C5E  5C28               	subwf	write_image@page,w,c
  6464  004C60  B0D8               	btfsc	status,0,c
  6465  004C62  0012               	return	
  6466  004C64  D001               	goto	l4079
  6467  004C66                     u4400:
  6468  004C66  0012               	return	
  6469  004C68                     l4079:
  6470                           
  6471                           ;LCDgraphic.c: 1020: {
  6472                           ;LCDgraphic.c: 1021: LCDpage(0,page);
  6473  004C68  C028  F00F         	movff	write_image@page,LCDpage@page
  6474  004C6C  0E00               	movlw	0
  6475  004C6E  EC89  F01D         	call	_LCDpage
  6476                           
  6477                           ;LCDgraphic.c: 1022: LCDy(0,0);
  6478  004C72  0E00               	movlw	0
  6479  004C74  6E05               	movwf	LCDy@value,c
  6480  004C76  0E00               	movlw	0
  6481  004C78  ECDA  F01D         	call	_LCDy
  6482                           
  6483                           ;LCDgraphic.c: 1023: LATCbits.LATC2=1;
  6484  004C7C  848B               	bsf	3979,2,c	;volatile
  6485                           
  6486                           ;LCDgraphic.c: 1024: LATCbits.LATC1=0;
  6487  004C7E  928B               	bcf	3979,1,c	;volatile
  6488                           
  6489                           ;LCDgraphic.c: 1025: for (int i = 0; i < 64; i++)
  6490  004C80  0E00               	movlw	0
  6491  004C82  6E25               	movwf	write_image@i+1,c
  6492  004C84  0E00               	movlw	0
  6493  004C86  6E24               	movwf	write_image@i,c
  6494  004C88  BE25               	btfsc	write_image@i+1,7,c
  6495  004C8A  D008               	goto	l4091
  6496  004C8C  5025               	movf	write_image@i+1,w,c
  6497  004C8E  E105               	bnz	u4410
  6498  004C90  0E40               	movlw	64
  6499  004C92  5C24               	subwf	write_image@i,w,c
  6500  004C94  B0D8               	btfsc	status,0,c
  6501  004C96  D082               	goto	l4115
  6502  004C98  D001               	goto	l4091
  6503  004C9A                     u4410:
  6504  004C9A  D080               	goto	l4115
  6505  004C9C                     l4091:
  6506                           
  6507                           ;LCDgraphic.c: 1026: {
  6508                           ;LCDgraphic.c: 1027: unsigned char val = image[page*128+i];
  6509  004C9C  C028  F014         	movff	write_image@page,??_write_image
  6510  004CA0  C029  F015         	movff	write_image@page+1,??_write_image+1
  6511  004CA4  0E07               	movlw	7
  6512  004CA6                     u4425:
  6513  004CA6  90D8               	bcf	status,0,c
  6514  004CA8  3614               	rlcf	??_write_image,f,c
  6515  004CAA  3615               	rlcf	??_write_image+1,f,c
  6516  004CAC  2EE8               	decfsz	wreg,f,c
  6517  004CAE  D7FB               	goto	u4425
  6518  004CB0  5024               	movf	write_image@i,w,c
  6519  004CB2  2614               	addwf	??_write_image,f,c
  6520  004CB4  5025               	movf	write_image@i+1,w,c
  6521  004CB6  2215               	addwfc	??_write_image+1,f,c
  6522  004CB8  C011  F016         	movff	write_image@image,??_write_image+2
  6523  004CBC  C012  F017         	movff	write_image@image+1,??_write_image+3
  6524  004CC0  5014               	movf	??_write_image,w,c
  6525  004CC2  2616               	addwf	??_write_image+2,f,c
  6526  004CC4  5015               	movf	??_write_image+1,w,c
  6527  004CC6  2217               	addwfc	??_write_image+3,f,c
  6528  004CC8  C016  FFF6         	movff	??_write_image+2,tblptrl
  6529  004CCC  C017  FFF7         	movff	??_write_image+3,tblptrh
  6530  004CD0                     	if	0	;tblptru may be non-zero
  6531  004CD0                     	endif
  6532  004CD0                     	if	0	;tblptru may be non-zero
  6533  004CD0                     	endif
  6534  004CD0  0008               	tblrd		*
  6535  004CD2  CFF5 F02A          	movff	tablat,write_image@val
  6536                           
  6537                           ;LCDgraphic.c: 1028: unsigned char n_val = val;
  6538  004CD6  C02A  F01E         	movff	write_image@val,write_image@n_val
  6539                           
  6540                           ;LCDgraphic.c: 1033: if (top_to_bottom)
  6541  004CDA  5013               	movf	write_image@top_to_bottom,w,c
  6542  004CDC  B4D8               	btfsc	status,2,c
  6543  004CDE  D054               	goto	l4109
  6544                           
  6545                           ;LCDgraphic.c: 1034: {
  6546                           ;LCDgraphic.c: 1035: for (int j = 0; j < 8; j++)
  6547  004CE0  0E00               	movlw	0
  6548  004CE2  6E21               	movwf	write_image@j+1,c
  6549  004CE4  0E00               	movlw	0
  6550  004CE6  6E20               	movwf	write_image@j,c
  6551  004CE8                     l4099:
  6552  004CE8  BE21               	btfsc	write_image@j+1,7,c
  6553  004CEA  D006               	goto	l4103
  6554  004CEC  5021               	movf	write_image@j+1,w,c
  6555  004CEE  E14C               	bnz	l4109
  6556  004CF0  0E08               	movlw	8
  6557  004CF2  5C20               	subwf	write_image@j,w,c
  6558  004CF4  B0D8               	btfsc	status,0,c
  6559  004CF6  D048               	goto	l4109
  6560  004CF8                     l4103:
  6561                           
  6562                           ;LCDgraphic.c: 1036: {
  6563                           ;LCDgraphic.c: 1037: n_val = (val << 7) | ((val & 0b00000010) << 5)
  6564                           ;LCDgraphic.c: 1038: | ((val & 0b00000100) << 3) | ((val & 0b00001000) << 1)
  6565                           ;LCDgraphic.c: 1039: | ((val & 0b10000000) >> 7) | ((val & 0b01000000) >> 5)
  6566                           ;LCDgraphic.c: 1040: | ((val & 0b00100000) >> 3) | ((val & 0b00010000) >> 1);
  6567  004CF8  C02A  F014         	movff	write_image@val,??_write_image
  6568  004CFC  90D8               	bcf	status,0,c
  6569  004CFE  3214               	rrcf	??_write_image,f,c
  6570  004D00  0E08               	movlw	8
  6571  004D02  1614               	andwf	??_write_image,f,c
  6572  004D04  C02A  F015         	movff	write_image@val,??_write_image+1
  6573  004D08  90D8               	bcf	status,0,c
  6574  004D0A  3215               	rrcf	??_write_image+1,f,c
  6575  004D0C  90D8               	bcf	status,0,c
  6576  004D0E  3215               	rrcf	??_write_image+1,f,c
  6577  004D10  90D8               	bcf	status,0,c
  6578  004D12  3215               	rrcf	??_write_image+1,f,c
  6579  004D14  0E04               	movlw	4
  6580  004D16  1615               	andwf	??_write_image+1,f,c
  6581  004D18  C02A  F016         	movff	write_image@val,??_write_image+2
  6582  004D1C  0E05               	movlw	5
  6583  004D1E  6E17               	movwf	(??_write_image+3)& (0+255),c
  6584  004D20                     u4455:
  6585  004D20  90D8               	bcf	status,0,c
  6586  004D22  3216               	rrcf	??_write_image+2,f,c
  6587  004D24  2E17               	decfsz	(??_write_image+3)& (0+255),f,c
  6588  004D26  D7FC               	goto	u4455
  6589  004D28  0E02               	movlw	2
  6590  004D2A  1616               	andwf	??_write_image+2,f,c
  6591  004D2C  6A18               	clrf	(??_write_image+4)& (0+255),c
  6592  004D2E  AE2A               	btfss	write_image@val,7,c
  6593  004D30  D001               	bra	u4465
  6594  004D32  2A18               	incf	(??_write_image+4)& (0+255),f,c
  6595  004D34                     u4465:
  6596  004D34  0E01               	movlw	1
  6597  004D36  1618               	andwf	??_write_image+4,f,c
  6598  004D38  C02A  F019         	movff	write_image@val,??_write_image+5
  6599  004D3C  0E08               	movlw	8
  6600  004D3E  1619               	andwf	??_write_image+5,f,c
  6601  004D40  90D8               	bcf	status,0,c
  6602  004D42  3419               	rlcf	??_write_image+5,w,c
  6603  004D44  6E1A               	movwf	(??_write_image+6)& (0+255),c
  6604  004D46  C02A  F01B         	movff	write_image@val,??_write_image+7
  6605  004D4A  0E04               	movlw	4
  6606  004D4C  161B               	andwf	??_write_image+7,f,c
  6607  004D4E  90D8               	bcf	status,0,c
  6608  004D50  361B               	rlcf	??_write_image+7,f,c
  6609  004D52  90D8               	bcf	status,0,c
  6610  004D54  361B               	rlcf	??_write_image+7,f,c
  6611  004D56  90D8               	bcf	status,0,c
  6612  004D58  361B               	rlcf	??_write_image+7,f,c
  6613  004D5A  C02A  F01C         	movff	write_image@val,??_write_image+8
  6614  004D5E  0E02               	movlw	2
  6615  004D60  161C               	andwf	??_write_image+8,f,c
  6616  004D62  0E05               	movlw	5
  6617  004D64  6E1D               	movwf	(??_write_image+9)& (0+255),c
  6618  004D66                     u4475:
  6619  004D66  90D8               	bcf	status,0,c
  6620  004D68  361C               	rlcf	??_write_image+8,f,c
  6621  004D6A  2E1D               	decfsz	(??_write_image+9)& (0+255),f,c
  6622  004D6C  D7FC               	goto	u4475
  6623  004D6E  402A               	rrncf	write_image@val,w,c
  6624  004D70  0B80               	andlw	128
  6625  004D72  101C               	iorwf	??_write_image+8,w,c
  6626  004D74  101B               	iorwf	??_write_image+7,w,c
  6627  004D76  101A               	iorwf	??_write_image+6,w,c
  6628  004D78  1018               	iorwf	??_write_image+4,w,c
  6629  004D7A  1016               	iorwf	??_write_image+2,w,c
  6630  004D7C  1015               	iorwf	??_write_image+1,w,c
  6631  004D7E  1014               	iorwf	??_write_image,w,c
  6632  004D80  6E1E               	movwf	write_image@n_val,c
  6633  004D82  4A20               	infsnz	write_image@j,f,c
  6634  004D84  2A21               	incf	write_image@j+1,f,c
  6635  004D86  D7B0               	goto	l4099
  6636  004D88                     l4109:
  6637                           
  6638                           ;LCDgraphic.c: 1041: }
  6639                           ;LCDgraphic.c: 1042: }
  6640                           ;LCDgraphic.c: 1043: LCDcmd(n_val);
  6641  004D88  501E               	movf	write_image@n_val,w,c
  6642  004D8A  EC43  F01C         	call	_LCDcmd
  6643  004D8E  4A24               	infsnz	write_image@i,f,c
  6644  004D90  2A25               	incf	write_image@i+1,f,c
  6645  004D92  BE25               	btfsc	write_image@i+1,7,c
  6646  004D94  D783               	goto	l4091
  6647  004D96  5025               	movf	write_image@i+1,w,c
  6648  004D98  E101               	bnz	l4115
  6649  004D9A  D77A               	goto	L10
  6650  004D9C                     l4115:
  6651                           
  6652                           ;LCDgraphic.c: 1044: }
  6653                           ;LCDgraphic.c: 1045: LCDpage(1,page);
  6654  004D9C  C028  F00F         	movff	write_image@page,LCDpage@page
  6655  004DA0  0E01               	movlw	1
  6656  004DA2  EC89  F01D         	call	_LCDpage
  6657                           
  6658                           ;LCDgraphic.c: 1046: LCDy(1,0);
  6659  004DA6  0E00               	movlw	0
  6660  004DA8  6E05               	movwf	LCDy@value,c
  6661  004DAA  0E01               	movlw	1
  6662  004DAC  ECDA  F01D         	call	_LCDy
  6663                           
  6664                           ;LCDgraphic.c: 1047: LATCbits.LATC2=1;
  6665  004DB0  848B               	bsf	3979,2,c	;volatile
  6666                           
  6667                           ;LCDgraphic.c: 1048: LATCbits.LATC1=0;
  6668  004DB2  928B               	bcf	3979,1,c	;volatile
  6669                           
  6670                           ;LCDgraphic.c: 1049: for (int i = 0;i < 64; i++)
  6671  004DB4  0E00               	movlw	0
  6672  004DB6  6E27               	movwf	write_image@i_567+1,c
  6673  004DB8  0E00               	movlw	0
  6674  004DBA  6E26               	movwf	write_image@i_567,c
  6675  004DBC  BE27               	btfsc	write_image@i_567+1,7,c
  6676  004DBE  D008               	goto	l4127
  6677  004DC0  5027               	movf	write_image@i_567+1,w,c
  6678  004DC2  E105               	bnz	u4500
  6679  004DC4  0E40               	movlw	64
  6680  004DC6  5C26               	subwf	write_image@i_567,w,c
  6681  004DC8  B0D8               	btfsc	status,0,c
  6682  004DCA  D086               	goto	l4151
  6683  004DCC  D001               	goto	l4127
  6684  004DCE                     u4500:
  6685  004DCE  D084               	goto	l4151
  6686  004DD0                     l4127:
  6687                           
  6688                           ;LCDgraphic.c: 1050: {
  6689                           ;LCDgraphic.c: 1051: unsigned char val = image[page*128+64+i];
  6690  004DD0  C028  F014         	movff	write_image@page,??_write_image
  6691  004DD4  C029  F015         	movff	write_image@page+1,??_write_image+1
  6692  004DD8  0E07               	movlw	7
  6693  004DDA                     u4515:
  6694  004DDA  90D8               	bcf	status,0,c
  6695  004DDC  3614               	rlcf	??_write_image,f,c
  6696  004DDE  3615               	rlcf	??_write_image+1,f,c
  6697  004DE0  2EE8               	decfsz	wreg,f,c
  6698  004DE2  D7FB               	goto	u4515
  6699  004DE4  5026               	movf	write_image@i_567,w,c
  6700  004DE6  2614               	addwf	??_write_image,f,c
  6701  004DE8  5027               	movf	write_image@i_567+1,w,c
  6702  004DEA  2215               	addwfc	??_write_image+1,f,c
  6703  004DEC  0E40               	movlw	64
  6704  004DEE  2614               	addwf	??_write_image,f,c
  6705  004DF0  0E00               	movlw	0
  6706  004DF2  2215               	addwfc	??_write_image+1,f,c
  6707  004DF4  C011  F016         	movff	write_image@image,??_write_image+2
  6708  004DF8  C012  F017         	movff	write_image@image+1,??_write_image+3
  6709  004DFC  5014               	movf	??_write_image,w,c
  6710  004DFE  2616               	addwf	??_write_image+2,f,c
  6711  004E00  5015               	movf	??_write_image+1,w,c
  6712  004E02  2217               	addwfc	??_write_image+3,f,c
  6713  004E04  C016  FFF6         	movff	??_write_image+2,tblptrl
  6714  004E08  C017  FFF7         	movff	??_write_image+3,tblptrh
  6715  004E0C                     	if	0	;tblptru may be non-zero
  6716  004E0C                     	endif
  6717  004E0C                     	if	0	;tblptru may be non-zero
  6718  004E0C                     	endif
  6719  004E0C  0008               	tblrd		*
  6720  004E0E  CFF5 F02B          	movff	tablat,write_image@val_568
  6721                           
  6722                           ;LCDgraphic.c: 1052: unsigned char n_val = val;
  6723  004E12  C02B  F01F         	movff	write_image@val_568,write_image@n_val_569
  6724                           
  6725                           ;LCDgraphic.c: 1057: if (top_to_bottom)
  6726  004E16  5013               	movf	write_image@top_to_bottom,w,c
  6727  004E18  B4D8               	btfsc	status,2,c
  6728  004E1A  D054               	goto	l4145
  6729                           
  6730                           ;LCDgraphic.c: 1058: {
  6731                           ;LCDgraphic.c: 1059: for (int j = 0; j < 8; j++)
  6732  004E1C  0E00               	movlw	0
  6733  004E1E  6E23               	movwf	write_image@j_570+1,c
  6734  004E20  0E00               	movlw	0
  6735  004E22  6E22               	movwf	write_image@j_570,c
  6736  004E24                     l4135:
  6737  004E24  BE23               	btfsc	write_image@j_570+1,7,c
  6738  004E26  D006               	goto	l4139
  6739  004E28  5023               	movf	write_image@j_570+1,w,c
  6740  004E2A  E14C               	bnz	l4145
  6741  004E2C  0E08               	movlw	8
  6742  004E2E  5C22               	subwf	write_image@j_570,w,c
  6743  004E30  B0D8               	btfsc	status,0,c
  6744  004E32  D048               	goto	l4145
  6745  004E34                     l4139:
  6746                           
  6747                           ;LCDgraphic.c: 1060: {
  6748                           ;LCDgraphic.c: 1061: n_val = (val << 7) | ((val & 0b00000010) << 5)
  6749                           ;LCDgraphic.c: 1062: | ((val & 0b00000100) << 3) | ((val & 0b00001000) << 1)
  6750                           ;LCDgraphic.c: 1063: | ((val & 0b10000000) >> 7) | ((val & 0b01000000) >> 5)
  6751                           ;LCDgraphic.c: 1064: | ((val & 0b00100000) >> 3) | ((val & 0b00010000) >> 1);
  6752  004E34  C02B  F014         	movff	write_image@val_568,??_write_image
  6753  004E38  90D8               	bcf	status,0,c
  6754  004E3A  3214               	rrcf	??_write_image,f,c
  6755  004E3C  0E08               	movlw	8
  6756  004E3E  1614               	andwf	??_write_image,f,c
  6757  004E40  C02B  F015         	movff	write_image@val_568,??_write_image+1
  6758  004E44  90D8               	bcf	status,0,c
  6759  004E46  3215               	rrcf	??_write_image+1,f,c
  6760  004E48  90D8               	bcf	status,0,c
  6761  004E4A  3215               	rrcf	??_write_image+1,f,c
  6762  004E4C  90D8               	bcf	status,0,c
  6763  004E4E  3215               	rrcf	??_write_image+1,f,c
  6764  004E50  0E04               	movlw	4
  6765  004E52  1615               	andwf	??_write_image+1,f,c
  6766  004E54  C02B  F016         	movff	write_image@val_568,??_write_image+2
  6767  004E58  0E05               	movlw	5
  6768  004E5A  6E17               	movwf	(??_write_image+3)& (0+255),c
  6769  004E5C                     u4545:
  6770  004E5C  90D8               	bcf	status,0,c
  6771  004E5E  3216               	rrcf	??_write_image+2,f,c
  6772  004E60  2E17               	decfsz	(??_write_image+3)& (0+255),f,c
  6773  004E62  D7FC               	goto	u4545
  6774  004E64  0E02               	movlw	2
  6775  004E66  1616               	andwf	??_write_image+2,f,c
  6776  004E68  6A18               	clrf	(??_write_image+4)& (0+255),c
  6777  004E6A  AE2B               	btfss	write_image@val_568,7,c
  6778  004E6C  D001               	bra	u4555
  6779  004E6E  2A18               	incf	(??_write_image+4)& (0+255),f,c
  6780  004E70                     u4555:
  6781  004E70  0E01               	movlw	1
  6782  004E72  1618               	andwf	??_write_image+4,f,c
  6783  004E74  C02B  F019         	movff	write_image@val_568,??_write_image+5
  6784  004E78  0E08               	movlw	8
  6785  004E7A  1619               	andwf	??_write_image+5,f,c
  6786  004E7C  90D8               	bcf	status,0,c
  6787  004E7E  3419               	rlcf	??_write_image+5,w,c
  6788  004E80  6E1A               	movwf	(??_write_image+6)& (0+255),c
  6789  004E82  C02B  F01B         	movff	write_image@val_568,??_write_image+7
  6790  004E86  0E04               	movlw	4
  6791  004E88  161B               	andwf	??_write_image+7,f,c
  6792  004E8A  90D8               	bcf	status,0,c
  6793  004E8C  361B               	rlcf	??_write_image+7,f,c
  6794  004E8E  90D8               	bcf	status,0,c
  6795  004E90  361B               	rlcf	??_write_image+7,f,c
  6796  004E92  90D8               	bcf	status,0,c
  6797  004E94  361B               	rlcf	??_write_image+7,f,c
  6798  004E96  C02B  F01C         	movff	write_image@val_568,??_write_image+8
  6799  004E9A  0E02               	movlw	2
  6800  004E9C  161C               	andwf	??_write_image+8,f,c
  6801  004E9E  0E05               	movlw	5
  6802  004EA0  6E1D               	movwf	(??_write_image+9)& (0+255),c
  6803  004EA2                     u4565:
  6804  004EA2  90D8               	bcf	status,0,c
  6805  004EA4  361C               	rlcf	??_write_image+8,f,c
  6806  004EA6  2E1D               	decfsz	(??_write_image+9)& (0+255),f,c
  6807  004EA8  D7FC               	goto	u4565
  6808  004EAA  402B               	rrncf	write_image@val_568,w,c
  6809  004EAC  0B80               	andlw	128
  6810  004EAE  101C               	iorwf	??_write_image+8,w,c
  6811  004EB0  101B               	iorwf	??_write_image+7,w,c
  6812  004EB2  101A               	iorwf	??_write_image+6,w,c
  6813  004EB4  1018               	iorwf	??_write_image+4,w,c
  6814  004EB6  1016               	iorwf	??_write_image+2,w,c
  6815  004EB8  1015               	iorwf	??_write_image+1,w,c
  6816  004EBA  1014               	iorwf	??_write_image,w,c
  6817  004EBC  6E1F               	movwf	write_image@n_val_569,c
  6818  004EBE  4A22               	infsnz	write_image@j_570,f,c
  6819  004EC0  2A23               	incf	write_image@j_570+1,f,c
  6820  004EC2  D7B0               	goto	l4135
  6821  004EC4                     l4145:
  6822                           
  6823                           ;LCDgraphic.c: 1065: }
  6824                           ;LCDgraphic.c: 1066: }
  6825                           ;LCDgraphic.c: 1067: LCDcmd(n_val);
  6826  004EC4  501F               	movf	write_image@n_val_569,w,c
  6827  004EC6  EC43  F01C         	call	_LCDcmd
  6828  004ECA  4A26               	infsnz	write_image@i_567,f,c
  6829  004ECC  2A27               	incf	write_image@i_567+1,f,c
  6830  004ECE  BE27               	btfsc	write_image@i_567+1,7,c
  6831  004ED0  D77F               	goto	l4127
  6832  004ED2  5027               	movf	write_image@i_567+1,w,c
  6833  004ED4  E101               	bnz	l4151
  6834  004ED6  D776               	goto	L11
  6835  004ED8                     l4151:
  6836  004ED8  4A28               	infsnz	write_image@page,f,c
  6837  004EDA  2A29               	incf	write_image@page+1,f,c
  6838  004EDC  BE29               	btfsc	write_image@page+1,7,c
  6839  004EDE  D6C4               	goto	l4079
  6840  004EE0  5029               	movf	write_image@page+1,w,c
  6841  004EE2  E101               	bnz	l378
  6842  004EE4  D6BB               	goto	L12
  6843  004EE6                     l378:
  6844  004EE6  0012               	return		;funcret
  6845  004EE8                     __end_of_write_image:
  6846                           	opt stack 0
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           postdec1	equ	0xFE5
  6856                           fsr1h	equ	0xFE2
  6857                           fsr1l	equ	0xFE1
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           postdec2	equ	0xFDD
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _strcat *****************
  6866 ;; Defined at:
  6867 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/strcat.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  to              2    0[COMRAM] PTR unsigned char 
  6870 ;;		 -> main@bottom_buf(40), 
  6871 ;;  from            2    2[COMRAM] PTR const unsigned char 
  6872 ;;		 -> main@buf_360(13), 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  cp              2    4[COMRAM] PTR unsigned char 
  6875 ;;		 -> main@bottom_buf(40), 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  2    0[COMRAM] PTR unsigned char 
  6878 ;; Registers used:
  6879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6885 ;;      Params:         4       0       0       0       0       0       0       0       0
  6886 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6888 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6889 ;;Total ram usage:        6 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_main
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text4
  6899  003A86                     __ptext4:
  6900                           	opt stack 0
  6901  003A86                     _strcat:
  6902                           	opt stack 30
  6903                           
  6904                           ;incstack = 0
  6905  003A86  C001  F005         	movff	strcat@to,strcat@cp
  6906  003A8A  C002  F006         	movff	strcat@to+1,strcat@cp+1
  6907  003A8E  D002               	goto	l4625
  6908  003A90                     l4623:
  6909  003A90  4A05               	infsnz	strcat@cp,f,c
  6910  003A92  2A06               	incf	strcat@cp+1,f,c
  6911  003A94                     l4625:
  6912  003A94  C005  FFD9         	movff	strcat@cp,fsr2l
  6913  003A98  C006  FFDA         	movff	strcat@cp+1,fsr2h
  6914  003A9C  50DF               	movf	indf2,w,c
  6915  003A9E  B4D8               	btfsc	status,2,c
  6916  003AA0  D005               	goto	l4629
  6917  003AA2  D7F6               	goto	l4623
  6918  003AA4                     l4627:
  6919  003AA4  4A05               	infsnz	strcat@cp,f,c
  6920  003AA6  2A06               	incf	strcat@cp+1,f,c
  6921  003AA8  4A03               	infsnz	strcat@from,f,c
  6922  003AAA  2A04               	incf	strcat@from+1,f,c
  6923  003AAC                     l4629:
  6924  003AAC  C003  FFD9         	movff	strcat@from,fsr2l
  6925  003AB0  C004  FFDA         	movff	strcat@from+1,fsr2h
  6926  003AB4  C005  FFE1         	movff	strcat@cp,fsr1l
  6927  003AB8  C006  FFE2         	movff	strcat@cp+1,fsr1h
  6928  003ABC  CFDF FFE7          	movff	indf2,indf1
  6929  003AC0  50E7               	movf	indf1,w,c
  6930  003AC2  B4D8               	btfsc	status,2,c
  6931  003AC4  0012               	return	
  6932  003AC6  D7EE               	goto	l4627
  6933  003AC8                     __end_of_strcat:
  6934                           	opt stack 0
  6935                           tblptru	equ	0xFF8
  6936                           tblptrh	equ	0xFF7
  6937                           tblptrl	equ	0xFF6
  6938                           tablat	equ	0xFF5
  6939                           prodh	equ	0xFF4
  6940                           prodl	equ	0xFF3
  6941                           postinc0	equ	0xFEE
  6942                           wreg	equ	0xFE8
  6943                           indf1	equ	0xFE7
  6944                           postdec1	equ	0xFE5
  6945                           fsr1h	equ	0xFE2
  6946                           fsr1l	equ	0xFE1
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _sprintf *****************
  6955 ;; Defined at:
  6956 ;;		line 492 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  sp              2   76[COMRAM] PTR unsigned char 
  6959 ;;		 -> main@buf_360(13), main@bottom_buf(40), main@buf_344(10), main@buf(10), 
  6960 ;;  f               2   78[COMRAM] PTR const unsigned char 
  6961 ;;		 -> STR_9(9), STR_8(9), STR_7(8), STR_6(10), 
  6962 ;;		 -> STR_5(10), STR_4(7), STR_3(7), STR_2(7), 
  6963 ;;		 -> STR_1(6), 
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;  tmpval          4   13[BANK0 ] struct .
  6966 ;;  val             4    7[BANK0 ] unsigned long 
  6967 ;;  fval            3   19[BANK0 ] unsigned long 
  6968 ;;  cp              3    0        PTR const unsigned char 
  6969 ;;  prec            2   17[BANK0 ] int 
  6970 ;;  exp             2   11[BANK0 ] int 
  6971 ;;  flag            2    5[BANK0 ] unsigned short 
  6972 ;;  ap              2    3[BANK0 ] PTR void [1]
  6973 ;;		 -> ?_sprintf(2), 
  6974 ;;  len             2    0        unsigned int 
  6975 ;;  width           2    0        int 
  6976 ;;  c               1   22[BANK0 ] char 
  6977 ;;  d               1    0        unsigned char 
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  2   76[COMRAM] int 
  6980 ;; Registers used:
  6981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6987 ;;      Params:         7       0       0       0       0       0       0       0       0
  6988 ;;      Locals:         0      23       0       0       0       0       0       0       0
  6989 ;;      Temps:          6       0       0       0       0       0       0       0       0
  6990 ;;      Totals:        13      23       0       0       0       0       0       0       0
  6991 ;;Total ram usage:       36 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    3
  6994 ;; This function calls:
  6995 ;;		___awdiv
  6996 ;;		___ftadd
  6997 ;;		___ftge
  6998 ;;		___ftmul
  6999 ;;		___ftneg
  7000 ;;		___ftsub
  7001 ;;		___fttol
  7002 ;;		___lldiv
  7003 ;;		___llmod
  7004 ;;		___lltoft
  7005 ;;		___wmul
  7006 ;;		__div_to_l_
  7007 ;;		__tdiv_to_l_
  7008 ;;		_fround
  7009 ;;		_isdigit
  7010 ;;		_scale
  7011 ;; This function is called by:
  7012 ;;		_main
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text5
  7017  005C32                     __ptext5:
  7018                           	opt stack 0
  7019  005C32                     _sprintf:
  7020                           	opt stack 27
  7021                           
  7022                           ;doprnt.c: 494: va_list ap;
  7023                           ;doprnt.c: 499: signed char c;
  7024                           ;doprnt.c: 501: int width;
  7025                           ;doprnt.c: 504: int prec;
  7026                           ;doprnt.c: 508: unsigned short flag;
  7027                           ;doprnt.c: 515: char d;
  7028                           ;doprnt.c: 516: double fval;
  7029                           ;doprnt.c: 517: int exp;
  7030                           ;doprnt.c: 523: union {
  7031                           ;doprnt.c: 524: unsigned long vd;
  7032                           ;doprnt.c: 525: double integ;
  7033                           ;doprnt.c: 526: } tmpval;
  7034                           ;doprnt.c: 528: unsigned long val;
  7035                           ;doprnt.c: 529: unsigned len;
  7036                           ;doprnt.c: 530: const char * cp;
  7037                           ;doprnt.c: 533: *ap = __va_start();
  7038                           
  7039                           ;incstack = 0
  7040  005C32  0E51               	movlw	low (?_sprintf+4)
  7041  005C34  0100               	movlb	0	; () banked
  7042  005C36  6F63               	movwf	sprintf@ap& (0+255),b
  7043  005C38  0E00               	movlw	high (?_sprintf+4)
  7044  005C3A  0100               	movlb	0	; () banked
  7045  005C3C  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  7046                           
  7047                           ;doprnt.c: 536: while(c = *f++) {
  7048  005C3E  D3C3               	goto	l4381
  7049  005C40                     l4183:
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;doprnt.c: 538: if(c != '%')
  7053  005C40  0E25               	movlw	37
  7054  005C42  0100               	movlb	0	; () banked
  7055  005C44  1976               	xorwf	sprintf@c& (0+255),w,b
  7056  005C46  B4D8               	btfsc	status,2,c
  7057  005C48  D007               	goto	l4189
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;doprnt.c: 540: {
  7061                           ;doprnt.c: 541: ((*sp++ = (c)));
  7062  005C4A  C04D  FFD9         	movff	sprintf@sp,fsr2l
  7063  005C4E  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  7064  005C52  C076  FFDF         	movff	sprintf@c,indf2
  7065  005C56  D3B5               	goto	l4379
  7066  005C58                     l4189:
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;doprnt.c: 543: }
  7070                           ;doprnt.c: 548: flag = 0;
  7071  005C58  0E00               	movlw	0
  7072  005C5A  0100               	movlb	0	; () banked
  7073  005C5C  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  7074  005C5E  0E00               	movlw	0
  7075  005C60  6F65               	movwf	sprintf@flag& (0+255),b
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;doprnt.c: 611: if(*f == '.') {
  7079  005C62  C04F  FFF6         	movff	sprintf@f,tblptrl
  7080  005C66  C050  FFF7         	movff	sprintf@f+1,tblptrh
  7081  005C6A                     	if	0	;tblptru may be non-zero
  7082  005C6A                     	endif
  7083  005C6A                     	if	0	;tblptru may be non-zero
  7084  005C6A                     	endif
  7085  005C6A  0008               	tblrd		*
  7086  005C6C  50F5               	movf	tablat,w,c
  7087  005C6E  0A2E               	xorlw	46
  7088  005C70  A4D8               	btfss	status,2,c
  7089  005C72  D032               	goto	l4203
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;doprnt.c: 612: flag |= 0x4000;
  7093  005C74  0100               	movlb	0	; () banked
  7094  005C76  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  7095                           
  7096                           ;doprnt.c: 613: f++;
  7097  005C78  4A4F               	infsnz	sprintf@f,f,c
  7098  005C7A  2A50               	incf	sprintf@f+1,f,c
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;doprnt.c: 620: {
  7102                           ;doprnt.c: 621: prec = 0;
  7103  005C7C  0E00               	movlw	0
  7104  005C7E  0100               	movlb	0	; () banked
  7105  005C80  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  7106  005C82  0E00               	movlw	0
  7107  005C84  6F71               	movwf	sprintf@prec& (0+255),b
  7108                           
  7109                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7110  005C86  D01D               	goto	l4201
  7111  005C88                     l4197:
  7112                           
  7113                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7114  005C88  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  7115  005C8C  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  7116  005C90  0E00               	movlw	0
  7117  005C92  6E12               	movwf	___wmul@multiplicand+1,c
  7118  005C94  0E0A               	movlw	10
  7119  005C96  6E11               	movwf	___wmul@multiplicand,c
  7120  005C98  ECAD  F01C         	call	___wmul	;wreg free
  7121  005C9C  C04F  FFF6         	movff	sprintf@f,tblptrl
  7122  005CA0  C050  FFF7         	movff	sprintf@f+1,tblptrh
  7123  005CA4                     	if	0	;tblptru may be non-zero
  7124  005CA4                     	endif
  7125  005CA4                     	if	0	;tblptru may be non-zero
  7126  005CA4                     	endif
  7127  005CA4  0008               	tblrd		*
  7128  005CA6  50F5               	movf	tablat,w,c
  7129  005CA8  260F               	addwf	?___wmul,f,c
  7130  005CAA  0E00               	movlw	0
  7131  005CAC  2210               	addwfc	?___wmul+1,f,c
  7132  005CAE  0ED0               	movlw	208
  7133  005CB0  240F               	addwf	?___wmul,w,c
  7134  005CB2  0100               	movlb	0	; () banked
  7135  005CB4  6F71               	movwf	sprintf@prec& (0+255),b
  7136  005CB6  0EFF               	movlw	255
  7137  005CB8  2010               	addwfc	?___wmul+1,w,c
  7138  005CBA  0100               	movlb	0	; () banked
  7139  005CBC  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  7140                           
  7141                           ; BSR set to: 0
  7142  005CBE  4A4F               	infsnz	sprintf@f,f,c
  7143  005CC0  2A50               	incf	sprintf@f+1,f,c
  7144  005CC2                     l4201:
  7145                           
  7146                           ; BSR set to: 0
  7147  005CC2  C04F  FFF6         	movff	sprintf@f,tblptrl
  7148  005CC6  C050  FFF7         	movff	sprintf@f+1,tblptrh
  7149  005CCA                     	if	0	;tblptru may be non-zero
  7150  005CCA                     	endif
  7151  005CCA                     	if	0	;tblptru may be non-zero
  7152  005CCA                     	endif
  7153  005CCA  0008               	tblrd		*
  7154  005CCC  50F5               	movf	tablat,w,c
  7155  005CCE  EC58  F01C         	call	_isdigit
  7156  005CD2  A0D8               	btfss	status,0,c
  7157  005CD4  D00C               	goto	l4211
  7158  005CD6  D7D8               	goto	l4197
  7159  005CD8                     l4203:
  7160                           
  7161                           ;doprnt.c: 626: prec = 0;
  7162  005CD8  0E00               	movlw	0
  7163  005CDA  0100               	movlb	0	; () banked
  7164  005CDC  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  7165  005CDE  0E00               	movlw	0
  7166  005CE0  6F71               	movwf	sprintf@prec& (0+255),b
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;doprnt.c: 628: flag |= 0x1000;
  7170  005CE2  0100               	movlb	0	; () banked
  7171  005CE4  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;doprnt.c: 630: }
  7175                           ;doprnt.c: 635: switch(c = *f++) {
  7176  005CE6  D003               	goto	l4211
  7177  005CE8                     l4207:
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;doprnt.c: 663: flag |= 0x400;
  7181  005CE8  0100               	movlb	0	; () banked
  7182  005CEA  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  7183                           
  7184                           ;doprnt.c: 664: break;
  7185  005CEC  D012               	goto	l4213
  7186  005CEE                     l4211:
  7187  005CEE  C04F  FFF6         	movff	sprintf@f,tblptrl
  7188  005CF2  C050  FFF7         	movff	sprintf@f+1,tblptrh
  7189  005CF6  4A4F               	infsnz	sprintf@f,f,c
  7190  005CF8  2A50               	incf	sprintf@f+1,f,c
  7191  005CFA                     	if	0	;tblptru may be non-zero
  7192  005CFA                     	endif
  7193  005CFA                     	if	0	;tblptru may be non-zero
  7194  005CFA                     	endif
  7195  005CFA  0008               	tblrd		*
  7196  005CFC  CFF5 F076          	movff	tablat,sprintf@c
  7197  005D00  0100               	movlb	0	; () banked
  7198  005D02  5176               	movf	sprintf@c& (0+255),w,b
  7199                           
  7200                           ; Switch size 1, requested type "space"
  7201                           ; Number of cases is 2, Range of values is 0 to 102
  7202                           ; switch strategies available:
  7203                           ; Name         Instructions Cycles
  7204                           ; simple_byte            7     4 (average)
  7205                           ;	Chosen strategy is simple_byte
  7206  005D04  0A00               	xorlw	0	; case 0
  7207  005D06  B4D8               	btfsc	status,2,c
  7208  005D08  D36B               	goto	l4383
  7209  005D0A  0A66               	xorlw	102	; case 102
  7210  005D0C  B4D8               	btfsc	status,2,c
  7211  005D0E  D7EC               	goto	l4207
  7212  005D10  D35A               	goto	l4381
  7213  005D12                     l4213:
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;doprnt.c: 825: if(flag & (0x700)) {
  7217  005D12  0E07               	movlw	7
  7218  005D14  0100               	movlb	0	; () banked
  7219  005D16  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  7220  005D18  B4D8               	btfsc	status,2,c
  7221  005D1A  D306               	goto	l4361
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;doprnt.c: 827: if(flag & 0x1000)
  7225  005D1C  0100               	movlb	0	; () banked
  7226  005D1E  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  7227  005D20  D005               	goto	l4219
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;doprnt.c: 829: prec = 6;
  7231  005D22  0E00               	movlw	0
  7232  005D24  0100               	movlb	0	; () banked
  7233  005D26  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  7234  005D28  0E06               	movlw	6
  7235  005D2A  6F71               	movwf	sprintf@prec& (0+255),b
  7236  005D2C                     l4219:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7240  005D2C  C063  FFD9         	movff	sprintf@ap,fsr2l
  7241  005D30  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  7242  005D34  CFDE F073          	movff	postinc2,sprintf@fval
  7243  005D38  CFDE F074          	movff	postinc2,sprintf@fval+1
  7244  005D3C  CFDD F075          	movff	postdec2,sprintf@fval+2
  7245                           
  7246                           ; BSR set to: 0
  7247  005D40  0E03               	movlw	3
  7248  005D42  0100               	movlb	0	; () banked
  7249  005D44  2763               	addwf	sprintf@ap& (0+255),f,b
  7250  005D46  0E00               	movlw	0
  7251  005D48  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;doprnt.c: 831: if(fval < 0.0) {
  7255  005D4A  0100               	movlb	0	; () banked
  7256  005D4C  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  7257  005D4E  D011               	goto	l4229
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;doprnt.c: 832: fval = -fval;
  7261  005D50  C073  F001         	movff	sprintf@fval,___ftneg@f1
  7262  005D54  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  7263  005D58  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  7264  005D5C  EC9B  F01C         	call	___ftneg	;wreg free
  7265  005D60  C001  F073         	movff	?___ftneg,sprintf@fval
  7266  005D64  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  7267  005D68  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  7268                           
  7269                           ;doprnt.c: 833: flag |= 0x03;
  7270  005D6C  0E03               	movlw	3
  7271  005D6E  0100               	movlb	0	; () banked
  7272  005D70  1365               	iorwf	sprintf@flag& (0+255),f,b
  7273  005D72                     l4229:
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;doprnt.c: 834: }
  7277                           ;doprnt.c: 835: exp = 0;
  7278  005D72  0E00               	movlw	0
  7279  005D74  0100               	movlb	0	; () banked
  7280  005D76  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  7281  005D78  0E00               	movlw	0
  7282  005D7A  6F6B               	movwf	sprintf@exp& (0+255),b
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;doprnt.c: 836: if( fval!=0) {
  7286  005D7C  0100               	movlb	0	; () banked
  7287  005D7E  5173               	movf	sprintf@fval& (0+255),w,b
  7288  005D80  0100               	movlb	0	; () banked
  7289  005D82  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  7290  005D84  0100               	movlb	0	; () banked
  7291  005D86  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  7292  005D88  B4D8               	btfsc	status,2,c
  7293  005D8A  D08B               	goto	l4257
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7297  005D8C  0E82               	movlw	130
  7298  005D8E  6E54               	movwf	??_sprintf& (0+255),c
  7299  005D90  0EFF               	movlw	255
  7300  005D92  6E55               	movwf	(??_sprintf+1)& (0+255),c
  7301  005D94  C073  F056         	movff	sprintf@fval,??_sprintf+2
  7302  005D98  C074  F057         	movff	sprintf@fval+1,??_sprintf+3
  7303  005D9C  C075  F058         	movff	sprintf@fval+2,??_sprintf+4
  7304  005DA0  C076  F059         	movff	sprintf@fval+3,??_sprintf+5
  7305  005DA4  0E10               	movlw	16
  7306  005DA6  D005               	goto	u4710
  7307  005DA8                     u4715:
  7308  005DA8  90D8               	bcf	status,0,c
  7309  005DAA  3259               	rrcf	??_sprintf+5,f,c
  7310  005DAC  3258               	rrcf	??_sprintf+4,f,c
  7311  005DAE  3257               	rrcf	??_sprintf+3,f,c
  7312  005DB0  3256               	rrcf	??_sprintf+2,f,c
  7313  005DB2                     u4710:
  7314  005DB2  2EE8               	decfsz	wreg,f,c
  7315  005DB4  D7F9               	goto	u4715
  7316  005DB6  5056               	movf	??_sprintf+2,w,c
  7317  005DB8  2454               	addwf	??_sprintf,w,c
  7318  005DBA  0100               	movlb	0	; () banked
  7319  005DBC  6F6B               	movwf	sprintf@exp& (0+255),b
  7320  005DBE  0E00               	movlw	0
  7321  005DC0  2055               	addwfc	??_sprintf+1,w,c
  7322  005DC2  0100               	movlb	0	; () banked
  7323  005DC4  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;doprnt.c: 838: exp--;
  7327  005DC6  0100               	movlb	0	; () banked
  7328  005DC8  076B               	decf	sprintf@exp& (0+255),f,b
  7329  005DCA  A0D8               	btfss	status,0,c
  7330  005DCC  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;doprnt.c: 839: exp *= 3;
  7334  005DCE  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  7335  005DD2  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  7336  005DD6  0E00               	movlw	0
  7337  005DD8  6E12               	movwf	___wmul@multiplicand+1,c
  7338  005DDA  0E03               	movlw	3
  7339  005DDC  6E11               	movwf	___wmul@multiplicand,c
  7340  005DDE  ECAD  F01C         	call	___wmul	;wreg free
  7341  005DE2  C00F  F06B         	movff	?___wmul,sprintf@exp
  7342  005DE6  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  7343                           
  7344                           ;doprnt.c: 840: exp /= 10;
  7345  005DEA  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  7346  005DEE  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  7347  005DF2  0E00               	movlw	0
  7348  005DF4  6E0A               	movwf	___awdiv@divisor+1,c
  7349  005DF6  0E0A               	movlw	10
  7350  005DF8  6E09               	movwf	___awdiv@divisor,c
  7351  005DFA  EC20  F01F         	call	___awdiv	;wreg free
  7352  005DFE  C007  F06B         	movff	?___awdiv,sprintf@exp
  7353  005E02  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  7354                           
  7355                           ;doprnt.c: 841: if(exp < 0)
  7356  005E06  0100               	movlb	0	; () banked
  7357  005E08  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  7358  005E0A  D004               	goto	l4245
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;doprnt.c: 842: exp--;
  7362  005E0C  0100               	movlb	0	; () banked
  7363  005E0E  076B               	decf	sprintf@exp& (0+255),f,b
  7364  005E10  A0D8               	btfss	status,0,c
  7365  005E12  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  7366  005E14                     l4245:
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7370  005E14  0100               	movlb	0	; () banked
  7371  005E16  516B               	movf	sprintf@exp& (0+255),w,b
  7372  005E18  0800               	sublw	0
  7373  005E1A  EC74  F027         	call	_scale
  7374  005E1E  C028  F06D         	movff	?_scale,sprintf@tmpval
  7375  005E22  C029  F06E         	movff	?_scale+1,sprintf@tmpval+1
  7376  005E26  C02A  F06F         	movff	?_scale+2,sprintf@tmpval+2
  7377                           
  7378                           ;doprnt.c: 847: tmpval.integ *= fval;
  7379  005E2A  C06D  F019         	movff	sprintf@tmpval,___ftmul@f1
  7380  005E2E  C06E  F01A         	movff	sprintf@tmpval+1,___ftmul@f1+1
  7381  005E32  C06F  F01B         	movff	sprintf@tmpval+2,___ftmul@f1+2
  7382  005E36  C073  F01C         	movff	sprintf@fval,___ftmul@f2
  7383  005E3A  C074  F01D         	movff	sprintf@fval+1,___ftmul@f2+1
  7384  005E3E  C075  F01E         	movff	sprintf@fval+2,___ftmul@f2+2
  7385  005E42  EC36  F021         	call	___ftmul	;wreg free
  7386  005E46  C019  F06D         	movff	?___ftmul,sprintf@tmpval
  7387  005E4A  C01A  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  7388  005E4E  C01B  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  7389                           
  7390                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7391  005E52  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  7392  005E56  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  7393  005E5A  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  7394  005E5E  0E00               	movlw	0
  7395  005E60  6E04               	movwf	___ftge@ff2,c
  7396  005E62  0E80               	movlw	128
  7397  005E64  6E05               	movwf	___ftge@ff2+1,c
  7398  005E66  0E3F               	movlw	63
  7399  005E68  6E06               	movwf	___ftge@ff2+2,c
  7400  005E6A  ECAA  F01F         	call	___ftge	;wreg free
  7401  005E6E  B0D8               	btfsc	status,0,c
  7402  005E70  D005               	goto	l4253
  7403                           
  7404                           ;doprnt.c: 849: exp--;
  7405  005E72  0100               	movlb	0	; () banked
  7406  005E74  076B               	decf	sprintf@exp& (0+255),f,b
  7407  005E76  A0D8               	btfss	status,0,c
  7408  005E78  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  7409  005E7A  D013               	goto	l4257
  7410  005E7C                     l4253:
  7411                           
  7412                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7413  005E7C  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  7414  005E80  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  7415  005E84  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  7416  005E88  0E00               	movlw	0
  7417  005E8A  6E04               	movwf	___ftge@ff2,c
  7418  005E8C  0E20               	movlw	32
  7419  005E8E  6E05               	movwf	___ftge@ff2+1,c
  7420  005E90  0E41               	movlw	65
  7421  005E92  6E06               	movwf	___ftge@ff2+2,c
  7422  005E94  ECAA  F01F         	call	___ftge	;wreg free
  7423  005E98  A0D8               	btfss	status,0,c
  7424  005E9A  D003               	goto	l4257
  7425                           
  7426                           ;doprnt.c: 851: exp++;
  7427  005E9C  0100               	movlb	0	; () banked
  7428  005E9E  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  7429  005EA0  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  7430  005EA2                     l4257:
  7431                           
  7432                           ;doprnt.c: 852: }
  7433                           ;doprnt.c: 1112: if(prec <= 12)
  7434  005EA2  0100               	movlb	0	; () banked
  7435  005EA4  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  7436  005EA6  D008               	goto	l4259
  7437  005EA8  0100               	movlb	0	; () banked
  7438  005EAA  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  7439  005EAC  E11D               	bnz	l4261
  7440  005EAE  0E0D               	movlw	13
  7441  005EB0  0100               	movlb	0	; () banked
  7442  005EB2  5D71               	subwf	sprintf@prec& (0+255),w,b
  7443  005EB4  B0D8               	btfsc	status,0,c
  7444  005EB6  D018               	goto	l4261
  7445  005EB8                     l4259:
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;doprnt.c: 1113: fval += fround(prec);
  7449  005EB8  C073  F032         	movff	sprintf@fval,___ftadd@f1
  7450  005EBC  C074  F033         	movff	sprintf@fval+1,___ftadd@f1+1
  7451  005EC0  C075  F034         	movff	sprintf@fval+2,___ftadd@f1+2
  7452  005EC4  0100               	movlb	0	; () banked
  7453  005EC6  5171               	movf	sprintf@prec& (0+255),w,b
  7454  005EC8  EC03  F025         	call	_fround
  7455  005ECC  C028  F035         	movff	?_fround,___ftadd@f2
  7456  005ED0  C029  F036         	movff	?_fround+1,___ftadd@f2+1
  7457  005ED4  C02A  F037         	movff	?_fround+2,___ftadd@f2+2
  7458  005ED8  EC2D  F024         	call	___ftadd	;wreg free
  7459  005EDC  C032  F073         	movff	?___ftadd,sprintf@fval
  7460  005EE0  C033  F074         	movff	?___ftadd+1,sprintf@fval+1
  7461  005EE4  C034  F075         	movff	?___ftadd+2,sprintf@fval+2
  7462  005EE8                     l4261:
  7463                           
  7464                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7465  005EE8  0100               	movlb	0	; () banked
  7466  005EEA  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  7467  005EEC  D008               	goto	l4263
  7468  005EEE  0100               	movlb	0	; () banked
  7469  005EF0  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  7470  005EF2  E126               	bnz	l4269
  7471  005EF4  0E0A               	movlw	10
  7472  005EF6  0100               	movlb	0	; () banked
  7473  005EF8  5D6B               	subwf	sprintf@exp& (0+255),w,b
  7474  005EFA  B0D8               	btfsc	status,0,c
  7475  005EFC  D021               	goto	l4269
  7476  005EFE                     l4263:
  7477                           
  7478                           ; BSR set to: 0
  7479  005EFE  0100               	movlb	0	; () banked
  7480  005F00  5173               	movf	sprintf@fval& (0+255),w,b
  7481  005F02  0100               	movlb	0	; () banked
  7482  005F04  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  7483  005F06  0100               	movlb	0	; () banked
  7484  005F08  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  7485  005F0A  B4D8               	btfsc	status,2,c
  7486  005F0C  D05B               	goto	l4283
  7487                           
  7488                           ; BSR set to: 0
  7489  005F0E  C073  F03E         	movff	sprintf@fval,___fttol@f1
  7490  005F12  C074  F03F         	movff	sprintf@fval+1,___fttol@f1+1
  7491  005F16  C075  F040         	movff	sprintf@fval+2,___fttol@f1+2
  7492  005F1A  ECBC  F020         	call	___fttol	;wreg free
  7493  005F1E  503E               	movf	?___fttol,w,c
  7494  005F20  103F               	iorwf	?___fttol+1,w,c
  7495  005F22  1040               	iorwf	?___fttol+2,w,c
  7496  005F24  1041               	iorwf	?___fttol+3,w,c
  7497  005F26  A4D8               	btfss	status,2,c
  7498  005F28  D04D               	goto	l4283
  7499  005F2A  0100               	movlb	0	; () banked
  7500  005F2C  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  7501  005F2E  D04A               	goto	l4283
  7502  005F30  0100               	movlb	0	; () banked
  7503  005F32  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  7504  005F34  E105               	bnz	l4269
  7505  005F36  0E02               	movlw	2
  7506  005F38  0100               	movlb	0	; () banked
  7507  005F3A  5D6B               	subwf	sprintf@exp& (0+255),w,b
  7508  005F3C  A0D8               	btfss	status,0,c
  7509  005F3E  D042               	goto	l4283
  7510  005F40                     l4269:
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7514  005F40  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  7515  005F44  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  7516  005F48  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  7517  005F4C  0E70               	movlw	112
  7518  005F4E  6E04               	movwf	___ftge@ff2,c
  7519  005F50  0E89               	movlw	137
  7520  005F52  6E05               	movwf	___ftge@ff2+1,c
  7521  005F54  0E40               	movlw	64
  7522  005F56  6E06               	movwf	___ftge@ff2+2,c
  7523  005F58  ECAA  F01F         	call	___ftge	;wreg free
  7524  005F5C  B0D8               	btfsc	status,0,c
  7525  005F5E  D003               	goto	l4273
  7526                           
  7527                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7528  005F60  0100               	movlb	0	; () banked
  7529  005F62  0EF7               	movlw	247
  7530  005F64  D002               	goto	L13
  7531  005F66                     l4273:
  7532                           
  7533                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7534  005F66  0100               	movlb	0	; () banked
  7535  005F68  0EF8               	movlw	248
  7536  005F6A                     L13:
  7537  005F6A  276B               	addwf	sprintf@exp& (0+255),f,b
  7538  005F6C  0EFF               	movlw	255
  7539  005F6E  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;doprnt.c: 1124: }
  7543                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7544                           
  7545                           ; BSR set to: 0
  7546  005F70  0100               	movlb	0	; () banked
  7547  005F72  516B               	movf	sprintf@exp& (0+255),w,b
  7548  005F74  EC74  F027         	call	_scale
  7549  005F78  C028  F06D         	movff	?_scale,sprintf@tmpval
  7550  005F7C  C029  F06E         	movff	?_scale+1,sprintf@tmpval+1
  7551  005F80  C02A  F06F         	movff	?_scale+2,sprintf@tmpval+2
  7552                           
  7553                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7554  005F84  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  7555  005F88  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  7556  005F8C  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  7557  005F90  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  7558  005F94  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  7559  005F98  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  7560  005F9C  EC44  F022         	call	__tdiv_to_l_	;wreg free
  7561  005FA0  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  7562  005FA4  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  7563  005FA8  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  7564  005FAC  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  7565                           
  7566                           ;doprnt.c: 1129: fval = 0.0;
  7567  005FB0  0E00               	movlw	0
  7568  005FB2  0100               	movlb	0	; () banked
  7569  005FB4  6F73               	movwf	sprintf@fval& (0+255),b
  7570  005FB6  0E00               	movlw	0
  7571  005FB8  0100               	movlb	0	; () banked
  7572  005FBA  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  7573  005FBC  0E00               	movlw	0
  7574  005FBE  0100               	movlb	0	; () banked
  7575  005FC0  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  7576                           
  7577                           ;doprnt.c: 1130: } else {
  7578  005FC2  D033               	goto	l4287
  7579  005FC4                     l4283:
  7580                           
  7581                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7582  005FC4  C073  F03E         	movff	sprintf@fval,___fttol@f1
  7583  005FC8  C074  F03F         	movff	sprintf@fval+1,___fttol@f1+1
  7584  005FCC  C075  F040         	movff	sprintf@fval+2,___fttol@f1+2
  7585  005FD0  ECBC  F020         	call	___fttol	;wreg free
  7586  005FD4  C03E  F067         	movff	?___fttol,sprintf@val
  7587  005FD8  C03F  F068         	movff	?___fttol+1,sprintf@val+1
  7588  005FDC  C040  F069         	movff	?___fttol+2,sprintf@val+2
  7589  005FE0  C041  F06A         	movff	?___fttol+3,sprintf@val+3
  7590                           
  7591                           ;doprnt.c: 1132: fval -= (double)val;
  7592  005FE4  C073  F03E         	movff	sprintf@fval,___ftsub@f1
  7593  005FE8  C074  F03F         	movff	sprintf@fval+1,___ftsub@f1+1
  7594  005FEC  C075  F040         	movff	sprintf@fval+2,___ftsub@f1+2
  7595  005FF0  C067  F009         	movff	sprintf@val,___lltoft@c
  7596  005FF4  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  7597  005FF8  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  7598  005FFC  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  7599  006000  EC05  F01E         	call	___lltoft	;wreg free
  7600  006004  C009  F041         	movff	?___lltoft,___ftsub@f2
  7601  006008  C00A  F042         	movff	?___lltoft+1,___ftsub@f2+1
  7602  00600C  C00B  F043         	movff	?___lltoft+2,___ftsub@f2+2
  7603  006010  EC23  F01D         	call	___ftsub	;wreg free
  7604  006014  C03E  F073         	movff	?___ftsub,sprintf@fval
  7605  006018  C03F  F074         	movff	?___ftsub+1,sprintf@fval+1
  7606  00601C  C040  F075         	movff	?___ftsub+2,sprintf@fval+2
  7607                           
  7608                           ;doprnt.c: 1133: exp = 0;
  7609  006020  0E00               	movlw	0
  7610  006022  0100               	movlb	0	; () banked
  7611  006024  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  7612  006026  0E00               	movlw	0
  7613  006028  6F6B               	movwf	sprintf@exp& (0+255),b
  7614  00602A                     l4287:
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;doprnt.c: 1134: }
  7618                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7619  00602A  0E01               	movlw	1
  7620  00602C  0100               	movlb	0	; () banked
  7621  00602E  6F76               	movwf	sprintf@c& (0+255),b
  7622  006030                     l4289:
  7623                           
  7624                           ; BSR set to: 0
  7625  006030  0E0A               	movlw	10
  7626  006032  0100               	movlb	0	; () banked
  7627  006034  1976               	xorwf	sprintf@c& (0+255),w,b
  7628  006036  B4D8               	btfsc	status,2,c
  7629  006038  D01E               	goto	l4301
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;doprnt.c: 1137: if(val < dpowers[c])
  7633                           
  7634                           ; BSR set to: 0
  7635                           
  7636                           ; BSR set to: 0
  7637  00603A  0100               	movlb	0	; () banked
  7638  00603C  5176               	movf	sprintf@c& (0+255),w,b
  7639  00603E  0D04               	mullw	4
  7640  006040  0E36               	movlw	low _dpowers
  7641  006042  24F3               	addwf	prodl,w,c
  7642  006044  6EF6               	movwf	tblptrl,c
  7643  006046  0E7B               	movlw	high _dpowers
  7644  006048  20F4               	addwfc	prodh,w,c
  7645  00604A  6EF7               	movwf	tblptrh,c
  7646  00604C                     	if	0	;There are less than 3 active tblptr bytes
  7647  00604C                     	endif
  7648  00604C  0009               	tblrd		*+
  7649  00604E  50F5               	movf	tablat,w,c
  7650  006050  0100               	movlb	0	; () banked
  7651  006052  5D67               	subwf	sprintf@val& (0+255),w,b
  7652  006054  0009               	tblrd		*+
  7653  006056  50F5               	movf	tablat,w,c
  7654  006058  0100               	movlb	0	; () banked
  7655  00605A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  7656  00605C  0009               	tblrd		*+
  7657  00605E  50F5               	movf	tablat,w,c
  7658  006060  0100               	movlb	0	; () banked
  7659  006062  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  7660  006064  0009               	tblrd		*+
  7661  006066  50F5               	movf	tablat,w,c
  7662  006068  0100               	movlb	0	; () banked
  7663  00606A  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  7664  00606C  A0D8               	btfss	status,0,c
  7665  00606E  D003               	goto	l4301
  7666                           
  7667                           ; BSR set to: 0
  7668                           
  7669                           ; BSR set to: 0
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;doprnt.c: 1138: break;
  7673  006070  0100               	movlb	0	; () banked
  7674  006072  2B76               	incf	sprintf@c& (0+255),f,b
  7675  006074  D7DD               	goto	l4289
  7676  006076                     l4301:
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;doprnt.c: 1175: {
  7680                           ;doprnt.c: 1188: if(flag & 0x03)
  7681  006076  0E03               	movlw	3
  7682  006078  0100               	movlb	0	; () banked
  7683  00607A  1565               	andwf	sprintf@flag& (0+255),w,b
  7684  00607C  6E54               	movwf	??_sprintf& (0+255),c
  7685  00607E  0E00               	movlw	0
  7686  006080  0100               	movlb	0	; () banked
  7687  006082  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  7688  006084  6E55               	movwf	(??_sprintf+1)& (0+255),c
  7689  006086  5054               	movf	??_sprintf,w,c
  7690  006088  1055               	iorwf	??_sprintf+1,w,c
  7691  00608A  B4D8               	btfsc	status,2,c
  7692  00608C  D053               	goto	l4315
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  7696  00608E  C04D  FFD9         	movff	sprintf@sp,fsr2l
  7697  006092  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  7698  006096  0E2D               	movlw	45
  7699  006098  D04B               	goto	L14
  7700  00609A                     l4305:
  7701                           
  7702                           ; BSR set to: 0
  7703  00609A  4A4D               	infsnz	sprintf@sp,f,c
  7704  00609C  2A4E               	incf	sprintf@sp+1,f,c
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;doprnt.c: 1195: }
  7708                           ;doprnt.c: 1196: while(c--) {
  7709  00609E  D04A               	goto	l4315
  7710  0060A0                     l4307:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;doprnt.c: 1200: {
  7714                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7715  0060A0  C067  F001         	movff	sprintf@val,___lldiv@dividend
  7716  0060A4  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  7717  0060A8  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  7718  0060AC  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  7719  0060B0  0100               	movlb	0	; () banked
  7720  0060B2  5176               	movf	sprintf@c& (0+255),w,b
  7721  0060B4  0D04               	mullw	4
  7722  0060B6  0E36               	movlw	low _dpowers
  7723  0060B8  24F3               	addwf	prodl,w,c
  7724  0060BA  6EF6               	movwf	tblptrl,c
  7725  0060BC  0E7B               	movlw	high _dpowers
  7726  0060BE  20F4               	addwfc	prodh,w,c
  7727  0060C0  6EF7               	movwf	tblptrh,c
  7728  0060C2                     	if	0	;There are less than 3 active tblptr bytes
  7729  0060C2                     	endif
  7730  0060C2  0009               	tblrd		*+
  7731  0060C4  CFF5 F005          	movff	tablat,___lldiv@divisor
  7732  0060C8  0009               	tblrd		*+
  7733  0060CA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7734  0060CE  0009               	tblrd		*+
  7735  0060D0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7736  0060D4  000A               	tblrd		*-
  7737  0060D6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7738  0060DA  ECDF  F01E         	call	___lldiv	;wreg free
  7739  0060DE  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  7740  0060E2  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  7741  0060E6  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  7742  0060EA  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  7743                           
  7744                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7745  0060EE  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  7746  0060F2  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  7747  0060F6  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  7748  0060FA  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  7749  0060FE  0E0A               	movlw	10
  7750  006100  6E05               	movwf	___llmod@divisor,c
  7751  006102  0E00               	movlw	0
  7752  006104  6E06               	movwf	___llmod@divisor+1,c
  7753  006106  0E00               	movlw	0
  7754  006108  6E07               	movwf	___llmod@divisor+2,c
  7755  00610A  0E00               	movlw	0
  7756  00610C  6E08               	movwf	___llmod@divisor+3,c
  7757  00610E  EC33  F01E         	call	___llmod	;wreg free
  7758  006112  C001  F06D         	movff	?___llmod,sprintf@tmpval
  7759  006116  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  7760  00611A  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  7761  00611E  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  7762                           
  7763                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  7764  006122  0100               	movlb	0	; () banked
  7765  006124  516D               	movf	sprintf@tmpval& (0+255),w,b
  7766  006126  0F30               	addlw	48
  7767  006128  C04D  FFD9         	movff	sprintf@sp,fsr2l
  7768  00612C  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  7769  006130                     L14:
  7770  006130  6EDF               	movwf	indf2,c
  7771  006132  D7B3               	goto	l4305
  7772  006134                     l4315:
  7773                           
  7774                           ; BSR set to: 0
  7775  006134  0100               	movlb	0	; () banked
  7776  006136  0776               	decf	sprintf@c& (0+255),f,b
  7777  006138  0100               	movlb	0	; () banked
  7778  00613A  2976               	incf	sprintf@c& (0+255),w,b
  7779  00613C  B4D8               	btfsc	status,2,c
  7780  00613E  D00D               	goto	l4323
  7781  006140  D7AF               	goto	l4307
  7782  006142                     l4317:
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  7786  006142  C04D  FFD9         	movff	sprintf@sp,fsr2l
  7787  006146  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  7788  00614A  0E30               	movlw	48
  7789  00614C  6EDF               	movwf	indf2,c
  7790                           
  7791                           ; BSR set to: 0
  7792  00614E  4A4D               	infsnz	sprintf@sp,f,c
  7793  006150  2A4E               	incf	sprintf@sp+1,f,c
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;doprnt.c: 1209: exp--;
  7797  006152  0100               	movlb	0	; () banked
  7798  006154  076B               	decf	sprintf@exp& (0+255),f,b
  7799  006156  A0D8               	btfss	status,0,c
  7800  006158  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  7801  00615A                     l4323:
  7802                           
  7803                           ; BSR set to: 0
  7804  00615A  0100               	movlb	0	; () banked
  7805  00615C  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  7806  00615E  D007               	goto	l4325
  7807  006160  0100               	movlb	0	; () banked
  7808  006162  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  7809  006164  E1EE               	bnz	l4317
  7810  006166  0100               	movlb	0	; () banked
  7811  006168  056B               	decf	sprintf@exp& (0+255),w,b
  7812  00616A  B0D8               	btfsc	status,0,c
  7813  00616C  D7EA               	goto	l4317
  7814  00616E                     l4325:
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;doprnt.c: 1210: }
  7818                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7819  00616E  0100               	movlb	0	; () banked
  7820  006170  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  7821  006172  D00C               	goto	l456
  7822  006174  0100               	movlb	0	; () banked
  7823  006176  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  7824  006178  E105               	bnz	u4870
  7825  00617A  0E09               	movlw	9
  7826  00617C  0100               	movlb	0	; () banked
  7827  00617E  5D71               	subwf	sprintf@prec& (0+255),w,b
  7828  006180  A0D8               	btfss	status,0,c
  7829  006182  D004               	goto	l456
  7830  006184                     u4870:
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7834  006184  0E08               	movlw	8
  7835  006186  0100               	movlb	0	; () banked
  7836  006188  6F76               	movwf	sprintf@c& (0+255),b
  7837  00618A  D002               	goto	l4329
  7838  00618C                     l456:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;doprnt.c: 1213: else
  7842                           ;doprnt.c: 1214: c = prec;
  7843  00618C  C071  F076         	movff	sprintf@prec,sprintf@c
  7844  006190                     l4329:
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;doprnt.c: 1215: prec -= c;
  7848  006190  0100               	movlb	0	; () banked
  7849  006192  5176               	movf	sprintf@c& (0+255),w,b
  7850  006194  0100               	movlb	0	; () banked
  7851  006196  5F71               	subwf	sprintf@prec& (0+255),f,b
  7852  006198  0E00               	movlw	0
  7853  00619A  0100               	movlb	0	; () banked
  7854  00619C  BF76               	btfsc	sprintf@c& (0+255),7,b
  7855  00619E  0EFF               	movlw	255
  7856  0061A0  0100               	movlb	0	; () banked
  7857  0061A2  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;doprnt.c: 1219: if(c)
  7861  0061A4  0100               	movlb	0	; () banked
  7862  0061A6  5176               	movf	sprintf@c& (0+255),w,b
  7863  0061A8  0100               	movlb	0	; () banked
  7864  0061AA  B4D8               	btfsc	status,2,c
  7865  0061AC  D008               	goto	l4337
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  7869  0061AE  C04D  FFD9         	movff	sprintf@sp,fsr2l
  7870  0061B2  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  7871  0061B6  0E2E               	movlw	46
  7872  0061B8  6EDF               	movwf	indf2,c
  7873                           
  7874                           ; BSR set to: 0
  7875  0061BA  4A4D               	infsnz	sprintf@sp,f,c
  7876  0061BC  2A4E               	incf	sprintf@sp+1,f,c
  7877  0061BE                     l4337:
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7881  0061BE  0100               	movlb	0	; () banked
  7882  0061C0  5176               	movf	sprintf@c& (0+255),w,b
  7883  0061C2  EC74  F027         	call	_scale
  7884  0061C6  C028  F060         	movff	?_scale,_sprintf$1201
  7885  0061CA  C029  F061         	movff	?_scale+1,_sprintf$1201+1
  7886  0061CE  C02A  F062         	movff	?_scale+2,_sprintf$1201+2
  7887                           
  7888                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7889  0061D2  C073  F01C         	movff	sprintf@fval,___ftmul@f2
  7890  0061D6  C074  F01D         	movff	sprintf@fval+1,___ftmul@f2+1
  7891  0061DA  C075  F01E         	movff	sprintf@fval+2,___ftmul@f2+2
  7892  0061DE  C060  F019         	movff	_sprintf$1201,___ftmul@f1
  7893  0061E2  C061  F01A         	movff	_sprintf$1201+1,___ftmul@f1+1
  7894  0061E6  C062  F01B         	movff	_sprintf$1201+2,___ftmul@f1+2
  7895  0061EA  EC36  F021         	call	___ftmul	;wreg free
  7896  0061EE  C019  F03E         	movff	?___ftmul,___fttol@f1
  7897  0061F2  C01A  F03F         	movff	?___ftmul+1,___fttol@f1+1
  7898  0061F6  C01B  F040         	movff	?___ftmul+2,___fttol@f1+2
  7899  0061FA  ECBC  F020         	call	___fttol	;wreg free
  7900  0061FE  C03E  F067         	movff	?___fttol,sprintf@val
  7901  006202  C03F  F068         	movff	?___fttol+1,sprintf@val+1
  7902  006206  C040  F069         	movff	?___fttol+2,sprintf@val+2
  7903  00620A  C041  F06A         	movff	?___fttol+3,sprintf@val+3
  7904                           
  7905                           ;doprnt.c: 1228: while(c--) {
  7906  00620E  D072               	goto	l4351
  7907  006210                     l4341:
  7908                           
  7909                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7910  006210  C067  F001         	movff	sprintf@val,___lldiv@dividend
  7911  006214  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  7912  006218  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  7913  00621C  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  7914  006220  0100               	movlb	0	; () banked
  7915  006222  5176               	movf	sprintf@c& (0+255),w,b
  7916  006224  0D04               	mullw	4
  7917  006226  0E36               	movlw	low _dpowers
  7918  006228  24F3               	addwf	prodl,w,c
  7919  00622A  6EF6               	movwf	tblptrl,c
  7920  00622C  0E7B               	movlw	high _dpowers
  7921  00622E  20F4               	addwfc	prodh,w,c
  7922  006230  6EF7               	movwf	tblptrh,c
  7923  006232                     	if	0	;There are less than 3 active tblptr bytes
  7924  006232                     	endif
  7925  006232  0009               	tblrd		*+
  7926  006234  CFF5 F005          	movff	tablat,___lldiv@divisor
  7927  006238  0009               	tblrd		*+
  7928  00623A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7929  00623E  0009               	tblrd		*+
  7930  006240  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7931  006244  000A               	tblrd		*-
  7932  006246  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7933  00624A  ECDF  F01E         	call	___lldiv	;wreg free
  7934  00624E  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  7935  006252  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  7936  006256  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  7937  00625A  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  7938                           
  7939                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7940  00625E  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  7941  006262  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  7942  006266  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  7943  00626A  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  7944  00626E  0E0A               	movlw	10
  7945  006270  6E05               	movwf	___llmod@divisor,c
  7946  006272  0E00               	movlw	0
  7947  006274  6E06               	movwf	___llmod@divisor+1,c
  7948  006276  0E00               	movlw	0
  7949  006278  6E07               	movwf	___llmod@divisor+2,c
  7950  00627A  0E00               	movlw	0
  7951  00627C  6E08               	movwf	___llmod@divisor+3,c
  7952  00627E  EC33  F01E         	call	___llmod	;wreg free
  7953  006282  C001  F06D         	movff	?___llmod,sprintf@tmpval
  7954  006286  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  7955  00628A  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  7956  00628E  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  7957                           
  7958                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7959  006292  0100               	movlb	0	; () banked
  7960  006294  516D               	movf	sprintf@tmpval& (0+255),w,b
  7961  006296  0F30               	addlw	48
  7962  006298  C04D  FFD9         	movff	sprintf@sp,fsr2l
  7963  00629C  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  7964  0062A0  6EDF               	movwf	indf2,c
  7965                           
  7966                           ; BSR set to: 0
  7967  0062A2  4A4D               	infsnz	sprintf@sp,f,c
  7968  0062A4  2A4E               	incf	sprintf@sp+1,f,c
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;doprnt.c: 1232: val %= dpowers[c];
  7972  0062A6  C067  F001         	movff	sprintf@val,___llmod@dividend
  7973  0062AA  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  7974  0062AE  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  7975  0062B2  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  7976  0062B6  0100               	movlb	0	; () banked
  7977  0062B8  5176               	movf	sprintf@c& (0+255),w,b
  7978  0062BA  0D04               	mullw	4
  7979  0062BC  0E36               	movlw	low _dpowers
  7980  0062BE  24F3               	addwf	prodl,w,c
  7981  0062C0  6EF6               	movwf	tblptrl,c
  7982  0062C2  0E7B               	movlw	high _dpowers
  7983  0062C4  20F4               	addwfc	prodh,w,c
  7984  0062C6  6EF7               	movwf	tblptrh,c
  7985  0062C8                     	if	0	;There are less than 3 active tblptr bytes
  7986  0062C8                     	endif
  7987  0062C8  0009               	tblrd		*+
  7988  0062CA  CFF5 F005          	movff	tablat,___llmod@divisor
  7989  0062CE  0009               	tblrd		*+
  7990  0062D0  CFF5 F006          	movff	tablat,___llmod@divisor+1
  7991  0062D4  0009               	tblrd		*+
  7992  0062D6  CFF5 F007          	movff	tablat,___llmod@divisor+2
  7993  0062DA  000A               	tblrd		*-
  7994  0062DC  CFF5 F008          	movff	tablat,___llmod@divisor+3
  7995  0062E0  EC33  F01E         	call	___llmod	;wreg free
  7996  0062E4  C001  F067         	movff	?___llmod,sprintf@val
  7997  0062E8  C002  F068         	movff	?___llmod+1,sprintf@val+1
  7998  0062EC  C003  F069         	movff	?___llmod+2,sprintf@val+2
  7999  0062F0  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  8000  0062F4                     l4351:
  8001  0062F4  0100               	movlb	0	; () banked
  8002  0062F6  0776               	decf	sprintf@c& (0+255),f,b
  8003  0062F8  0100               	movlb	0	; () banked
  8004  0062FA  2976               	incf	sprintf@c& (0+255),w,b
  8005  0062FC  B4D8               	btfsc	status,2,c
  8006  0062FE  D00D               	goto	l4359
  8007  006300  D787               	goto	l4341
  8008  006302                     l4353:
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  8012  006302  C04D  FFD9         	movff	sprintf@sp,fsr2l
  8013  006306  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  8014  00630A  0E30               	movlw	48
  8015  00630C  6EDF               	movwf	indf2,c
  8016                           
  8017                           ; BSR set to: 0
  8018  00630E  4A4D               	infsnz	sprintf@sp,f,c
  8019  006310  2A4E               	incf	sprintf@sp+1,f,c
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;doprnt.c: 1237: prec--;
  8023  006312  0100               	movlb	0	; () banked
  8024  006314  0771               	decf	sprintf@prec& (0+255),f,b
  8025  006316  A0D8               	btfss	status,0,c
  8026  006318  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  8027  00631A                     l4359:
  8028                           
  8029                           ; BSR set to: 0
  8030  00631A  0100               	movlb	0	; () banked
  8031  00631C  5171               	movf	sprintf@prec& (0+255),w,b
  8032  00631E  0100               	movlb	0	; () banked
  8033  006320  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  8034  006322  B4D8               	btfsc	status,2,c
  8035  006324  D050               	goto	l4381
  8036  006326  D7ED               	goto	l4353
  8037  006328                     l4361:
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;doprnt.c: 1246: }
  8041                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8042  006328  0100               	movlb	0	; () banked
  8043  00632A  5171               	movf	sprintf@prec& (0+255),w,b
  8044  00632C  0100               	movlb	0	; () banked
  8045  00632E  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  8046  006330  A4D8               	btfss	status,2,c
  8047  006332  D00D               	goto	l4367
  8048                           
  8049                           ; BSR set to: 0
  8050  006334  0100               	movlb	0	; () banked
  8051  006336  5167               	movf	sprintf@val& (0+255),w,b
  8052  006338  0100               	movlb	0	; () banked
  8053  00633A  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  8054  00633C  0100               	movlb	0	; () banked
  8055  00633E  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  8056  006340  0100               	movlb	0	; () banked
  8057  006342  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  8058  006344  A4D8               	btfss	status,2,c
  8059  006346  D003               	goto	l4367
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;doprnt.c: 1291: prec++;
  8063  006348  0100               	movlb	0	; () banked
  8064  00634A  4B71               	infsnz	sprintf@prec& (0+255),f,b
  8065  00634C  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  8066  00634E                     l4367:
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;doprnt.c: 1339: if(c < prec)
  8070  00634E  0E80               	movlw	128
  8071  006350  0100               	movlb	0	; () banked
  8072  006352  BF76               	btfsc	sprintf@c& (0+255),7,b
  8073  006354  0E7F               	movlw	127
  8074  006356  6E54               	movwf	??_sprintf& (0+255),c
  8075  006358  0100               	movlb	0	; () banked
  8076  00635A  5171               	movf	sprintf@prec& (0+255),w,b
  8077  00635C  0100               	movlb	0	; () banked
  8078  00635E  5D76               	subwf	sprintf@c& (0+255),w,b
  8079  006360  0100               	movlb	0	; () banked
  8080  006362  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  8081  006364  0A80               	xorlw	128
  8082  006366  5854               	subwfb	??_sprintf& (0+255),w,c
  8083  006368  B0D8               	btfsc	status,0,c
  8084  00636A  D003               	goto	l4371
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;doprnt.c: 1340: c = prec;
  8088  00636C  C071  F076         	movff	sprintf@prec,sprintf@c
  8089  006370  D016               	goto	l4375
  8090  006372                     l4371:
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;doprnt.c: 1341: else if(prec < c)
  8094  006372  0100               	movlb	0	; () banked
  8095  006374  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  8096  006376  0A80               	xorlw	128
  8097  006378  6E54               	movwf	??_sprintf& (0+255),c
  8098  00637A  0100               	movlb	0	; () banked
  8099  00637C  5176               	movf	sprintf@c& (0+255),w,b
  8100  00637E  0100               	movlb	0	; () banked
  8101  006380  5D71               	subwf	sprintf@prec& (0+255),w,b
  8102  006382  0E80               	movlw	128
  8103  006384  0100               	movlb	0	; () banked
  8104  006386  BF76               	btfsc	sprintf@c& (0+255),7,b
  8105  006388  0E7F               	movlw	127
  8106  00638A  5854               	subwfb	??_sprintf& (0+255),w,c
  8107  00638C  B0D8               	btfsc	status,0,c
  8108  00638E  D007               	goto	l4375
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;doprnt.c: 1342: prec = c;
  8112  006390  0100               	movlb	0	; () banked
  8113  006392  5176               	movf	sprintf@c& (0+255),w,b
  8114  006394  0100               	movlb	0	; () banked
  8115  006396  6F71               	movwf	sprintf@prec& (0+255),b
  8116  006398  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  8117  00639A  BF71               	btfsc	sprintf@prec& (0+255),7,b
  8118  00639C  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  8119  00639E                     l4375:
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;doprnt.c: 1422: {
  8123                           ;doprnt.c: 1438: if(flag & 0x03)
  8124  00639E  0E03               	movlw	3
  8125  0063A0  0100               	movlb	0	; () banked
  8126  0063A2  1565               	andwf	sprintf@flag& (0+255),w,b
  8127  0063A4  6E54               	movwf	??_sprintf& (0+255),c
  8128  0063A6  0E00               	movlw	0
  8129  0063A8  0100               	movlb	0	; () banked
  8130  0063AA  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  8131  0063AC  6E55               	movwf	(??_sprintf+1)& (0+255),c
  8132  0063AE  5054               	movf	??_sprintf,w,c
  8133  0063B0  1055               	iorwf	??_sprintf+1,w,c
  8134  0063B2  B4D8               	btfsc	status,2,c
  8135  0063B4  D008               	goto	l4381
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8139  0063B6  C04D  FFD9         	movff	sprintf@sp,fsr2l
  8140  0063BA  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  8141  0063BE  0E2D               	movlw	45
  8142  0063C0  6EDF               	movwf	indf2,c
  8143  0063C2                     l4379:
  8144                           
  8145                           ; BSR set to: 0
  8146  0063C2  4A4D               	infsnz	sprintf@sp,f,c
  8147  0063C4  2A4E               	incf	sprintf@sp+1,f,c
  8148  0063C6                     l4381:
  8149                           
  8150                           ; BSR set to: 0
  8151  0063C6  C04F  FFF6         	movff	sprintf@f,tblptrl
  8152  0063CA  C050  FFF7         	movff	sprintf@f+1,tblptrh
  8153  0063CE  4A4F               	infsnz	sprintf@f,f,c
  8154  0063D0  2A50               	incf	sprintf@f+1,f,c
  8155  0063D2                     	if	0	;tblptru may be non-zero
  8156  0063D2                     	endif
  8157  0063D2                     	if	0	;tblptru may be non-zero
  8158  0063D2                     	endif
  8159  0063D2  0008               	tblrd		*
  8160  0063D4  CFF5 F076          	movff	tablat,sprintf@c
  8161  0063D8  0100               	movlb	0	; () banked
  8162  0063DA  5176               	movf	sprintf@c& (0+255),w,b
  8163  0063DC  A4D8               	btfss	status,2,c
  8164  0063DE  D430               	goto	l4183
  8165  0063E0                     l4383:
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;doprnt.c: 1538: *sp = 0;
  8169  0063E0  C04D  FFD9         	movff	sprintf@sp,fsr2l
  8170  0063E4  C04E  FFDA         	movff	sprintf@sp+1,fsr2h
  8171  0063E8  0E00               	movlw	0
  8172  0063EA  6EDF               	movwf	indf2,c
  8173  0063EC  0012               	return	
  8174  0063EE                     __end_of_sprintf:
  8175                           	opt stack 0
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           prodh	equ	0xFF4
  8181                           prodl	equ	0xFF3
  8182                           postinc0	equ	0xFEE
  8183                           wreg	equ	0xFE8
  8184                           indf1	equ	0xFE7
  8185                           postdec1	equ	0xFE5
  8186                           fsr1h	equ	0xFE2
  8187                           fsr1l	equ	0xFE1
  8188                           indf2	equ	0xFDF
  8189                           postinc2	equ	0xFDE
  8190                           postdec2	equ	0xFDD
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function _scale *****************
  8196 ;; Defined at:
  8197 ;;		line 425 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  scl             1    wreg     char 
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;  scl             1   45[COMRAM] char 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  3   39[COMRAM] char 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8211 ;;      Params:         3       0       0       0       0       0       0       0       0
  8212 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8214 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8215 ;;Total ram usage:        7 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    2
  8218 ;; This function calls:
  8219 ;;		___awdiv
  8220 ;;		___awmod
  8221 ;;		___ftmul
  8222 ;;		___wmul
  8223 ;; This function is called by:
  8224 ;;		_sprintf
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text6
  8229  004EE8                     __ptext6:
  8230                           	opt stack 0
  8231  004EE8                     _scale:
  8232                           	opt stack 27
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;incstack = 0
  8236                           ;scale@scl stored from wreg
  8237  004EE8  6E2E               	movwf	scale@scl,c
  8238                           
  8239                           ;doprnt.c: 428: if(scl < 0) {
  8240  004EEA  AE2E               	btfss	scale@scl,7,c
  8241  004EEC  D0FB               	goto	l3783
  8242                           
  8243                           ;doprnt.c: 429: scl = -scl;
  8244  004EEE  6C2E               	negf	scale@scl,c
  8245                           
  8246                           ;doprnt.c: 430: if(scl>=110)
  8247  004EF0  502E               	movf	scale@scl,w,c
  8248  004EF2  0A80               	xorlw	128
  8249  004EF4  0F12               	addlw	-238
  8250  004EF6  A0D8               	btfss	status,0,c
  8251  004EF8  D091               	goto	l3773
  8252                           
  8253                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8254  004EFA  0E00               	movlw	0
  8255  004EFC  6E12               	movwf	___wmul@multiplicand+1,c
  8256  004EFE  0E03               	movlw	3
  8257  004F00  6E11               	movwf	___wmul@multiplicand,c
  8258  004F02  0E00               	movlw	0
  8259  004F04  6E0A               	movwf	___awdiv@divisor+1,c
  8260  004F06  0E0A               	movlw	10
  8261  004F08  6E09               	movwf	___awdiv@divisor,c
  8262  004F0A  0E00               	movlw	0
  8263  004F0C  6E04               	movwf	___awmod@divisor+1,c
  8264  004F0E  0E64               	movlw	100
  8265  004F10  6E03               	movwf	___awmod@divisor,c
  8266  004F12  502E               	movf	scale@scl,w,c
  8267  004F14  6E01               	movwf	___awmod@dividend,c
  8268  004F16  6A02               	clrf	___awmod@dividend+1,c
  8269  004F18  BE01               	btfsc	___awmod@dividend,7,c
  8270  004F1A  0602               	decf	___awmod@dividend+1,f,c
  8271  004F1C  EC66  F01E         	call	___awmod	;wreg free
  8272  004F20  C001  F007         	movff	?___awmod,___awdiv@dividend
  8273  004F24  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8274  004F28  EC20  F01F         	call	___awdiv	;wreg free
  8275  004F2C  0E09               	movlw	9
  8276  004F2E  2407               	addwf	?___awdiv,w,c
  8277  004F30  6E0F               	movwf	___wmul@multiplier,c
  8278  004F32  0E00               	movlw	0
  8279  004F34  2008               	addwfc	?___awdiv+1,w,c
  8280  004F36  6E10               	movwf	___wmul@multiplier+1,c
  8281  004F38  ECAD  F01C         	call	___wmul	;wreg free
  8282  004F3C  0E5E               	movlw	low __npowers_
  8283  004F3E  240F               	addwf	?___wmul,w,c
  8284  004F40  6EF6               	movwf	tblptrl,c
  8285  004F42  0E7B               	movlw	high __npowers_
  8286  004F44  2010               	addwfc	?___wmul+1,w,c
  8287  004F46  6EF7               	movwf	tblptrh,c
  8288  004F48                     	if	0	;There are less than 3 active tblptr bytes
  8289  004F48                     	endif
  8290  004F48  0009               	tblrd		*+
  8291  004F4A  CFF5 F01C          	movff	tablat,___ftmul@f2
  8292  004F4E  0009               	tblrd		*+
  8293  004F50  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8294  004F54  000A               	tblrd		*-
  8295  004F56  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8296  004F5A  0E00               	movlw	0
  8297  004F5C  6E0A               	movwf	___awdiv@divisor+1,c
  8298  004F5E  0E64               	movlw	100
  8299  004F60  6E09               	movwf	___awdiv@divisor,c
  8300  004F62  502E               	movf	scale@scl,w,c
  8301  004F64  6E07               	movwf	___awdiv@dividend,c
  8302  004F66  6A08               	clrf	___awdiv@dividend+1,c
  8303  004F68  BE07               	btfsc	___awdiv@dividend,7,c
  8304  004F6A  0608               	decf	___awdiv@dividend+1,f,c
  8305  004F6C  EC20  F01F         	call	___awdiv	;wreg free
  8306  004F70  0E12               	movlw	18
  8307  004F72  2407               	addwf	?___awdiv,w,c
  8308  004F74  6E0F               	movwf	___wmul@multiplier,c
  8309  004F76  0E00               	movlw	0
  8310  004F78  2008               	addwfc	?___awdiv+1,w,c
  8311  004F7A  6E10               	movwf	___wmul@multiplier+1,c
  8312  004F7C  0E00               	movlw	0
  8313  004F7E  6E12               	movwf	___wmul@multiplicand+1,c
  8314  004F80  0E03               	movlw	3
  8315  004F82  6E11               	movwf	___wmul@multiplicand,c
  8316  004F84  ECAD  F01C         	call	___wmul	;wreg free
  8317  004F88  0E5E               	movlw	low __npowers_
  8318  004F8A  240F               	addwf	?___wmul,w,c
  8319  004F8C  6EF6               	movwf	tblptrl,c
  8320  004F8E  0E7B               	movlw	high __npowers_
  8321  004F90  2010               	addwfc	?___wmul+1,w,c
  8322  004F92  6EF7               	movwf	tblptrh,c
  8323  004F94                     	if	0	;There are less than 3 active tblptr bytes
  8324  004F94                     	endif
  8325  004F94  0009               	tblrd		*+
  8326  004F96  CFF5 F019          	movff	tablat,___ftmul@f1
  8327  004F9A  0009               	tblrd		*+
  8328  004F9C  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8329  004FA0  000A               	tblrd		*-
  8330  004FA2  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8331  004FA6  EC36  F021         	call	___ftmul	;wreg free
  8332  004FAA  C019  F02B         	movff	?___ftmul,_scale$1200
  8333  004FAE  C01A  F02C         	movff	?___ftmul+1,_scale$1200+1
  8334  004FB2  C01B  F02D         	movff	?___ftmul+2,_scale$1200+2
  8335                           
  8336                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8337  004FB6  C02B  F019         	movff	_scale$1200,___ftmul@f1
  8338  004FBA  C02C  F01A         	movff	_scale$1200+1,___ftmul@f1+1
  8339  004FBE  C02D  F01B         	movff	_scale$1200+2,___ftmul@f1+2
  8340  004FC2  0E00               	movlw	0
  8341  004FC4  6E12               	movwf	___wmul@multiplicand+1,c
  8342  004FC6  0E03               	movlw	3
  8343  004FC8  6E11               	movwf	___wmul@multiplicand,c
  8344  004FCA  0E00               	movlw	0
  8345  004FCC  6E04               	movwf	___awmod@divisor+1,c
  8346  004FCE  0E0A               	movlw	10
  8347  004FD0  6E03               	movwf	___awmod@divisor,c
  8348  004FD2  502E               	movf	scale@scl,w,c
  8349  004FD4  6E01               	movwf	___awmod@dividend,c
  8350  004FD6  6A02               	clrf	___awmod@dividend+1,c
  8351  004FD8  BE01               	btfsc	___awmod@dividend,7,c
  8352  004FDA  0602               	decf	___awmod@dividend+1,f,c
  8353  004FDC  EC66  F01E         	call	___awmod	;wreg free
  8354  004FE0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8355  004FE4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8356  004FE8  ECAD  F01C         	call	___wmul	;wreg free
  8357  004FEC  0E5E               	movlw	low __npowers_
  8358  004FEE  240F               	addwf	?___wmul,w,c
  8359  004FF0  6EF6               	movwf	tblptrl,c
  8360  004FF2  0E7B               	movlw	high __npowers_
  8361  004FF4  2010               	addwfc	?___wmul+1,w,c
  8362  004FF6  6EF7               	movwf	tblptrh,c
  8363  004FF8                     	if	0	;There are less than 3 active tblptr bytes
  8364  004FF8                     	endif
  8365  004FF8  0009               	tblrd		*+
  8366  004FFA  CFF5 F01C          	movff	tablat,___ftmul@f2
  8367  004FFE  0009               	tblrd		*+
  8368  005000  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8369  005004  000A               	tblrd		*-
  8370  005006  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8371  00500A  EC36  F021         	call	___ftmul	;wreg free
  8372  00500E  C019  F028         	movff	?___ftmul,?_scale
  8373  005012  C01A  F029         	movff	?___ftmul+1,?_scale+1
  8374  005016  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  8375  00501A  0012               	return	
  8376  00501C                     l3773:
  8377                           
  8378                           ;doprnt.c: 432: else if(scl > 10)
  8379  00501C  502E               	movf	scale@scl,w,c
  8380  00501E  0A80               	xorlw	128
  8381  005020  0F75               	addlw	-139
  8382  005022  A0D8               	btfss	status,0,c
  8383  005024  D04D               	goto	l3779
  8384                           
  8385                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8386  005026  0E00               	movlw	0
  8387  005028  6E0A               	movwf	___awdiv@divisor+1,c
  8388  00502A  0E0A               	movlw	10
  8389  00502C  6E09               	movwf	___awdiv@divisor,c
  8390  00502E  502E               	movf	scale@scl,w,c
  8391  005030  6E07               	movwf	___awdiv@dividend,c
  8392  005032  6A08               	clrf	___awdiv@dividend+1,c
  8393  005034  BE07               	btfsc	___awdiv@dividend,7,c
  8394  005036  0608               	decf	___awdiv@dividend+1,f,c
  8395  005038  EC20  F01F         	call	___awdiv	;wreg free
  8396  00503C  0E09               	movlw	9
  8397  00503E  2407               	addwf	?___awdiv,w,c
  8398  005040  6E0F               	movwf	___wmul@multiplier,c
  8399  005042  0E00               	movlw	0
  8400  005044  2008               	addwfc	?___awdiv+1,w,c
  8401  005046  6E10               	movwf	___wmul@multiplier+1,c
  8402  005048  0E00               	movlw	0
  8403  00504A  6E12               	movwf	___wmul@multiplicand+1,c
  8404  00504C  0E03               	movlw	3
  8405  00504E  6E11               	movwf	___wmul@multiplicand,c
  8406  005050  ECAD  F01C         	call	___wmul	;wreg free
  8407  005054  0E5E               	movlw	low __npowers_
  8408  005056  240F               	addwf	?___wmul,w,c
  8409  005058  6EF6               	movwf	tblptrl,c
  8410  00505A  0E7B               	movlw	high __npowers_
  8411  00505C  2010               	addwfc	?___wmul+1,w,c
  8412  00505E  6EF7               	movwf	tblptrh,c
  8413  005060                     	if	0	;There are less than 3 active tblptr bytes
  8414  005060                     	endif
  8415  005060  0009               	tblrd		*+
  8416  005062  CFF5 F019          	movff	tablat,___ftmul@f1
  8417  005066  0009               	tblrd		*+
  8418  005068  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8419  00506C  000A               	tblrd		*-
  8420  00506E  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8421  005072  0E00               	movlw	0
  8422  005074  6E12               	movwf	___wmul@multiplicand+1,c
  8423  005076  0E03               	movlw	3
  8424  005078  6E11               	movwf	___wmul@multiplicand,c
  8425  00507A  0E00               	movlw	0
  8426  00507C  6E04               	movwf	___awmod@divisor+1,c
  8427  00507E  0E0A               	movlw	10
  8428  005080  6E03               	movwf	___awmod@divisor,c
  8429  005082  502E               	movf	scale@scl,w,c
  8430  005084  6E01               	movwf	___awmod@dividend,c
  8431  005086  6A02               	clrf	___awmod@dividend+1,c
  8432  005088  BE01               	btfsc	___awmod@dividend,7,c
  8433  00508A  0602               	decf	___awmod@dividend+1,f,c
  8434  00508C  EC66  F01E         	call	___awmod	;wreg free
  8435  005090  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8436  005094  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8437  005098  ECAD  F01C         	call	___wmul	;wreg free
  8438  00509C  0E5E               	movlw	low __npowers_
  8439  00509E  240F               	addwf	?___wmul,w,c
  8440  0050A0  6EF6               	movwf	tblptrl,c
  8441  0050A2  0E7B               	movlw	high __npowers_
  8442  0050A4  2010               	addwfc	?___wmul+1,w,c
  8443  0050A6  6EF7               	movwf	tblptrh,c
  8444  0050A8                     	if	0	;There are less than 3 active tblptr bytes
  8445  0050A8                     	endif
  8446  0050A8  0009               	tblrd		*+
  8447  0050AA  CFF5 F01C          	movff	tablat,___ftmul@f2
  8448  0050AE  0009               	tblrd		*+
  8449  0050B0  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8450  0050B4  000A               	tblrd		*-
  8451  0050B6  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8452  0050BA  EC36  F021         	call	___ftmul	;wreg free
  8453  0050BE  D7A7               	goto	L15
  8454  0050C0                     l3779:
  8455                           
  8456                           ;doprnt.c: 434: return _npowers_[scl];
  8457  0050C0  502E               	movf	scale@scl,w,c
  8458  0050C2  0D03               	mullw	3
  8459  0050C4  0E5E               	movlw	low __npowers_
  8460  0050C6  24F3               	addwf	prodl,w,c
  8461  0050C8  6EF6               	movwf	tblptrl,c
  8462  0050CA  0E7B               	movlw	high __npowers_
  8463  0050CC  20F4               	addwfc	prodh,w,c
  8464  0050CE  6EF7               	movwf	tblptrh,c
  8465  0050D0                     	if	0	;There are less than 3 active tblptr bytes
  8466  0050D0                     	endif
  8467  0050D0  0009               	tblrd		*+
  8468  0050D2  CFF5 F028          	movff	tablat,?_scale
  8469  0050D6  0009               	tblrd		*+
  8470  0050D8  CFF5 F029          	movff	tablat,?_scale+1
  8471  0050DC  000A               	tblrd		*-
  8472  0050DE  CFF5 F02A          	movff	tablat,?_scale+2
  8473  0050E2  0012               	return	
  8474  0050E4                     l3783:
  8475                           
  8476                           ;doprnt.c: 435: }
  8477                           ;doprnt.c: 436: if(scl>=110)
  8478  0050E4  502E               	movf	scale@scl,w,c
  8479  0050E6  0A80               	xorlw	128
  8480  0050E8  0F12               	addlw	-238
  8481  0050EA  A0D8               	btfss	status,0,c
  8482  0050EC  D091               	goto	l3791
  8483                           
  8484                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8485  0050EE  0E00               	movlw	0
  8486  0050F0  6E12               	movwf	___wmul@multiplicand+1,c
  8487  0050F2  0E03               	movlw	3
  8488  0050F4  6E11               	movwf	___wmul@multiplicand,c
  8489  0050F6  0E00               	movlw	0
  8490  0050F8  6E0A               	movwf	___awdiv@divisor+1,c
  8491  0050FA  0E0A               	movlw	10
  8492  0050FC  6E09               	movwf	___awdiv@divisor,c
  8493  0050FE  0E00               	movlw	0
  8494  005100  6E04               	movwf	___awmod@divisor+1,c
  8495  005102  0E64               	movlw	100
  8496  005104  6E03               	movwf	___awmod@divisor,c
  8497  005106  502E               	movf	scale@scl,w,c
  8498  005108  6E01               	movwf	___awmod@dividend,c
  8499  00510A  6A02               	clrf	___awmod@dividend+1,c
  8500  00510C  BE01               	btfsc	___awmod@dividend,7,c
  8501  00510E  0602               	decf	___awmod@dividend+1,f,c
  8502  005110  EC66  F01E         	call	___awmod	;wreg free
  8503  005114  C001  F007         	movff	?___awmod,___awdiv@dividend
  8504  005118  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8505  00511C  EC20  F01F         	call	___awdiv	;wreg free
  8506  005120  0E09               	movlw	9
  8507  005122  2407               	addwf	?___awdiv,w,c
  8508  005124  6E0F               	movwf	___wmul@multiplier,c
  8509  005126  0E00               	movlw	0
  8510  005128  2008               	addwfc	?___awdiv+1,w,c
  8511  00512A  6E10               	movwf	___wmul@multiplier+1,c
  8512  00512C  ECAD  F01C         	call	___wmul	;wreg free
  8513  005130  0E85               	movlw	low __powers_
  8514  005132  240F               	addwf	?___wmul,w,c
  8515  005134  6EF6               	movwf	tblptrl,c
  8516  005136  0E7B               	movlw	high __powers_
  8517  005138  2010               	addwfc	?___wmul+1,w,c
  8518  00513A  6EF7               	movwf	tblptrh,c
  8519  00513C                     	if	0	;There are less than 3 active tblptr bytes
  8520  00513C                     	endif
  8521  00513C  0009               	tblrd		*+
  8522  00513E  CFF5 F01C          	movff	tablat,___ftmul@f2
  8523  005142  0009               	tblrd		*+
  8524  005144  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8525  005148  000A               	tblrd		*-
  8526  00514A  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8527  00514E  0E00               	movlw	0
  8528  005150  6E0A               	movwf	___awdiv@divisor+1,c
  8529  005152  0E64               	movlw	100
  8530  005154  6E09               	movwf	___awdiv@divisor,c
  8531  005156  502E               	movf	scale@scl,w,c
  8532  005158  6E07               	movwf	___awdiv@dividend,c
  8533  00515A  6A08               	clrf	___awdiv@dividend+1,c
  8534  00515C  BE07               	btfsc	___awdiv@dividend,7,c
  8535  00515E  0608               	decf	___awdiv@dividend+1,f,c
  8536  005160  EC20  F01F         	call	___awdiv	;wreg free
  8537  005164  0E12               	movlw	18
  8538  005166  2407               	addwf	?___awdiv,w,c
  8539  005168  6E0F               	movwf	___wmul@multiplier,c
  8540  00516A  0E00               	movlw	0
  8541  00516C  2008               	addwfc	?___awdiv+1,w,c
  8542  00516E  6E10               	movwf	___wmul@multiplier+1,c
  8543  005170  0E00               	movlw	0
  8544  005172  6E12               	movwf	___wmul@multiplicand+1,c
  8545  005174  0E03               	movlw	3
  8546  005176  6E11               	movwf	___wmul@multiplicand,c
  8547  005178  ECAD  F01C         	call	___wmul	;wreg free
  8548  00517C  0E85               	movlw	low __powers_
  8549  00517E  240F               	addwf	?___wmul,w,c
  8550  005180  6EF6               	movwf	tblptrl,c
  8551  005182  0E7B               	movlw	high __powers_
  8552  005184  2010               	addwfc	?___wmul+1,w,c
  8553  005186  6EF7               	movwf	tblptrh,c
  8554  005188                     	if	0	;There are less than 3 active tblptr bytes
  8555  005188                     	endif
  8556  005188  0009               	tblrd		*+
  8557  00518A  CFF5 F019          	movff	tablat,___ftmul@f1
  8558  00518E  0009               	tblrd		*+
  8559  005190  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8560  005194  000A               	tblrd		*-
  8561  005196  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8562  00519A  EC36  F021         	call	___ftmul	;wreg free
  8563  00519E  C019  F02B         	movff	?___ftmul,_scale$1200
  8564  0051A2  C01A  F02C         	movff	?___ftmul+1,_scale$1200+1
  8565  0051A6  C01B  F02D         	movff	?___ftmul+2,_scale$1200+2
  8566                           
  8567                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8568  0051AA  C02B  F019         	movff	_scale$1200,___ftmul@f1
  8569  0051AE  C02C  F01A         	movff	_scale$1200+1,___ftmul@f1+1
  8570  0051B2  C02D  F01B         	movff	_scale$1200+2,___ftmul@f1+2
  8571  0051B6  0E00               	movlw	0
  8572  0051B8  6E12               	movwf	___wmul@multiplicand+1,c
  8573  0051BA  0E03               	movlw	3
  8574  0051BC  6E11               	movwf	___wmul@multiplicand,c
  8575  0051BE  0E00               	movlw	0
  8576  0051C0  6E04               	movwf	___awmod@divisor+1,c
  8577  0051C2  0E0A               	movlw	10
  8578  0051C4  6E03               	movwf	___awmod@divisor,c
  8579  0051C6  502E               	movf	scale@scl,w,c
  8580  0051C8  6E01               	movwf	___awmod@dividend,c
  8581  0051CA  6A02               	clrf	___awmod@dividend+1,c
  8582  0051CC  BE01               	btfsc	___awmod@dividend,7,c
  8583  0051CE  0602               	decf	___awmod@dividend+1,f,c
  8584  0051D0  EC66  F01E         	call	___awmod	;wreg free
  8585  0051D4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8586  0051D8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8587  0051DC  ECAD  F01C         	call	___wmul	;wreg free
  8588  0051E0  0E85               	movlw	low __powers_
  8589  0051E2  240F               	addwf	?___wmul,w,c
  8590  0051E4  6EF6               	movwf	tblptrl,c
  8591  0051E6  0E7B               	movlw	high __powers_
  8592  0051E8  2010               	addwfc	?___wmul+1,w,c
  8593  0051EA  6EF7               	movwf	tblptrh,c
  8594  0051EC                     	if	0	;There are less than 3 active tblptr bytes
  8595  0051EC                     	endif
  8596  0051EC  0009               	tblrd		*+
  8597  0051EE  CFF5 F01C          	movff	tablat,___ftmul@f2
  8598  0051F2  0009               	tblrd		*+
  8599  0051F4  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8600  0051F8  000A               	tblrd		*-
  8601  0051FA  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8602  0051FE  EC36  F021         	call	___ftmul	;wreg free
  8603  005202  C019  F028         	movff	?___ftmul,?_scale
  8604  005206  C01A  F029         	movff	?___ftmul+1,?_scale+1
  8605  00520A  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  8606  00520E  0012               	return	
  8607  005210                     l3791:
  8608                           
  8609                           ;doprnt.c: 438: else if(scl > 10)
  8610  005210  502E               	movf	scale@scl,w,c
  8611  005212  0A80               	xorlw	128
  8612  005214  0F75               	addlw	-139
  8613  005216  A0D8               	btfss	status,0,c
  8614  005218  D04D               	goto	l3797
  8615                           
  8616                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8617  00521A  0E00               	movlw	0
  8618  00521C  6E0A               	movwf	___awdiv@divisor+1,c
  8619  00521E  0E0A               	movlw	10
  8620  005220  6E09               	movwf	___awdiv@divisor,c
  8621  005222  502E               	movf	scale@scl,w,c
  8622  005224  6E07               	movwf	___awdiv@dividend,c
  8623  005226  6A08               	clrf	___awdiv@dividend+1,c
  8624  005228  BE07               	btfsc	___awdiv@dividend,7,c
  8625  00522A  0608               	decf	___awdiv@dividend+1,f,c
  8626  00522C  EC20  F01F         	call	___awdiv	;wreg free
  8627  005230  0E09               	movlw	9
  8628  005232  2407               	addwf	?___awdiv,w,c
  8629  005234  6E0F               	movwf	___wmul@multiplier,c
  8630  005236  0E00               	movlw	0
  8631  005238  2008               	addwfc	?___awdiv+1,w,c
  8632  00523A  6E10               	movwf	___wmul@multiplier+1,c
  8633  00523C  0E00               	movlw	0
  8634  00523E  6E12               	movwf	___wmul@multiplicand+1,c
  8635  005240  0E03               	movlw	3
  8636  005242  6E11               	movwf	___wmul@multiplicand,c
  8637  005244  ECAD  F01C         	call	___wmul	;wreg free
  8638  005248  0E85               	movlw	low __powers_
  8639  00524A  240F               	addwf	?___wmul,w,c
  8640  00524C  6EF6               	movwf	tblptrl,c
  8641  00524E  0E7B               	movlw	high __powers_
  8642  005250  2010               	addwfc	?___wmul+1,w,c
  8643  005252  6EF7               	movwf	tblptrh,c
  8644  005254                     	if	0	;There are less than 3 active tblptr bytes
  8645  005254                     	endif
  8646  005254  0009               	tblrd		*+
  8647  005256  CFF5 F019          	movff	tablat,___ftmul@f1
  8648  00525A  0009               	tblrd		*+
  8649  00525C  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8650  005260  000A               	tblrd		*-
  8651  005262  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8652  005266  0E00               	movlw	0
  8653  005268  6E12               	movwf	___wmul@multiplicand+1,c
  8654  00526A  0E03               	movlw	3
  8655  00526C  6E11               	movwf	___wmul@multiplicand,c
  8656  00526E  0E00               	movlw	0
  8657  005270  6E04               	movwf	___awmod@divisor+1,c
  8658  005272  0E0A               	movlw	10
  8659  005274  6E03               	movwf	___awmod@divisor,c
  8660  005276  502E               	movf	scale@scl,w,c
  8661  005278  6E01               	movwf	___awmod@dividend,c
  8662  00527A  6A02               	clrf	___awmod@dividend+1,c
  8663  00527C  BE01               	btfsc	___awmod@dividend,7,c
  8664  00527E  0602               	decf	___awmod@dividend+1,f,c
  8665  005280  EC66  F01E         	call	___awmod	;wreg free
  8666  005284  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8667  005288  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8668  00528C  ECAD  F01C         	call	___wmul	;wreg free
  8669  005290  0E85               	movlw	low __powers_
  8670  005292  240F               	addwf	?___wmul,w,c
  8671  005294  6EF6               	movwf	tblptrl,c
  8672  005296  0E7B               	movlw	high __powers_
  8673  005298  2010               	addwfc	?___wmul+1,w,c
  8674  00529A  6EF7               	movwf	tblptrh,c
  8675  00529C                     	if	0	;There are less than 3 active tblptr bytes
  8676  00529C                     	endif
  8677  00529C  0009               	tblrd		*+
  8678  00529E  CFF5 F01C          	movff	tablat,___ftmul@f2
  8679  0052A2  0009               	tblrd		*+
  8680  0052A4  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8681  0052A8  000A               	tblrd		*-
  8682  0052AA  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8683  0052AE  EC36  F021         	call	___ftmul	;wreg free
  8684  0052B2  D7A7               	goto	L16
  8685  0052B4                     l3797:
  8686                           
  8687                           ;doprnt.c: 440: return _powers_[scl];
  8688  0052B4  502E               	movf	scale@scl,w,c
  8689  0052B6  0D03               	mullw	3
  8690  0052B8  0E85               	movlw	low __powers_
  8691  0052BA  24F3               	addwf	prodl,w,c
  8692  0052BC  6EF6               	movwf	tblptrl,c
  8693  0052BE  0E7B               	movlw	high __powers_
  8694  0052C0  20F4               	addwfc	prodh,w,c
  8695  0052C2  6EF7               	movwf	tblptrh,c
  8696  0052C4                     	if	0	;There are less than 3 active tblptr bytes
  8697  0052C4                     	endif
  8698  0052C4  0009               	tblrd		*+
  8699  0052C6  CFF5 F028          	movff	tablat,?_scale
  8700  0052CA  0009               	tblrd		*+
  8701  0052CC  CFF5 F029          	movff	tablat,?_scale+1
  8702  0052D0  000A               	tblrd		*-
  8703  0052D2  CFF5 F02A          	movff	tablat,?_scale+2
  8704  0052D6  0012               	return	
  8705  0052D8                     __end_of_scale:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodh	equ	0xFF4
  8712                           prodl	equ	0xFF3
  8713                           postinc0	equ	0xFEE
  8714                           wreg	equ	0xFE8
  8715                           indf1	equ	0xFE7
  8716                           postdec1	equ	0xFE5
  8717                           fsr1h	equ	0xFE2
  8718                           fsr1l	equ	0xFE1
  8719                           indf2	equ	0xFDF
  8720                           postinc2	equ	0xFDE
  8721                           postdec2	equ	0xFDD
  8722                           fsr2h	equ	0xFDA
  8723                           fsr2l	equ	0xFD9
  8724                           status	equ	0xFD8
  8725                           
  8726 ;; *************** function _isdigit *****************
  8727 ;; Defined at:
  8728 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/isdigit.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;  c               1    wreg     unsigned char 
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;  c               1    2[COMRAM] unsigned char 
  8733 ;; Return value:  Size  Location     Type
  8734 ;;		None               void
  8735 ;; Registers used:
  8736 ;;		wreg, status,2, status,0
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8742 ;;      Params:         0       0       0       0       0       0       0       0       0
  8743 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8744 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8745 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8746 ;;Total ram usage:        3 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_sprintf
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           	psect	text7
  8756  0038B0                     __ptext7:
  8757                           	opt stack 0
  8758  0038B0                     _isdigit:
  8759                           	opt stack 29
  8760                           
  8761                           ;incstack = 0
  8762                           ;isdigit@c stored from wreg
  8763  0038B0  6E03               	movwf	isdigit@c,c
  8764  0038B2  0E00               	movlw	0
  8765  0038B4  6E02               	movwf	_isdigit$851,c
  8766  0038B6  0E3A               	movlw	58
  8767  0038B8  6003               	cpfslt	isdigit@c,c
  8768  0038BA  D005               	goto	l3809
  8769  0038BC  0E2F               	movlw	47
  8770  0038BE  6403               	cpfsgt	isdigit@c,c
  8771  0038C0  D002               	goto	l3809
  8772  0038C2  0E01               	movlw	1
  8773  0038C4  6E02               	movwf	_isdigit$851,c
  8774  0038C6                     l3809:
  8775  0038C6  C002  F001         	movff	_isdigit$851,??_isdigit
  8776  0038CA  3001               	rrcf	??_isdigit,w,c
  8777  0038CC  0012               	return	
  8778  0038CE                     __end_of_isdigit:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           indf1	equ	0xFE7
  8789                           postdec1	equ	0xFE5
  8790                           fsr1h	equ	0xFE2
  8791                           fsr1l	equ	0xFE1
  8792                           indf2	equ	0xFDF
  8793                           postinc2	equ	0xFDE
  8794                           postdec2	equ	0xFDD
  8795                           fsr2h	equ	0xFDA
  8796                           fsr2l	equ	0xFD9
  8797                           status	equ	0xFD8
  8798                           
  8799 ;; *************** function _fround *****************
  8800 ;; Defined at:
  8801 ;;		line 409 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;  prec            1    wreg     unsigned char 
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;  prec            1   48[COMRAM] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  3   39[COMRAM] unsigned char 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8815 ;;      Params:         3       0       0       0       0       0       0       0       0
  8816 ;;      Locals:         7       0       0       0       0       0       0       0       0
  8817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8818 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8819 ;;Total ram usage:       10 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    2
  8822 ;; This function calls:
  8823 ;;		___awdiv
  8824 ;;		___awmod
  8825 ;;		___ftmul
  8826 ;;		___wmul
  8827 ;; This function is called by:
  8828 ;;		_sprintf
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           	psect	text8
  8833  004A06                     __ptext8:
  8834                           	opt stack 0
  8835  004A06                     _fround:
  8836                           	opt stack 27
  8837                           
  8838                           ;incstack = 0
  8839                           ;fround@prec stored from wreg
  8840  004A06  6E31               	movwf	fround@prec,c
  8841                           
  8842                           ;doprnt.c: 413: if(prec>=110)
  8843  004A08  0E6D               	movlw	109
  8844  004A0A  6431               	cpfsgt	fround@prec,c
  8845  004A0C  D09F               	goto	l3751
  8846                           
  8847                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8848  004A0E  0E00               	movlw	0
  8849  004A10  6E12               	movwf	___wmul@multiplicand+1,c
  8850  004A12  0E03               	movlw	3
  8851  004A14  6E11               	movwf	___wmul@multiplicand,c
  8852  004A16  0E00               	movlw	0
  8853  004A18  6E0A               	movwf	___awdiv@divisor+1,c
  8854  004A1A  0E0A               	movlw	10
  8855  004A1C  6E09               	movwf	___awdiv@divisor,c
  8856  004A1E  0E00               	movlw	0
  8857  004A20  6E04               	movwf	___awmod@divisor+1,c
  8858  004A22  0E64               	movlw	100
  8859  004A24  6E03               	movwf	___awmod@divisor,c
  8860  004A26  C031  F001         	movff	fround@prec,___awmod@dividend
  8861  004A2A  6A02               	clrf	___awmod@dividend+1,c
  8862  004A2C  EC66  F01E         	call	___awmod	;wreg free
  8863  004A30  C001  F007         	movff	?___awmod,___awdiv@dividend
  8864  004A34  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8865  004A38  EC20  F01F         	call	___awdiv	;wreg free
  8866  004A3C  0E09               	movlw	9
  8867  004A3E  2407               	addwf	?___awdiv,w,c
  8868  004A40  6E0F               	movwf	___wmul@multiplier,c
  8869  004A42  0E00               	movlw	0
  8870  004A44  2008               	addwfc	?___awdiv+1,w,c
  8871  004A46  6E10               	movwf	___wmul@multiplier+1,c
  8872  004A48  ECAD  F01C         	call	___wmul	;wreg free
  8873  004A4C  0E5E               	movlw	low __npowers_
  8874  004A4E  240F               	addwf	?___wmul,w,c
  8875  004A50  6EF6               	movwf	tblptrl,c
  8876  004A52  0E7B               	movlw	high __npowers_
  8877  004A54  2010               	addwfc	?___wmul+1,w,c
  8878  004A56  6EF7               	movwf	tblptrh,c
  8879  004A58                     	if	0	;There are less than 3 active tblptr bytes
  8880  004A58                     	endif
  8881  004A58  0009               	tblrd		*+
  8882  004A5A  CFF5 F01C          	movff	tablat,___ftmul@f2
  8883  004A5E  0009               	tblrd		*+
  8884  004A60  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8885  004A64  000A               	tblrd		*-
  8886  004A66  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8887  004A6A  0E00               	movlw	0
  8888  004A6C  6E0A               	movwf	___awdiv@divisor+1,c
  8889  004A6E  0E64               	movlw	100
  8890  004A70  6E09               	movwf	___awdiv@divisor,c
  8891  004A72  C031  F007         	movff	fround@prec,___awdiv@dividend
  8892  004A76  6A08               	clrf	___awdiv@dividend+1,c
  8893  004A78  EC20  F01F         	call	___awdiv	;wreg free
  8894  004A7C  0E12               	movlw	18
  8895  004A7E  2407               	addwf	?___awdiv,w,c
  8896  004A80  6E0F               	movwf	___wmul@multiplier,c
  8897  004A82  0E00               	movlw	0
  8898  004A84  2008               	addwfc	?___awdiv+1,w,c
  8899  004A86  6E10               	movwf	___wmul@multiplier+1,c
  8900  004A88  0E00               	movlw	0
  8901  004A8A  6E12               	movwf	___wmul@multiplicand+1,c
  8902  004A8C  0E03               	movlw	3
  8903  004A8E  6E11               	movwf	___wmul@multiplicand,c
  8904  004A90  ECAD  F01C         	call	___wmul	;wreg free
  8905  004A94  0E5E               	movlw	low __npowers_
  8906  004A96  240F               	addwf	?___wmul,w,c
  8907  004A98  6EF6               	movwf	tblptrl,c
  8908  004A9A  0E7B               	movlw	high __npowers_
  8909  004A9C  2010               	addwfc	?___wmul+1,w,c
  8910  004A9E  6EF7               	movwf	tblptrh,c
  8911  004AA0                     	if	0	;There are less than 3 active tblptr bytes
  8912  004AA0                     	endif
  8913  004AA0  0009               	tblrd		*+
  8914  004AA2  CFF5 F019          	movff	tablat,___ftmul@f1
  8915  004AA6  0009               	tblrd		*+
  8916  004AA8  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8917  004AAC  000A               	tblrd		*-
  8918  004AAE  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8919  004AB2  EC36  F021         	call	___ftmul	;wreg free
  8920  004AB6  C019  F02E         	movff	?___ftmul,_fround$1198
  8921  004ABA  C01A  F02F         	movff	?___ftmul+1,_fround$1198+1
  8922  004ABE  C01B  F030         	movff	?___ftmul+2,_fround$1198+2
  8923                           
  8924                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8925  004AC2  0E00               	movlw	0
  8926  004AC4  6E12               	movwf	___wmul@multiplicand+1,c
  8927  004AC6  0E03               	movlw	3
  8928  004AC8  6E11               	movwf	___wmul@multiplicand,c
  8929  004ACA  0E00               	movlw	0
  8930  004ACC  6E04               	movwf	___awmod@divisor+1,c
  8931  004ACE  0E0A               	movlw	10
  8932  004AD0  6E03               	movwf	___awmod@divisor,c
  8933  004AD2  C031  F001         	movff	fround@prec,___awmod@dividend
  8934  004AD6  6A02               	clrf	___awmod@dividend+1,c
  8935  004AD8  EC66  F01E         	call	___awmod	;wreg free
  8936  004ADC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8937  004AE0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8938  004AE4  ECAD  F01C         	call	___wmul	;wreg free
  8939  004AE8  0E5E               	movlw	low __npowers_
  8940  004AEA  240F               	addwf	?___wmul,w,c
  8941  004AEC  6EF6               	movwf	tblptrl,c
  8942  004AEE  0E7B               	movlw	high __npowers_
  8943  004AF0  2010               	addwfc	?___wmul+1,w,c
  8944  004AF2  6EF7               	movwf	tblptrh,c
  8945  004AF4                     	if	0	;There are less than 3 active tblptr bytes
  8946  004AF4                     	endif
  8947  004AF4  0009               	tblrd		*+
  8948  004AF6  CFF5 F01C          	movff	tablat,___ftmul@f2
  8949  004AFA  0009               	tblrd		*+
  8950  004AFC  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8951  004B00  000A               	tblrd		*-
  8952  004B02  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8953  004B06  C02E  F019         	movff	_fround$1198,___ftmul@f1
  8954  004B0A  C02F  F01A         	movff	_fround$1198+1,___ftmul@f1+1
  8955  004B0E  C030  F01B         	movff	_fround$1198+2,___ftmul@f1+2
  8956  004B12  EC36  F021         	call	___ftmul	;wreg free
  8957  004B16  C019  F02B         	movff	?___ftmul,_fround$1199
  8958  004B1A  C01A  F02C         	movff	?___ftmul+1,_fround$1199+1
  8959  004B1E  C01B  F02D         	movff	?___ftmul+2,_fround$1199+2
  8960                           
  8961                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8962  004B22  C02B  F019         	movff	_fround$1199,___ftmul@f1
  8963  004B26  C02C  F01A         	movff	_fround$1199+1,___ftmul@f1+1
  8964  004B2A  C02D  F01B         	movff	_fround$1199+2,___ftmul@f1+2
  8965  004B2E  0E00               	movlw	0
  8966  004B30  6E1C               	movwf	___ftmul@f2,c
  8967  004B32  0E00               	movlw	0
  8968  004B34  6E1D               	movwf	___ftmul@f2+1,c
  8969  004B36  0E3F               	movlw	63
  8970  004B38  6E1E               	movwf	___ftmul@f2+2,c
  8971  004B3A  EC36  F021         	call	___ftmul	;wreg free
  8972  004B3E  C019  F028         	movff	?___ftmul,?_fround
  8973  004B42  C01A  F029         	movff	?___ftmul+1,?_fround+1
  8974  004B46  C01B  F02A         	movff	?___ftmul+2,?_fround+2
  8975  004B4A  0012               	return	
  8976  004B4C                     l3751:
  8977                           
  8978                           ;doprnt.c: 415: else if(prec > 10)
  8979  004B4C  0E0A               	movlw	10
  8980  004B4E  6431               	cpfsgt	fround@prec,c
  8981  004B50  D05D               	goto	l3759
  8982                           
  8983                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8984  004B52  0E00               	movlw	0
  8985  004B54  6E12               	movwf	___wmul@multiplicand+1,c
  8986  004B56  0E03               	movlw	3
  8987  004B58  6E11               	movwf	___wmul@multiplicand,c
  8988  004B5A  0E00               	movlw	0
  8989  004B5C  6E04               	movwf	___awmod@divisor+1,c
  8990  004B5E  0E0A               	movlw	10
  8991  004B60  6E03               	movwf	___awmod@divisor,c
  8992  004B62  C031  F001         	movff	fround@prec,___awmod@dividend
  8993  004B66  6A02               	clrf	___awmod@dividend+1,c
  8994  004B68  EC66  F01E         	call	___awmod	;wreg free
  8995  004B6C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8996  004B70  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8997  004B74  ECAD  F01C         	call	___wmul	;wreg free
  8998  004B78  0E5E               	movlw	low __npowers_
  8999  004B7A  240F               	addwf	?___wmul,w,c
  9000  004B7C  6EF6               	movwf	tblptrl,c
  9001  004B7E  0E7B               	movlw	high __npowers_
  9002  004B80  2010               	addwfc	?___wmul+1,w,c
  9003  004B82  6EF7               	movwf	tblptrh,c
  9004  004B84                     	if	0	;There are less than 3 active tblptr bytes
  9005  004B84                     	endif
  9006  004B84  0009               	tblrd		*+
  9007  004B86  CFF5 F01C          	movff	tablat,___ftmul@f2
  9008  004B8A  0009               	tblrd		*+
  9009  004B8C  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9010  004B90  000A               	tblrd		*-
  9011  004B92  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9012  004B96  0E00               	movlw	0
  9013  004B98  6E0A               	movwf	___awdiv@divisor+1,c
  9014  004B9A  0E0A               	movlw	10
  9015  004B9C  6E09               	movwf	___awdiv@divisor,c
  9016  004B9E  C031  F007         	movff	fround@prec,___awdiv@dividend
  9017  004BA2  6A08               	clrf	___awdiv@dividend+1,c
  9018  004BA4  EC20  F01F         	call	___awdiv	;wreg free
  9019  004BA8  0E09               	movlw	9
  9020  004BAA  2407               	addwf	?___awdiv,w,c
  9021  004BAC  6E0F               	movwf	___wmul@multiplier,c
  9022  004BAE  0E00               	movlw	0
  9023  004BB0  2008               	addwfc	?___awdiv+1,w,c
  9024  004BB2  6E10               	movwf	___wmul@multiplier+1,c
  9025  004BB4  0E00               	movlw	0
  9026  004BB6  6E12               	movwf	___wmul@multiplicand+1,c
  9027  004BB8  0E03               	movlw	3
  9028  004BBA  6E11               	movwf	___wmul@multiplicand,c
  9029  004BBC  ECAD  F01C         	call	___wmul	;wreg free
  9030  004BC0  0E5E               	movlw	low __npowers_
  9031  004BC2  240F               	addwf	?___wmul,w,c
  9032  004BC4  6EF6               	movwf	tblptrl,c
  9033  004BC6  0E7B               	movlw	high __npowers_
  9034  004BC8  2010               	addwfc	?___wmul+1,w,c
  9035  004BCA  6EF7               	movwf	tblptrh,c
  9036  004BCC                     	if	0	;There are less than 3 active tblptr bytes
  9037  004BCC                     	endif
  9038  004BCC  0009               	tblrd		*+
  9039  004BCE  CFF5 F019          	movff	tablat,___ftmul@f1
  9040  004BD2  0009               	tblrd		*+
  9041  004BD4  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9042  004BD8  000A               	tblrd		*-
  9043  004BDA  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9044  004BDE  EC36  F021         	call	___ftmul	;wreg free
  9045  004BE2  C019  F02E         	movff	?___ftmul,_fround$1198
  9046  004BE6  C01A  F02F         	movff	?___ftmul+1,_fround$1198+1
  9047  004BEA  C01B  F030         	movff	?___ftmul+2,_fround$1198+2
  9048                           
  9049                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9050  004BEE  C02E  F019         	movff	_fround$1198,___ftmul@f1
  9051  004BF2  C02F  F01A         	movff	_fround$1198+1,___ftmul@f1+1
  9052  004BF6  C030  F01B         	movff	_fround$1198+2,___ftmul@f1+2
  9053  004BFA  0E00               	movlw	0
  9054  004BFC  6E1C               	movwf	___ftmul@f2,c
  9055  004BFE  0E00               	movlw	0
  9056  004C00  6E1D               	movwf	___ftmul@f2+1,c
  9057  004C02  0E3F               	movlw	63
  9058  004C04  6E1E               	movwf	___ftmul@f2+2,c
  9059  004C06  EC36  F021         	call	___ftmul	;wreg free
  9060  004C0A  D799               	goto	L17
  9061  004C0C                     l3759:
  9062                           
  9063                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9064  004C0C  5031               	movf	fround@prec,w,c
  9065  004C0E  0D03               	mullw	3
  9066  004C10  0E5E               	movlw	low __npowers_
  9067  004C12  24F3               	addwf	prodl,w,c
  9068  004C14  6EF6               	movwf	tblptrl,c
  9069  004C16  0E7B               	movlw	high __npowers_
  9070  004C18  20F4               	addwfc	prodh,w,c
  9071  004C1A  6EF7               	movwf	tblptrh,c
  9072  004C1C                     	if	0	;There are less than 3 active tblptr bytes
  9073  004C1C                     	endif
  9074  004C1C  0009               	tblrd		*+
  9075  004C1E  CFF5 F019          	movff	tablat,___ftmul@f1
  9076  004C22  0009               	tblrd		*+
  9077  004C24  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9078  004C28  000A               	tblrd		*-
  9079  004C2A  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9080  004C2E  0E00               	movlw	0
  9081  004C30  6E1C               	movwf	___ftmul@f2,c
  9082  004C32  0E00               	movlw	0
  9083  004C34  6E1D               	movwf	___ftmul@f2+1,c
  9084  004C36  0E3F               	movlw	63
  9085  004C38  6E1E               	movwf	___ftmul@f2+2,c
  9086  004C3A  EC36  F021         	call	___ftmul	;wreg free
  9087  004C3E  C019  F028         	movff	?___ftmul,?_fround
  9088  004C42  C01A  F029         	movff	?___ftmul+1,?_fround+1
  9089  004C46  C01B  F02A         	movff	?___ftmul+2,?_fround+2
  9090  004C4A  0012               	return	
  9091  004C4C                     __end_of_fround:
  9092                           	opt stack 0
  9093                           tblptru	equ	0xFF8
  9094                           tblptrh	equ	0xFF7
  9095                           tblptrl	equ	0xFF6
  9096                           tablat	equ	0xFF5
  9097                           prodh	equ	0xFF4
  9098                           prodl	equ	0xFF3
  9099                           postinc0	equ	0xFEE
  9100                           wreg	equ	0xFE8
  9101                           indf1	equ	0xFE7
  9102                           postdec1	equ	0xFE5
  9103                           fsr1h	equ	0xFE2
  9104                           fsr1l	equ	0xFE1
  9105                           indf2	equ	0xFDF
  9106                           postinc2	equ	0xFDE
  9107                           postdec2	equ	0xFDD
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function ___ftmul *****************
  9113 ;; Defined at:
  9114 ;;		line 62 in file "/opt/microchip/xc8/v1.37/sources/common/ftmul.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;  f1              3   24[COMRAM] float 
  9117 ;;  f2              3   27[COMRAM] float 
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  f3_as_produc    3   34[COMRAM] unsigned um
  9120 ;;  sign            1   38[COMRAM] unsigned char 
  9121 ;;  cntr            1   37[COMRAM] unsigned char 
  9122 ;;  exp             1   33[COMRAM] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  3   24[COMRAM] float 
  9125 ;; Registers used:
  9126 ;;		wreg, status,2, status,0, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9132 ;;      Params:         6       0       0       0       0       0       0       0       0
  9133 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9134 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9135 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9136 ;;Total ram usage:       15 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    1
  9139 ;; This function calls:
  9140 ;;		___ftpack
  9141 ;; This function is called by:
  9142 ;;		_main
  9143 ;;		_fround
  9144 ;;		_scale
  9145 ;;		_sprintf
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           	psect	text9
  9150  00426C                     __ptext9:
  9151                           	opt stack 0
  9152  00426C                     ___ftmul:
  9153                           	opt stack 27
  9154                           
  9155                           ;incstack = 0
  9156  00426C  C01B  F01F         	movff	___ftmul@f1+2,??___ftmul
  9157  004270  6A20               	clrf	(??___ftmul+1)& (0+255),c
  9158  004272  6A21               	clrf	(??___ftmul+2)& (0+255),c
  9159  004274  341A               	rlcf	___ftmul@f1+1,w,c
  9160  004276  361F               	rlcf	??___ftmul& (0+255),f,c
  9161  004278  E301               	bnc	u3561
  9162  00427A  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  9163  00427C                     u3561:
  9164  00427C  501F               	movf	??___ftmul,w,c
  9165  00427E  6E22               	movwf	___ftmul@exp,c
  9166  004280  5022               	movf	___ftmul@exp,w,c
  9167  004282  A4D8               	btfss	status,2,c
  9168  004284  D007               	goto	l3503
  9169  004286  0E00               	movlw	0
  9170  004288  6E19               	movwf	?___ftmul,c
  9171  00428A  0E00               	movlw	0
  9172  00428C  6E1A               	movwf	?___ftmul+1,c
  9173  00428E  0E00               	movlw	0
  9174  004290  6E1B               	movwf	?___ftmul+2,c
  9175  004292  0012               	return	
  9176  004294                     l3503:
  9177  004294  C01E  F01F         	movff	___ftmul@f2+2,??___ftmul
  9178  004298  6A20               	clrf	(??___ftmul+1)& (0+255),c
  9179  00429A  6A21               	clrf	(??___ftmul+2)& (0+255),c
  9180  00429C  341D               	rlcf	___ftmul@f2+1,w,c
  9181  00429E  361F               	rlcf	??___ftmul& (0+255),f,c
  9182  0042A0  E301               	bnc	u3581
  9183  0042A2  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  9184  0042A4                     u3581:
  9185  0042A4  501F               	movf	??___ftmul,w,c
  9186  0042A6  6E27               	movwf	___ftmul@sign,c
  9187  0042A8  5027               	movf	___ftmul@sign,w,c
  9188  0042AA  A4D8               	btfss	status,2,c
  9189  0042AC  D007               	goto	l3509
  9190  0042AE  0E00               	movlw	0
  9191  0042B0  6E19               	movwf	?___ftmul,c
  9192  0042B2  0E00               	movlw	0
  9193  0042B4  6E1A               	movwf	?___ftmul+1,c
  9194  0042B6  0E00               	movlw	0
  9195  0042B8  6E1B               	movwf	?___ftmul+2,c
  9196  0042BA  0012               	return	
  9197  0042BC                     l3509:
  9198  0042BC  5027               	movf	___ftmul@sign,w,c
  9199  0042BE  0F7B               	addlw	123
  9200  0042C0  2622               	addwf	___ftmul@exp,f,c
  9201  0042C2  C01B  F027         	movff	___ftmul@f1+2,___ftmul@sign
  9202  0042C6  501E               	movf	___ftmul@f2+2,w,c
  9203  0042C8  1A27               	xorwf	___ftmul@sign,f,c
  9204  0042CA  0E80               	movlw	128
  9205  0042CC  1627               	andwf	___ftmul@sign,f,c
  9206  0042CE  8E1A               	bsf	___ftmul@f1+1,7,c
  9207  0042D0  8E1D               	bsf	___ftmul@f2+1,7,c
  9208  0042D2  0EFF               	movlw	255
  9209  0042D4  161C               	andwf	___ftmul@f2,f,c
  9210  0042D6  0EFF               	movlw	255
  9211  0042D8  161D               	andwf	___ftmul@f2+1,f,c
  9212  0042DA  0E00               	movlw	0
  9213  0042DC  161E               	andwf	___ftmul@f2+2,f,c
  9214  0042DE  0E00               	movlw	0
  9215  0042E0  6E23               	movwf	___ftmul@f3_as_product,c
  9216  0042E2  0E00               	movlw	0
  9217  0042E4  6E24               	movwf	___ftmul@f3_as_product+1,c
  9218  0042E6  0E00               	movlw	0
  9219  0042E8  6E25               	movwf	___ftmul@f3_as_product+2,c
  9220  0042EA  0E07               	movlw	7
  9221  0042EC  6E26               	movwf	___ftmul@cntr,c
  9222  0042EE                     l3523:
  9223  0042EE  A019               	btfss	___ftmul@f1,0,c
  9224  0042F0  D006               	goto	l3527
  9225  0042F2  501C               	movf	___ftmul@f2,w,c
  9226  0042F4  2623               	addwf	___ftmul@f3_as_product,f,c
  9227  0042F6  501D               	movf	___ftmul@f2+1,w,c
  9228  0042F8  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  9229  0042FA  501E               	movf	___ftmul@f2+2,w,c
  9230  0042FC  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  9231  0042FE                     l3527:
  9232  0042FE  90D8               	bcf	status,0,c
  9233  004300  321B               	rrcf	___ftmul@f1+2,f,c
  9234  004302  321A               	rrcf	___ftmul@f1+1,f,c
  9235  004304  3219               	rrcf	___ftmul@f1,f,c
  9236  004306  90D8               	bcf	status,0,c
  9237  004308  361C               	rlcf	___ftmul@f2,f,c
  9238  00430A  361D               	rlcf	___ftmul@f2+1,f,c
  9239  00430C  361E               	rlcf	___ftmul@f2+2,f,c
  9240  00430E  2E26               	decfsz	___ftmul@cntr,f,c
  9241  004310  D7EE               	goto	l3523
  9242  004312  0E09               	movlw	9
  9243  004314  6E26               	movwf	___ftmul@cntr,c
  9244  004316                     l3533:
  9245  004316  A019               	btfss	___ftmul@f1,0,c
  9246  004318  D006               	goto	l3537
  9247  00431A  501C               	movf	___ftmul@f2,w,c
  9248  00431C  2623               	addwf	___ftmul@f3_as_product,f,c
  9249  00431E  501D               	movf	___ftmul@f2+1,w,c
  9250  004320  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  9251  004322  501E               	movf	___ftmul@f2+2,w,c
  9252  004324  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  9253  004326                     l3537:
  9254  004326  90D8               	bcf	status,0,c
  9255  004328  321B               	rrcf	___ftmul@f1+2,f,c
  9256  00432A  321A               	rrcf	___ftmul@f1+1,f,c
  9257  00432C  3219               	rrcf	___ftmul@f1,f,c
  9258  00432E  90D8               	bcf	status,0,c
  9259  004330  3225               	rrcf	___ftmul@f3_as_product+2,f,c
  9260  004332  3224               	rrcf	___ftmul@f3_as_product+1,f,c
  9261  004334  3223               	rrcf	___ftmul@f3_as_product,f,c
  9262  004336  2E26               	decfsz	___ftmul@cntr,f,c
  9263  004338  D7EE               	goto	l3533
  9264  00433A  C023  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9265  00433E  C024  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9266  004342  C025  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9267  004346  C022  F004         	movff	___ftmul@exp,___ftpack@exp
  9268  00434A  C027  F005         	movff	___ftmul@sign,___ftpack@sign
  9269  00434E  ECF2  F01F         	call	___ftpack	;wreg free
  9270  004352  C001  F019         	movff	?___ftpack,?___ftmul
  9271  004356  C002  F01A         	movff	?___ftpack+1,?___ftmul+1
  9272  00435A  C003  F01B         	movff	?___ftpack+2,?___ftmul+2
  9273  00435E  0012               	return	
  9274  004360                     __end_of___ftmul:
  9275                           	opt stack 0
  9276                           tblptru	equ	0xFF8
  9277                           tblptrh	equ	0xFF7
  9278                           tblptrl	equ	0xFF6
  9279                           tablat	equ	0xFF5
  9280                           prodh	equ	0xFF4
  9281                           prodl	equ	0xFF3
  9282                           postinc0	equ	0xFEE
  9283                           wreg	equ	0xFE8
  9284                           indf1	equ	0xFE7
  9285                           postdec1	equ	0xFE5
  9286                           fsr1h	equ	0xFE2
  9287                           fsr1l	equ	0xFE1
  9288                           indf2	equ	0xFDF
  9289                           postinc2	equ	0xFDE
  9290                           postdec2	equ	0xFDD
  9291                           fsr2h	equ	0xFDA
  9292                           fsr2l	equ	0xFD9
  9293                           status	equ	0xFD8
  9294                           
  9295 ;; *************** function ___awmod *****************
  9296 ;; Defined at:
  9297 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/awmod.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  dividend        2    0[COMRAM] int 
  9300 ;;  divisor         2    2[COMRAM] int 
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;  sign            1    5[COMRAM] unsigned char 
  9303 ;;  counter         1    4[COMRAM] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  2    0[COMRAM] int 
  9306 ;; Registers used:
  9307 ;;		wreg, status,2, status,0
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9313 ;;      Params:         4       0       0       0       0       0       0       0       0
  9314 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9316 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9317 ;;Total ram usage:        6 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		_fround
  9323 ;;		_scale
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           	psect	text10
  9328  003CCC                     __ptext10:
  9329                           	opt stack 0
  9330  003CCC                     ___awmod:
  9331                           	opt stack 28
  9332                           
  9333                           ;incstack = 0
  9334  003CCC  0E00               	movlw	0
  9335  003CCE  6E06               	movwf	___awmod@sign,c
  9336  003CD0  AE02               	btfss	___awmod@dividend+1,7,c
  9337  003CD2  D006               	goto	l3597
  9338  003CD4  6C01               	negf	___awmod@dividend,c
  9339  003CD6  1E02               	comf	___awmod@dividend+1,f,c
  9340  003CD8  B0D8               	btfsc	status,0,c
  9341  003CDA  2A02               	incf	___awmod@dividend+1,f,c
  9342  003CDC  0E01               	movlw	1
  9343  003CDE  6E06               	movwf	___awmod@sign,c
  9344  003CE0                     l3597:
  9345  003CE0  AE04               	btfss	___awmod@divisor+1,7,c
  9346  003CE2  D004               	goto	l3601
  9347  003CE4  6C03               	negf	___awmod@divisor,c
  9348  003CE6  1E04               	comf	___awmod@divisor+1,f,c
  9349  003CE8  B0D8               	btfsc	status,0,c
  9350  003CEA  2A04               	incf	___awmod@divisor+1,f,c
  9351  003CEC                     l3601:
  9352  003CEC  5003               	movf	___awmod@divisor,w,c
  9353  003CEE  1004               	iorwf	___awmod@divisor+1,w,c
  9354  003CF0  B4D8               	btfsc	status,2,c
  9355  003CF2  D018               	goto	l3617
  9356  003CF4  0E01               	movlw	1
  9357  003CF6  6E05               	movwf	___awmod@counter,c
  9358  003CF8  D004               	goto	l3607
  9359  003CFA                     l3605:
  9360  003CFA  90D8               	bcf	status,0,c
  9361  003CFC  3603               	rlcf	___awmod@divisor,f,c
  9362  003CFE  3604               	rlcf	___awmod@divisor+1,f,c
  9363  003D00  2A05               	incf	___awmod@counter,f,c
  9364  003D02                     l3607:
  9365  003D02  AE04               	btfss	___awmod@divisor+1,7,c
  9366  003D04  D7FA               	goto	l3605
  9367  003D06                     l3609:
  9368  003D06  5003               	movf	___awmod@divisor,w,c
  9369  003D08  5C01               	subwf	___awmod@dividend,w,c
  9370  003D0A  5004               	movf	___awmod@divisor+1,w,c
  9371  003D0C  5802               	subwfb	___awmod@dividend+1,w,c
  9372  003D0E  A0D8               	btfss	status,0,c
  9373  003D10  D004               	goto	l3613
  9374  003D12  5003               	movf	___awmod@divisor,w,c
  9375  003D14  5E01               	subwf	___awmod@dividend,f,c
  9376  003D16  5004               	movf	___awmod@divisor+1,w,c
  9377  003D18  5A02               	subwfb	___awmod@dividend+1,f,c
  9378  003D1A                     l3613:
  9379  003D1A  90D8               	bcf	status,0,c
  9380  003D1C  3204               	rrcf	___awmod@divisor+1,f,c
  9381  003D1E  3203               	rrcf	___awmod@divisor,f,c
  9382  003D20  2E05               	decfsz	___awmod@counter,f,c
  9383  003D22  D7F1               	goto	l3609
  9384  003D24                     l3617:
  9385  003D24  5006               	movf	___awmod@sign,w,c
  9386  003D26  B4D8               	btfsc	status,2,c
  9387  003D28  D004               	goto	l3621
  9388  003D2A  6C01               	negf	___awmod@dividend,c
  9389  003D2C  1E02               	comf	___awmod@dividend+1,f,c
  9390  003D2E  B0D8               	btfsc	status,0,c
  9391  003D30  2A02               	incf	___awmod@dividend+1,f,c
  9392  003D32                     l3621:
  9393  003D32  C001  F001         	movff	___awmod@dividend,?___awmod
  9394  003D36  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9395  003D3A  0012               	return	
  9396  003D3C                     __end_of___awmod:
  9397                           	opt stack 0
  9398                           tblptru	equ	0xFF8
  9399                           tblptrh	equ	0xFF7
  9400                           tblptrl	equ	0xFF6
  9401                           tablat	equ	0xFF5
  9402                           prodh	equ	0xFF4
  9403                           prodl	equ	0xFF3
  9404                           postinc0	equ	0xFEE
  9405                           wreg	equ	0xFE8
  9406                           indf1	equ	0xFE7
  9407                           postdec1	equ	0xFE5
  9408                           fsr1h	equ	0xFE2
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           fsr2h	equ	0xFDA
  9414                           fsr2l	equ	0xFD9
  9415                           status	equ	0xFD8
  9416                           
  9417 ;; *************** function __tdiv_to_l_ *****************
  9418 ;; Defined at:
  9419 ;;		line 60 in file "/opt/microchip/xc8/v1.37/sources/common/ftdivl.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;  f1              3    0[COMRAM] float 
  9422 ;;  f2              3    3[COMRAM] float 
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  quot            4    9[COMRAM] unsigned long 
  9425 ;;  exp1            1   14[COMRAM] unsigned char 
  9426 ;;  cntr            1   13[COMRAM] unsigned char 
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  4    0[COMRAM] unsigned long 
  9429 ;; Registers used:
  9430 ;;		wreg, status,2, status,0
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9436 ;;      Params:         6       0       0       0       0       0       0       0       0
  9437 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9438 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9439 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9440 ;;Total ram usage:       15 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; This function calls:
  9443 ;;		Nothing
  9444 ;; This function is called by:
  9445 ;;		_sprintf
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           	psect	text11
  9450  004488                     __ptext11:
  9451                           	opt stack 0
  9452  004488                     __tdiv_to_l_:
  9453                           	opt stack 29
  9454                           
  9455                           ;incstack = 0
  9456  004488  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9457  00448C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9458  00448E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9459  004490  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  9460  004492  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9461  004494  E301               	bnc	u4001
  9462  004496  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9463  004498                     u4001:
  9464  004498  5007               	movf	??__tdiv_to_l_,w,c
  9465  00449A  6E0F               	movwf	__tdiv_to_l_@exp1,c
  9466  00449C  500F               	movf	__tdiv_to_l_@exp1,w,c
  9467  00449E  A4D8               	btfss	status,2,c
  9468  0044A0  D009               	goto	l3819
  9469  0044A2  0E00               	movlw	0
  9470  0044A4  6E01               	movwf	?__tdiv_to_l_,c
  9471  0044A6  0E00               	movlw	0
  9472  0044A8  6E02               	movwf	?__tdiv_to_l_+1,c
  9473  0044AA  0E00               	movlw	0
  9474  0044AC  6E03               	movwf	?__tdiv_to_l_+2,c
  9475  0044AE  0E00               	movlw	0
  9476  0044B0  6E04               	movwf	?__tdiv_to_l_+3,c
  9477  0044B2  0012               	return	
  9478  0044B4                     l3819:
  9479  0044B4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9480  0044B8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9481  0044BA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9482  0044BC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  9483  0044BE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9484  0044C0  E301               	bnc	u4021
  9485  0044C2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9486  0044C4                     u4021:
  9487  0044C4  5007               	movf	??__tdiv_to_l_,w,c
  9488  0044C6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  9489  0044C8  500E               	movf	__tdiv_to_l_@cntr,w,c
  9490  0044CA  A4D8               	btfss	status,2,c
  9491  0044CC  D009               	goto	l3825
  9492  0044CE  0E00               	movlw	0
  9493  0044D0  6E01               	movwf	?__tdiv_to_l_,c
  9494  0044D2  0E00               	movlw	0
  9495  0044D4  6E02               	movwf	?__tdiv_to_l_+1,c
  9496  0044D6  0E00               	movlw	0
  9497  0044D8  6E03               	movwf	?__tdiv_to_l_+2,c
  9498  0044DA  0E00               	movlw	0
  9499  0044DC  6E04               	movwf	?__tdiv_to_l_+3,c
  9500  0044DE  0012               	return	
  9501  0044E0                     l3825:
  9502  0044E0  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  9503  0044E2  0EFF               	movlw	255
  9504  0044E4  1601               	andwf	__tdiv_to_l_@f1,f,c
  9505  0044E6  0EFF               	movlw	255
  9506  0044E8  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  9507  0044EA  0E00               	movlw	0
  9508  0044EC  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  9509  0044EE  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  9510  0044F0  0EFF               	movlw	255
  9511  0044F2  1604               	andwf	__tdiv_to_l_@f2,f,c
  9512  0044F4  0EFF               	movlw	255
  9513  0044F6  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  9514  0044F8  0E00               	movlw	0
  9515  0044FA  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  9516  0044FC  0E00               	movlw	0
  9517  0044FE  6E0A               	movwf	__tdiv_to_l_@quot,c
  9518  004500  0E00               	movlw	0
  9519  004502  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  9520  004504  0E00               	movlw	0
  9521  004506  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  9522  004508  0E00               	movlw	0
  9523  00450A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  9524  00450C  0E7F               	movlw	127
  9525  00450E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  9526  004510  500E               	movf	__tdiv_to_l_@cntr,w,c
  9527  004512  0F98               	addlw	152
  9528  004514  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  9529  004516  0E18               	movlw	24
  9530  004518  6E0E               	movwf	__tdiv_to_l_@cntr,c
  9531  00451A                     l778:
  9532  00451A  90D8               	bcf	status,0,c
  9533  00451C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  9534  00451E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  9535  004520  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  9536  004522  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  9537  004524  5004               	movf	__tdiv_to_l_@f2,w,c
  9538  004526  5C01               	subwf	__tdiv_to_l_@f1,w,c
  9539  004528  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9540  00452A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  9541  00452C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9542  00452E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  9543  004530  A0D8               	btfss	status,0,c
  9544  004532  D007               	goto	l779
  9545  004534  5004               	movf	__tdiv_to_l_@f2,w,c
  9546  004536  5E01               	subwf	__tdiv_to_l_@f1,f,c
  9547  004538  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9548  00453A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  9549  00453C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9550  00453E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  9551  004540  800A               	bsf	__tdiv_to_l_@quot,0,c
  9552  004542                     l779:
  9553  004542  90D8               	bcf	status,0,c
  9554  004544  3601               	rlcf	__tdiv_to_l_@f1,f,c
  9555  004546  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  9556  004548  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  9557  00454A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  9558  00454C  D7E6               	goto	l778
  9559  00454E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  9560  004550  D016               	goto	l3859
  9561  004552  500F               	movf	__tdiv_to_l_@exp1,w,c
  9562  004554  0A80               	xorlw	128
  9563  004556  0F97               	addlw	151
  9564  004558  B0D8               	btfsc	status,0,c
  9565  00455A  D009               	goto	l3855
  9566  00455C  0E00               	movlw	0
  9567  00455E  6E01               	movwf	?__tdiv_to_l_,c
  9568  004560  0E00               	movlw	0
  9569  004562  6E02               	movwf	?__tdiv_to_l_+1,c
  9570  004564  0E00               	movlw	0
  9571  004566  6E03               	movwf	?__tdiv_to_l_+2,c
  9572  004568  0E00               	movlw	0
  9573  00456A  6E04               	movwf	?__tdiv_to_l_+3,c
  9574  00456C  0012               	return	
  9575  00456E                     l3855:
  9576  00456E  90D8               	bcf	status,0,c
  9577  004570  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  9578  004572  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  9579  004574  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  9580  004576  320A               	rrcf	__tdiv_to_l_@quot,f,c
  9581  004578  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  9582  00457A  D7F9               	goto	l3855
  9583  00457C  D015               	goto	l785
  9584  00457E                     l3859:
  9585  00457E  0E17               	movlw	23
  9586  004580  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  9587  004582  D00F               	goto	l3867
  9588  004584  0E00               	movlw	0
  9589  004586  6E01               	movwf	?__tdiv_to_l_,c
  9590  004588  0E00               	movlw	0
  9591  00458A  6E02               	movwf	?__tdiv_to_l_+1,c
  9592  00458C  0E00               	movlw	0
  9593  00458E  6E03               	movwf	?__tdiv_to_l_+2,c
  9594  004590  0E00               	movlw	0
  9595  004592  6E04               	movwf	?__tdiv_to_l_+3,c
  9596  004594  0012               	return	
  9597  004596                     l3865:
  9598  004596  90D8               	bcf	status,0,c
  9599  004598  360A               	rlcf	__tdiv_to_l_@quot,f,c
  9600  00459A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  9601  00459C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  9602  00459E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  9603  0045A0  060F               	decf	__tdiv_to_l_@exp1,f,c
  9604  0045A2                     l3867:
  9605  0045A2  500F               	movf	__tdiv_to_l_@exp1,w,c
  9606  0045A4  A4D8               	btfss	status,2,c
  9607  0045A6  D7F7               	goto	l3865
  9608  0045A8                     l785:
  9609  0045A8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9610  0045AC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9611  0045B0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9612  0045B4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9613  0045B8  0012               	return		;funcret
  9614  0045BA                     __end_of__tdiv_to_l_:
  9615                           	opt stack 0
  9616                           tblptru	equ	0xFF8
  9617                           tblptrh	equ	0xFF7
  9618                           tblptrl	equ	0xFF6
  9619                           tablat	equ	0xFF5
  9620                           prodh	equ	0xFF4
  9621                           prodl	equ	0xFF3
  9622                           postinc0	equ	0xFEE
  9623                           wreg	equ	0xFE8
  9624                           indf1	equ	0xFE7
  9625                           postdec1	equ	0xFE5
  9626                           fsr1h	equ	0xFE2
  9627                           fsr1l	equ	0xFE1
  9628                           indf2	equ	0xFDF
  9629                           postinc2	equ	0xFDE
  9630                           postdec2	equ	0xFDD
  9631                           fsr2h	equ	0xFDA
  9632                           fsr2l	equ	0xFD9
  9633                           status	equ	0xFD8
  9634                           
  9635 ;; *************** function __div_to_l_ *****************
  9636 ;; Defined at:
  9637 ;;		line 60 in file "/opt/microchip/xc8/v1.37/sources/common/fldivl.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;  f1              3    0[COMRAM] unsigned long 
  9640 ;;  f2              3    3[COMRAM] unsigned long 
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;  quot            4    6[COMRAM] unsigned long 
  9643 ;;  exp1            1   11[COMRAM] unsigned char 
  9644 ;;  cntr            1   10[COMRAM] unsigned char 
  9645 ;; Return value:  Size  Location     Type
  9646 ;;                  4    0[COMRAM] unsigned long 
  9647 ;; Registers used:
  9648 ;;		wreg, status,2, status,0
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9654 ;;      Params:         6       0       0       0       0       0       0       0       0
  9655 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9657 ;;      Totals:        12       0       0       0       0       0       0       0       0
  9658 ;;Total ram usage:       12 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; This function calls:
  9661 ;;		Nothing
  9662 ;; This function is called by:
  9663 ;;		_sprintf
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           	psect	text12
  9668  004360                     __ptext12:
  9669                           	opt stack 0
  9670  004360                     __div_to_l_:
  9671                           	opt stack 29
  9672                           
  9673                           ;incstack = 0
  9674  004360  3403               	rlcf	__div_to_l_@f1+2,w,c
  9675  004362  3404               	rlcf	__div_to_l_@f1+3,w,c
  9676  004364  6E0C               	movwf	__div_to_l_@exp1,c
  9677  004366  500C               	movf	__div_to_l_@exp1,w,c
  9678  004368  A4D8               	btfss	status,2,c
  9679  00436A  D009               	goto	l3875
  9680  00436C  0E00               	movlw	0
  9681  00436E  6E01               	movwf	?__div_to_l_,c
  9682  004370  0E00               	movlw	0
  9683  004372  6E02               	movwf	?__div_to_l_+1,c
  9684  004374  0E00               	movlw	0
  9685  004376  6E03               	movwf	?__div_to_l_+2,c
  9686  004378  0E00               	movlw	0
  9687  00437A  6E04               	movwf	?__div_to_l_+3,c
  9688  00437C  0012               	return	
  9689  00437E                     l3875:
  9690  00437E  3406               	rlcf	__div_to_l_@f2+2,w,c
  9691  004380  3407               	rlcf	__div_to_l_@f2+3,w,c
  9692  004382  6E0B               	movwf	__div_to_l_@cntr,c
  9693  004384  500B               	movf	__div_to_l_@cntr,w,c
  9694  004386  A4D8               	btfss	status,2,c
  9695  004388  D009               	goto	l3881
  9696  00438A  0E00               	movlw	0
  9697  00438C  6E01               	movwf	?__div_to_l_,c
  9698  00438E  0E00               	movlw	0
  9699  004390  6E02               	movwf	?__div_to_l_+1,c
  9700  004392  0E00               	movlw	0
  9701  004394  6E03               	movwf	?__div_to_l_+2,c
  9702  004396  0E00               	movlw	0
  9703  004398  6E04               	movwf	?__div_to_l_+3,c
  9704  00439A  0012               	return	
  9705  00439C                     l3881:
  9706  00439C  8E03               	bsf	__div_to_l_@f1+2,7,c
  9707  00439E  0EFF               	movlw	255
  9708  0043A0  1601               	andwf	__div_to_l_@f1,f,c
  9709  0043A2  0EFF               	movlw	255
  9710  0043A4  1602               	andwf	__div_to_l_@f1+1,f,c
  9711  0043A6  0EFF               	movlw	255
  9712  0043A8  1603               	andwf	__div_to_l_@f1+2,f,c
  9713  0043AA  0E00               	movlw	0
  9714  0043AC  1604               	andwf	__div_to_l_@f1+3,f,c
  9715  0043AE  8E06               	bsf	__div_to_l_@f2+2,7,c
  9716  0043B0  0EFF               	movlw	255
  9717  0043B2  1604               	andwf	__div_to_l_@f2,f,c
  9718  0043B4  0EFF               	movlw	255
  9719  0043B6  1605               	andwf	__div_to_l_@f2+1,f,c
  9720  0043B8  0EFF               	movlw	255
  9721  0043BA  1606               	andwf	__div_to_l_@f2+2,f,c
  9722  0043BC  0E00               	movlw	0
  9723  0043BE  1607               	andwf	__div_to_l_@f2+3,f,c
  9724  0043C0  0E00               	movlw	0
  9725  0043C2  6E07               	movwf	__div_to_l_@quot,c
  9726  0043C4  0E00               	movlw	0
  9727  0043C6  6E08               	movwf	__div_to_l_@quot+1,c
  9728  0043C8  0E00               	movlw	0
  9729  0043CA  6E09               	movwf	__div_to_l_@quot+2,c
  9730  0043CC  0E00               	movlw	0
  9731  0043CE  6E0A               	movwf	__div_to_l_@quot+3,c
  9732  0043D0  0E7F               	movlw	127
  9733  0043D2  5E0C               	subwf	__div_to_l_@exp1,f,c
  9734  0043D4  500B               	movf	__div_to_l_@cntr,w,c
  9735  0043D6  0FA0               	addlw	160
  9736  0043D8  5E0C               	subwf	__div_to_l_@exp1,f,c
  9737  0043DA  0E20               	movlw	32
  9738  0043DC  6E0B               	movwf	__div_to_l_@cntr,c
  9739  0043DE                     l3895:
  9740  0043DE  90D8               	bcf	status,0,c
  9741  0043E0  3607               	rlcf	__div_to_l_@quot,f,c
  9742  0043E2  3608               	rlcf	__div_to_l_@quot+1,f,c
  9743  0043E4  3609               	rlcf	__div_to_l_@quot+2,f,c
  9744  0043E6  360A               	rlcf	__div_to_l_@quot+3,f,c
  9745  0043E8  5004               	movf	__div_to_l_@f2,w,c
  9746  0043EA  5C01               	subwf	__div_to_l_@f1,w,c
  9747  0043EC  5005               	movf	__div_to_l_@f2+1,w,c
  9748  0043EE  5802               	subwfb	__div_to_l_@f1+1,w,c
  9749  0043F0  5006               	movf	__div_to_l_@f2+2,w,c
  9750  0043F2  5803               	subwfb	__div_to_l_@f1+2,w,c
  9751  0043F4  5007               	movf	__div_to_l_@f2+3,w,c
  9752  0043F6  5804               	subwfb	__div_to_l_@f1+3,w,c
  9753  0043F8  A0D8               	btfss	status,0,c
  9754  0043FA  D009               	goto	l3903
  9755  0043FC  5004               	movf	__div_to_l_@f2,w,c
  9756  0043FE  5E01               	subwf	__div_to_l_@f1,f,c
  9757  004400  5005               	movf	__div_to_l_@f2+1,w,c
  9758  004402  5A02               	subwfb	__div_to_l_@f1+1,f,c
  9759  004404  5006               	movf	__div_to_l_@f2+2,w,c
  9760  004406  5A03               	subwfb	__div_to_l_@f1+2,f,c
  9761  004408  5007               	movf	__div_to_l_@f2+3,w,c
  9762  00440A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  9763  00440C  8007               	bsf	__div_to_l_@quot,0,c
  9764  00440E                     l3903:
  9765  00440E  90D8               	bcf	status,0,c
  9766  004410  3601               	rlcf	__div_to_l_@f1,f,c
  9767  004412  3602               	rlcf	__div_to_l_@f1+1,f,c
  9768  004414  3603               	rlcf	__div_to_l_@f1+2,f,c
  9769  004416  3604               	rlcf	__div_to_l_@f1+3,f,c
  9770  004418  2E0B               	decfsz	__div_to_l_@cntr,f,c
  9771  00441A  D7E1               	goto	l3895
  9772  00441C  AE0C               	btfss	__div_to_l_@exp1,7,c
  9773  00441E  D016               	goto	l3919
  9774  004420  500C               	movf	__div_to_l_@exp1,w,c
  9775  004422  0A80               	xorlw	128
  9776  004424  0F9F               	addlw	159
  9777  004426  B0D8               	btfsc	status,0,c
  9778  004428  D009               	goto	l3915
  9779  00442A  0E00               	movlw	0
  9780  00442C  6E01               	movwf	?__div_to_l_,c
  9781  00442E  0E00               	movlw	0
  9782  004430  6E02               	movwf	?__div_to_l_+1,c
  9783  004432  0E00               	movlw	0
  9784  004434  6E03               	movwf	?__div_to_l_+2,c
  9785  004436  0E00               	movlw	0
  9786  004438  6E04               	movwf	?__div_to_l_+3,c
  9787  00443A  0012               	return	
  9788  00443C                     l3915:
  9789  00443C  90D8               	bcf	status,0,c
  9790  00443E  320A               	rrcf	__div_to_l_@quot+3,f,c
  9791  004440  3209               	rrcf	__div_to_l_@quot+2,f,c
  9792  004442  3208               	rrcf	__div_to_l_@quot+1,f,c
  9793  004444  3207               	rrcf	__div_to_l_@quot,f,c
  9794  004446  3E0C               	incfsz	__div_to_l_@exp1,f,c
  9795  004448  D7F9               	goto	l3915
  9796  00444A  D015               	goto	l681
  9797  00444C                     l3919:
  9798  00444C  0E1F               	movlw	31
  9799  00444E  640C               	cpfsgt	__div_to_l_@exp1,c
  9800  004450  D00F               	goto	l3927
  9801  004452  0E00               	movlw	0
  9802  004454  6E01               	movwf	?__div_to_l_,c
  9803  004456  0E00               	movlw	0
  9804  004458  6E02               	movwf	?__div_to_l_+1,c
  9805  00445A  0E00               	movlw	0
  9806  00445C  6E03               	movwf	?__div_to_l_+2,c
  9807  00445E  0E00               	movlw	0
  9808  004460  6E04               	movwf	?__div_to_l_+3,c
  9809  004462  0012               	return	
  9810  004464                     l3925:
  9811  004464  90D8               	bcf	status,0,c
  9812  004466  3607               	rlcf	__div_to_l_@quot,f,c
  9813  004468  3608               	rlcf	__div_to_l_@quot+1,f,c
  9814  00446A  3609               	rlcf	__div_to_l_@quot+2,f,c
  9815  00446C  360A               	rlcf	__div_to_l_@quot+3,f,c
  9816  00446E  060C               	decf	__div_to_l_@exp1,f,c
  9817  004470                     l3927:
  9818  004470  500C               	movf	__div_to_l_@exp1,w,c
  9819  004472  A4D8               	btfss	status,2,c
  9820  004474  D7F7               	goto	l3925
  9821  004476                     l681:
  9822  004476  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  9823  00447A  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9824  00447E  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9825  004482  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9826  004486  0012               	return		;funcret
  9827  004488                     __end_of__div_to_l_:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           indf1	equ	0xFE7
  9838                           postdec1	equ	0xFE5
  9839                           fsr1h	equ	0xFE2
  9840                           fsr1l	equ	0xFE1
  9841                           indf2	equ	0xFDF
  9842                           postinc2	equ	0xFDE
  9843                           postdec2	equ	0xFDD
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848 ;; *************** function ___lltoft *****************
  9849 ;; Defined at:
  9850 ;;		line 35 in file "/opt/microchip/xc8/v1.37/sources/common/lltoft.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;  c               4    8[COMRAM] unsigned long 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  exp             1   16[COMRAM] unsigned char 
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  3    8[COMRAM] float 
  9857 ;; Registers used:
  9858 ;;		wreg, status,2, status,0, cstack
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9864 ;;      Params:         4       0       0       0       0       0       0       0       0
  9865 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9866 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9867 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9868 ;;Total ram usage:        9 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    1
  9871 ;; This function calls:
  9872 ;;		___ftpack
  9873 ;; This function is called by:
  9874 ;;		_sprintf
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           	psect	text13
  9879  003C0A                     __ptext13:
  9880                           	opt stack 0
  9881  003C0A                     ___lltoft:
  9882                           	opt stack 28
  9883                           
  9884                           ;incstack = 0
  9885  003C0A  0E8E               	movlw	142
  9886  003C0C  6E11               	movwf	___lltoft@exp,c
  9887  003C0E  D006               	goto	l4047
  9888  003C10                     l4045:
  9889  003C10  90D8               	bcf	status,0,c
  9890  003C12  320C               	rrcf	___lltoft@c+3,f,c
  9891  003C14  320B               	rrcf	___lltoft@c+2,f,c
  9892  003C16  320A               	rrcf	___lltoft@c+1,f,c
  9893  003C18  3209               	rrcf	___lltoft@c,f,c
  9894  003C1A  2A11               	incf	___lltoft@exp,f,c
  9895  003C1C                     l4047:
  9896  003C1C  0E00               	movlw	0
  9897  003C1E  1409               	andwf	___lltoft@c,w,c
  9898  003C20  6E0D               	movwf	??___lltoft& (0+255),c
  9899  003C22  0E00               	movlw	0
  9900  003C24  140A               	andwf	___lltoft@c+1,w,c
  9901  003C26  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9902  003C28  0E00               	movlw	0
  9903  003C2A  140B               	andwf	___lltoft@c+2,w,c
  9904  003C2C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9905  003C2E  0EFF               	movlw	255
  9906  003C30  140C               	andwf	___lltoft@c+3,w,c
  9907  003C32  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9908  003C34  500D               	movf	??___lltoft,w,c
  9909  003C36  100E               	iorwf	??___lltoft+1,w,c
  9910  003C38  100F               	iorwf	??___lltoft+2,w,c
  9911  003C3A  1010               	iorwf	??___lltoft+3,w,c
  9912  003C3C  A4D8               	btfss	status,2,c
  9913  003C3E  D7E8               	goto	l4045
  9914  003C40  C009  F001         	movff	___lltoft@c,___ftpack@arg
  9915  003C44  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  9916  003C48  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  9917  003C4C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  9918  003C50  0E00               	movlw	0
  9919  003C52  6E05               	movwf	___ftpack@sign,c
  9920  003C54  ECF2  F01F         	call	___ftpack	;wreg free
  9921  003C58  C001  F009         	movff	?___ftpack,?___lltoft
  9922  003C5C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9923  003C60  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9924  003C64  0012               	return	
  9925  003C66                     __end_of___lltoft:
  9926                           	opt stack 0
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           postinc0	equ	0xFEE
  9934                           wreg	equ	0xFE8
  9935                           indf1	equ	0xFE7
  9936                           postdec1	equ	0xFE5
  9937                           fsr1h	equ	0xFE2
  9938                           fsr1l	equ	0xFE1
  9939                           indf2	equ	0xFDF
  9940                           postinc2	equ	0xFDE
  9941                           postdec2	equ	0xFDD
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function ___llmod *****************
  9947 ;; Defined at:
  9948 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/llmod.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  dividend        4    0[COMRAM] unsigned long 
  9951 ;;  divisor         4    4[COMRAM] unsigned long 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  counter         1    8[COMRAM] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  4    0[COMRAM] unsigned long 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9963 ;;      Params:         8       0       0       0       0       0       0       0       0
  9964 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9966 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9967 ;;Total ram usage:        9 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_sprintf
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           	psect	text14
  9977  003C66                     __ptext14:
  9978                           	opt stack 0
  9979  003C66                     ___llmod:
  9980                           	opt stack 29
  9981                           
  9982                           ;incstack = 0
  9983  003C66  5005               	movf	___llmod@divisor,w,c
  9984  003C68  1006               	iorwf	___llmod@divisor+1,w,c
  9985  003C6A  1007               	iorwf	___llmod@divisor+2,w,c
  9986  003C6C  1008               	iorwf	___llmod@divisor+3,w,c
  9987  003C6E  B4D8               	btfsc	status,2,c
  9988  003C70  D024               	goto	l870
  9989  003C72  0E01               	movlw	1
  9990  003C74  6E09               	movwf	___llmod@counter,c
  9991  003C76  D006               	goto	l4033
  9992  003C78                     l4031:
  9993  003C78  90D8               	bcf	status,0,c
  9994  003C7A  3605               	rlcf	___llmod@divisor,f,c
  9995  003C7C  3606               	rlcf	___llmod@divisor+1,f,c
  9996  003C7E  3607               	rlcf	___llmod@divisor+2,f,c
  9997  003C80  3608               	rlcf	___llmod@divisor+3,f,c
  9998  003C82  2A09               	incf	___llmod@counter,f,c
  9999  003C84                     l4033:
 10000  003C84  AE08               	btfss	___llmod@divisor+3,7,c
 10001  003C86  D7F8               	goto	l4031
 10002  003C88                     l4035:
 10003  003C88  5005               	movf	___llmod@divisor,w,c
 10004  003C8A  5C01               	subwf	___llmod@dividend,w,c
 10005  003C8C  5006               	movf	___llmod@divisor+1,w,c
 10006  003C8E  5802               	subwfb	___llmod@dividend+1,w,c
 10007  003C90  5007               	movf	___llmod@divisor+2,w,c
 10008  003C92  5803               	subwfb	___llmod@dividend+2,w,c
 10009  003C94  5008               	movf	___llmod@divisor+3,w,c
 10010  003C96  5804               	subwfb	___llmod@dividend+3,w,c
 10011  003C98  A0D8               	btfss	status,0,c
 10012  003C9A  D008               	goto	l4039
 10013  003C9C  5005               	movf	___llmod@divisor,w,c
 10014  003C9E  5E01               	subwf	___llmod@dividend,f,c
 10015  003CA0  5006               	movf	___llmod@divisor+1,w,c
 10016  003CA2  5A02               	subwfb	___llmod@dividend+1,f,c
 10017  003CA4  5007               	movf	___llmod@divisor+2,w,c
 10018  003CA6  5A03               	subwfb	___llmod@dividend+2,f,c
 10019  003CA8  5008               	movf	___llmod@divisor+3,w,c
 10020  003CAA  5A04               	subwfb	___llmod@dividend+3,f,c
 10021  003CAC                     l4039:
 10022  003CAC  90D8               	bcf	status,0,c
 10023  003CAE  3208               	rrcf	___llmod@divisor+3,f,c
 10024  003CB0  3207               	rrcf	___llmod@divisor+2,f,c
 10025  003CB2  3206               	rrcf	___llmod@divisor+1,f,c
 10026  003CB4  3205               	rrcf	___llmod@divisor,f,c
 10027  003CB6  2E09               	decfsz	___llmod@counter,f,c
 10028  003CB8  D7E7               	goto	l4035
 10029  003CBA                     l870:
 10030  003CBA  C001  F001         	movff	___llmod@dividend,?___llmod
 10031  003CBE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
 10032  003CC2  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
 10033  003CC6  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
 10034  003CCA  0012               	return		;funcret
 10035  003CCC                     __end_of___llmod:
 10036                           	opt stack 0
 10037                           tblptru	equ	0xFF8
 10038                           tblptrh	equ	0xFF7
 10039                           tblptrl	equ	0xFF6
 10040                           tablat	equ	0xFF5
 10041                           prodh	equ	0xFF4
 10042                           prodl	equ	0xFF3
 10043                           postinc0	equ	0xFEE
 10044                           wreg	equ	0xFE8
 10045                           indf1	equ	0xFE7
 10046                           postdec1	equ	0xFE5
 10047                           fsr1h	equ	0xFE2
 10048                           fsr1l	equ	0xFE1
 10049                           indf2	equ	0xFDF
 10050                           postinc2	equ	0xFDE
 10051                           postdec2	equ	0xFDD
 10052                           fsr2h	equ	0xFDA
 10053                           fsr2l	equ	0xFD9
 10054                           status	equ	0xFD8
 10055                           
 10056 ;; *************** function ___lldiv *****************
 10057 ;; Defined at:
 10058 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lldiv.c"
 10059 ;; Parameters:    Size  Location     Type
 10060 ;;  dividend        4    0[COMRAM] unsigned long 
 10061 ;;  divisor         4    4[COMRAM] unsigned long 
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;  quotient        4    8[COMRAM] unsigned long 
 10064 ;;  counter         1   12[COMRAM] unsigned char 
 10065 ;; Return value:  Size  Location     Type
 10066 ;;                  4    0[COMRAM] unsigned long 
 10067 ;; Registers used:
 10068 ;;		wreg, status,2, status,0
 10069 ;; Tracked objects:
 10070 ;;		On entry : 0/0
 10071 ;;		On exit  : 0/0
 10072 ;;		Unchanged: 0/0
 10073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10074 ;;      Params:         8       0       0       0       0       0       0       0       0
 10075 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10076 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10077 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10078 ;;Total ram usage:       13 bytes
 10079 ;; Hardware stack levels used:    1
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_sprintf
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           	psect	text15
 10088  003DBE                     __ptext15:
 10089                           	opt stack 0
 10090  003DBE                     ___lldiv:
 10091                           	opt stack 29
 10092                           
 10093                           ;incstack = 0
 10094  003DBE  0E00               	movlw	0
 10095  003DC0  6E09               	movwf	___lldiv@quotient,c
 10096  003DC2  0E00               	movlw	0
 10097  003DC4  6E0A               	movwf	___lldiv@quotient+1,c
 10098  003DC6  0E00               	movlw	0
 10099  003DC8  6E0B               	movwf	___lldiv@quotient+2,c
 10100  003DCA  0E00               	movlw	0
 10101  003DCC  6E0C               	movwf	___lldiv@quotient+3,c
 10102  003DCE  5005               	movf	___lldiv@divisor,w,c
 10103  003DD0  1006               	iorwf	___lldiv@divisor+1,w,c
 10104  003DD2  1007               	iorwf	___lldiv@divisor+2,w,c
 10105  003DD4  1008               	iorwf	___lldiv@divisor+3,w,c
 10106  003DD6  B4D8               	btfsc	status,2,c
 10107  003DD8  D02A               	goto	l860
 10108  003DDA  0E01               	movlw	1
 10109  003DDC  6E0D               	movwf	___lldiv@counter,c
 10110  003DDE  D006               	goto	l4013
 10111  003DE0                     l4011:
 10112  003DE0  90D8               	bcf	status,0,c
 10113  003DE2  3605               	rlcf	___lldiv@divisor,f,c
 10114  003DE4  3606               	rlcf	___lldiv@divisor+1,f,c
 10115  003DE6  3607               	rlcf	___lldiv@divisor+2,f,c
 10116  003DE8  3608               	rlcf	___lldiv@divisor+3,f,c
 10117  003DEA  2A0D               	incf	___lldiv@counter,f,c
 10118  003DEC                     l4013:
 10119  003DEC  AE08               	btfss	___lldiv@divisor+3,7,c
 10120  003DEE  D7F8               	goto	l4011
 10121  003DF0                     l4015:
 10122  003DF0  90D8               	bcf	status,0,c
 10123  003DF2  3609               	rlcf	___lldiv@quotient,f,c
 10124  003DF4  360A               	rlcf	___lldiv@quotient+1,f,c
 10125  003DF6  360B               	rlcf	___lldiv@quotient+2,f,c
 10126  003DF8  360C               	rlcf	___lldiv@quotient+3,f,c
 10127  003DFA  5005               	movf	___lldiv@divisor,w,c
 10128  003DFC  5C01               	subwf	___lldiv@dividend,w,c
 10129  003DFE  5006               	movf	___lldiv@divisor+1,w,c
 10130  003E00  5802               	subwfb	___lldiv@dividend+1,w,c
 10131  003E02  5007               	movf	___lldiv@divisor+2,w,c
 10132  003E04  5803               	subwfb	___lldiv@dividend+2,w,c
 10133  003E06  5008               	movf	___lldiv@divisor+3,w,c
 10134  003E08  5804               	subwfb	___lldiv@dividend+3,w,c
 10135  003E0A  A0D8               	btfss	status,0,c
 10136  003E0C  D009               	goto	l4023
 10137  003E0E  5005               	movf	___lldiv@divisor,w,c
 10138  003E10  5E01               	subwf	___lldiv@dividend,f,c
 10139  003E12  5006               	movf	___lldiv@divisor+1,w,c
 10140  003E14  5A02               	subwfb	___lldiv@dividend+1,f,c
 10141  003E16  5007               	movf	___lldiv@divisor+2,w,c
 10142  003E18  5A03               	subwfb	___lldiv@dividend+2,f,c
 10143  003E1A  5008               	movf	___lldiv@divisor+3,w,c
 10144  003E1C  5A04               	subwfb	___lldiv@dividend+3,f,c
 10145  003E1E  8009               	bsf	___lldiv@quotient,0,c
 10146  003E20                     l4023:
 10147  003E20  90D8               	bcf	status,0,c
 10148  003E22  3208               	rrcf	___lldiv@divisor+3,f,c
 10149  003E24  3207               	rrcf	___lldiv@divisor+2,f,c
 10150  003E26  3206               	rrcf	___lldiv@divisor+1,f,c
 10151  003E28  3205               	rrcf	___lldiv@divisor,f,c
 10152  003E2A  2E0D               	decfsz	___lldiv@counter,f,c
 10153  003E2C  D7E1               	goto	l4015
 10154  003E2E                     l860:
 10155  003E2E  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10156  003E32  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10157  003E36  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10158  003E3A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10159  003E3E  0012               	return		;funcret
 10160  003E40                     __end_of___lldiv:
 10161                           	opt stack 0
 10162                           tblptru	equ	0xFF8
 10163                           tblptrh	equ	0xFF7
 10164                           tblptrl	equ	0xFF6
 10165                           tablat	equ	0xFF5
 10166                           prodh	equ	0xFF4
 10167                           prodl	equ	0xFF3
 10168                           postinc0	equ	0xFEE
 10169                           wreg	equ	0xFE8
 10170                           indf1	equ	0xFE7
 10171                           postdec1	equ	0xFE5
 10172                           fsr1h	equ	0xFE2
 10173                           fsr1l	equ	0xFE1
 10174                           indf2	equ	0xFDF
 10175                           postinc2	equ	0xFDE
 10176                           postdec2	equ	0xFDD
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function ___fttol *****************
 10182 ;; Defined at:
 10183 ;;		line 44 in file "/opt/microchip/xc8/v1.37/sources/common/fttol.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;  f1              3   61[COMRAM] float 
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;  lval            4   71[COMRAM] unsigned long 
 10188 ;;  exp1            1   75[COMRAM] unsigned char 
 10189 ;;  sign1           1   70[COMRAM] unsigned char 
 10190 ;; Return value:  Size  Location     Type
 10191 ;;                  4   61[COMRAM] long 
 10192 ;; Registers used:
 10193 ;;		wreg, status,2, status,0
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10199 ;;      Params:         4       0       0       0       0       0       0       0       0
 10200 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10201 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10202 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10203 ;;Total ram usage:       15 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; This function calls:
 10206 ;;		Nothing
 10207 ;; This function is called by:
 10208 ;;		_main
 10209 ;;		_sprintf
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           	psect	text16
 10214  004178                     __ptext16:
 10215                           	opt stack 0
 10216  004178                     ___fttol:
 10217                           	opt stack 29
 10218                           
 10219                           ;incstack = 0
 10220  004178  C040  F042         	movff	___fttol@f1+2,??___fttol
 10221  00417C  6A43               	clrf	(??___fttol+1)& (0+255),c
 10222  00417E  6A44               	clrf	(??___fttol+2)& (0+255),c
 10223  004180  343F               	rlcf	___fttol@f1+1,w,c
 10224  004182  3642               	rlcf	??___fttol& (0+255),f,c
 10225  004184  E301               	bnc	u4211
 10226  004186  8043               	bsf	(??___fttol+1)& (0+255),0,c
 10227  004188                     u4211:
 10228  004188  5042               	movf	??___fttol,w,c
 10229  00418A  6E4C               	movwf	___fttol@exp1,c
 10230  00418C  504C               	movf	___fttol@exp1,w,c
 10231  00418E  A4D8               	btfss	status,2,c
 10232  004190  D009               	goto	l3965
 10233  004192  0E00               	movlw	0
 10234  004194  6E3E               	movwf	?___fttol,c
 10235  004196  0E00               	movlw	0
 10236  004198  6E3F               	movwf	?___fttol+1,c
 10237  00419A  0E00               	movlw	0
 10238  00419C  6E40               	movwf	?___fttol+2,c
 10239  00419E  0E00               	movlw	0
 10240  0041A0  6E41               	movwf	?___fttol+3,c
 10241  0041A2  0012               	return	
 10242  0041A4                     l3965:
 10243  0041A4  0E17               	movlw	23
 10244  0041A6  6E42               	movwf	??___fttol& (0+255),c
 10245  0041A8  C03E  F043         	movff	___fttol@f1,??___fttol+1
 10246  0041AC  C03F  F044         	movff	___fttol@f1+1,??___fttol+2
 10247  0041B0  C040  F045         	movff	___fttol@f1+2,??___fttol+3
 10248  0041B4  2842               	incf	??___fttol,w,c
 10249  0041B6  6E46               	movwf	(??___fttol+4)& (0+255),c
 10250  0041B8  D004               	goto	u4230
 10251  0041BA                     u4235:
 10252  0041BA  90D8               	bcf	status,0,c
 10253  0041BC  3245               	rrcf	??___fttol+3,f,c
 10254  0041BE  3244               	rrcf	??___fttol+2,f,c
 10255  0041C0  3243               	rrcf	??___fttol+1,f,c
 10256  0041C2                     u4230:
 10257  0041C2  2E46               	decfsz	(??___fttol+4)& (0+255),f,c
 10258  0041C4  D7FA               	goto	u4235
 10259  0041C6  5043               	movf	??___fttol+1,w,c
 10260  0041C8  6E47               	movwf	___fttol@sign1,c
 10261  0041CA  8E3F               	bsf	___fttol@f1+1,7,c
 10262  0041CC  0EFF               	movlw	255
 10263  0041CE  163E               	andwf	___fttol@f1,f,c
 10264  0041D0  0EFF               	movlw	255
 10265  0041D2  163F               	andwf	___fttol@f1+1,f,c
 10266  0041D4  0E00               	movlw	0
 10267  0041D6  1640               	andwf	___fttol@f1+2,f,c
 10268  0041D8  503E               	movf	___fttol@f1,w,c
 10269  0041DA  6E48               	movwf	___fttol@lval,c
 10270  0041DC  503F               	movf	___fttol@f1+1,w,c
 10271  0041DE  6E49               	movwf	___fttol@lval+1,c
 10272  0041E0  5040               	movf	___fttol@f1+2,w,c
 10273  0041E2  6E4A               	movwf	___fttol@lval+2,c
 10274  0041E4  6A4B               	clrf	___fttol@lval+3,c
 10275  0041E6  0E8E               	movlw	142
 10276  0041E8  5E4C               	subwf	___fttol@exp1,f,c
 10277  0041EA  AE4C               	btfss	___fttol@exp1,7,c
 10278  0041EC  D016               	goto	l3987
 10279  0041EE  504C               	movf	___fttol@exp1,w,c
 10280  0041F0  0A80               	xorlw	128
 10281  0041F2  0F8F               	addlw	143
 10282  0041F4  B0D8               	btfsc	status,0,c
 10283  0041F6  D009               	goto	l3983
 10284  0041F8  0E00               	movlw	0
 10285  0041FA  6E3E               	movwf	?___fttol,c
 10286  0041FC  0E00               	movlw	0
 10287  0041FE  6E3F               	movwf	?___fttol+1,c
 10288  004200  0E00               	movlw	0
 10289  004202  6E40               	movwf	?___fttol+2,c
 10290  004204  0E00               	movlw	0
 10291  004206  6E41               	movwf	?___fttol+3,c
 10292  004208  0012               	return	
 10293  00420A                     l3983:
 10294  00420A  90D8               	bcf	status,0,c
 10295  00420C  324B               	rrcf	___fttol@lval+3,f,c
 10296  00420E  324A               	rrcf	___fttol@lval+2,f,c
 10297  004210  3249               	rrcf	___fttol@lval+1,f,c
 10298  004212  3248               	rrcf	___fttol@lval,f,c
 10299  004214  3E4C               	incfsz	___fttol@exp1,f,c
 10300  004216  D7F9               	goto	l3983
 10301  004218  D015               	goto	l3997
 10302  00421A                     l3987:
 10303  00421A  0E17               	movlw	23
 10304  00421C  644C               	cpfsgt	___fttol@exp1,c
 10305  00421E  D00F               	goto	l3995
 10306  004220  0E00               	movlw	0
 10307  004222  6E3E               	movwf	?___fttol,c
 10308  004224  0E00               	movlw	0
 10309  004226  6E3F               	movwf	?___fttol+1,c
 10310  004228  0E00               	movlw	0
 10311  00422A  6E40               	movwf	?___fttol+2,c
 10312  00422C  0E00               	movlw	0
 10313  00422E  6E41               	movwf	?___fttol+3,c
 10314  004230  0012               	return	
 10315  004232                     l3993:
 10316  004232  90D8               	bcf	status,0,c
 10317  004234  3648               	rlcf	___fttol@lval,f,c
 10318  004236  3649               	rlcf	___fttol@lval+1,f,c
 10319  004238  364A               	rlcf	___fttol@lval+2,f,c
 10320  00423A  364B               	rlcf	___fttol@lval+3,f,c
 10321  00423C  064C               	decf	___fttol@exp1,f,c
 10322  00423E                     l3995:
 10323  00423E  504C               	movf	___fttol@exp1,w,c
 10324  004240  A4D8               	btfss	status,2,c
 10325  004242  D7F7               	goto	l3993
 10326  004244                     l3997:
 10327  004244  5047               	movf	___fttol@sign1,w,c
 10328  004246  B4D8               	btfsc	status,2,c
 10329  004248  D008               	goto	l4001
 10330  00424A  1E4B               	comf	___fttol@lval+3,f,c
 10331  00424C  1E4A               	comf	___fttol@lval+2,f,c
 10332  00424E  1E49               	comf	___fttol@lval+1,f,c
 10333  004250  6C48               	negf	___fttol@lval,c
 10334  004252  0E00               	movlw	0
 10335  004254  2249               	addwfc	___fttol@lval+1,f,c
 10336  004256  224A               	addwfc	___fttol@lval+2,f,c
 10337  004258  224B               	addwfc	___fttol@lval+3,f,c
 10338  00425A                     l4001:
 10339  00425A  C048  F03E         	movff	___fttol@lval,?___fttol
 10340  00425E  C049  F03F         	movff	___fttol@lval+1,?___fttol+1
 10341  004262  C04A  F040         	movff	___fttol@lval+2,?___fttol+2
 10342  004266  C04B  F041         	movff	___fttol@lval+3,?___fttol+3
 10343  00426A  0012               	return	
 10344  00426C                     __end_of___fttol:
 10345                           	opt stack 0
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           postinc0	equ	0xFEE
 10353                           wreg	equ	0xFE8
 10354                           indf1	equ	0xFE7
 10355                           postdec1	equ	0xFE5
 10356                           fsr1h	equ	0xFE2
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           postdec2	equ	0xFDD
 10361                           fsr2h	equ	0xFDA
 10362                           fsr2l	equ	0xFD9
 10363                           status	equ	0xFD8
 10364                           
 10365 ;; *************** function ___ftsub *****************
 10366 ;; Defined at:
 10367 ;;		line 20 in file "/opt/microchip/xc8/v1.37/sources/common/ftsub.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;  f1              3   61[COMRAM] float 
 10370 ;;  f2              3   64[COMRAM] float 
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  3   61[COMRAM] float 
 10375 ;; Registers used:
 10376 ;;		wreg, status,2, status,0, cstack
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10382 ;;      Params:         6       0       0       0       0       0       0       0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10385 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10386 ;;Total ram usage:        6 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    2
 10389 ;; This function calls:
 10390 ;;		___ftadd
 10391 ;; This function is called by:
 10392 ;;		_sprintf
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text17
 10397  003A46                     __ptext17:
 10398                           	opt stack 0
 10399  003A46                     ___ftsub:
 10400                           	opt stack 27
 10401                           
 10402                           ;incstack = 0
 10403  003A46  5041               	movf	___ftsub@f2,w,c
 10404  003A48  1042               	iorwf	___ftsub@f2+1,w,c
 10405  003A4A  1043               	iorwf	___ftsub@f2+2,w,c
 10406  003A4C  B4D8               	btfsc	status,2,c
 10407  003A4E  D006               	goto	l3933
 10408  003A50  0E00               	movlw	0
 10409  003A52  1A41               	xorwf	___ftsub@f2,f,c
 10410  003A54  0E00               	movlw	0
 10411  003A56  1A42               	xorwf	___ftsub@f2+1,f,c
 10412  003A58  0E80               	movlw	128
 10413  003A5A  1A43               	xorwf	___ftsub@f2+2,f,c
 10414  003A5C                     l3933:
 10415  003A5C  C03E  F032         	movff	___ftsub@f1,___ftadd@f1
 10416  003A60  C03F  F033         	movff	___ftsub@f1+1,___ftadd@f1+1
 10417  003A64  C040  F034         	movff	___ftsub@f1+2,___ftadd@f1+2
 10418  003A68  C041  F035         	movff	___ftsub@f2,___ftadd@f2
 10419  003A6C  C042  F036         	movff	___ftsub@f2+1,___ftadd@f2+1
 10420  003A70  C043  F037         	movff	___ftsub@f2+2,___ftadd@f2+2
 10421  003A74  EC2D  F024         	call	___ftadd	;wreg free
 10422  003A78  C032  F03E         	movff	?___ftadd,?___ftsub
 10423  003A7C  C033  F03F         	movff	?___ftadd+1,?___ftsub+1
 10424  003A80  C034  F040         	movff	?___ftadd+2,?___ftsub+2
 10425  003A84  0012               	return	
 10426  003A86                     __end_of___ftsub:
 10427                           	opt stack 0
 10428                           tblptru	equ	0xFF8
 10429                           tblptrh	equ	0xFF7
 10430                           tblptrl	equ	0xFF6
 10431                           tablat	equ	0xFF5
 10432                           prodh	equ	0xFF4
 10433                           prodl	equ	0xFF3
 10434                           postinc0	equ	0xFEE
 10435                           wreg	equ	0xFE8
 10436                           indf1	equ	0xFE7
 10437                           postdec1	equ	0xFE5
 10438                           fsr1h	equ	0xFE2
 10439                           fsr1l	equ	0xFE1
 10440                           indf2	equ	0xFDF
 10441                           postinc2	equ	0xFDE
 10442                           postdec2	equ	0xFDD
 10443                           fsr2h	equ	0xFDA
 10444                           fsr2l	equ	0xFD9
 10445                           status	equ	0xFD8
 10446                           
 10447 ;; *************** function ___ftadd *****************
 10448 ;; Defined at:
 10449 ;;		line 86 in file "/opt/microchip/xc8/v1.37/sources/common/ftadd.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  f1              3   49[COMRAM] float 
 10452 ;;  f2              3   52[COMRAM] float 
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  exp1            1   60[COMRAM] unsigned char 
 10455 ;;  exp2            1   59[COMRAM] unsigned char 
 10456 ;;  sign            1   58[COMRAM] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  3   49[COMRAM] float 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0, cstack
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10466 ;;      Params:         6       0       0       0       0       0       0       0       0
 10467 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10468 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10469 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10470 ;;Total ram usage:       12 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    1
 10473 ;; This function calls:
 10474 ;;		___ftpack
 10475 ;; This function is called by:
 10476 ;;		_main
 10477 ;;		_sprintf
 10478 ;;		___ftsub
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text18
 10483  00485A                     __ptext18:
 10484                           	opt stack 0
 10485  00485A                     ___ftadd:
 10486                           	opt stack 27
 10487                           
 10488                           ;incstack = 0
 10489  00485A  C034  F038         	movff	___ftadd@f1+2,??___ftadd
 10490  00485E  6A39               	clrf	(??___ftadd+1)& (0+255),c
 10491  004860  6A3A               	clrf	(??___ftadd+2)& (0+255),c
 10492  004862  3433               	rlcf	___ftadd@f1+1,w,c
 10493  004864  3638               	rlcf	??___ftadd& (0+255),f,c
 10494  004866  E301               	bnc	u3351
 10495  004868  8039               	bsf	(??___ftadd+1)& (0+255),0,c
 10496  00486A                     u3351:
 10497  00486A  5038               	movf	??___ftadd,w,c
 10498  00486C  6E3D               	movwf	___ftadd@exp1,c
 10499  00486E  C037  F038         	movff	___ftadd@f2+2,??___ftadd
 10500  004872  6A39               	clrf	(??___ftadd+1)& (0+255),c
 10501  004874  6A3A               	clrf	(??___ftadd+2)& (0+255),c
 10502  004876  3436               	rlcf	___ftadd@f2+1,w,c
 10503  004878  3638               	rlcf	??___ftadd& (0+255),f,c
 10504  00487A  E301               	bnc	u3361
 10505  00487C  8039               	bsf	(??___ftadd+1)& (0+255),0,c
 10506  00487E                     u3361:
 10507  00487E  5038               	movf	??___ftadd,w,c
 10508  004880  6E3C               	movwf	___ftadd@exp2,c
 10509  004882  503D               	movf	___ftadd@exp1,w,c
 10510  004884  B4D8               	btfsc	status,2,c
 10511  004886  D00B               	goto	l736
 10512  004888  503C               	movf	___ftadd@exp2,w,c
 10513  00488A  5C3D               	subwf	___ftadd@exp1,w,c
 10514  00488C  B0D8               	btfsc	status,0,c
 10515  00488E  D00E               	goto	l3435
 10516  004890  503D               	movf	___ftadd@exp1,w,c
 10517  004892  0800               	sublw	0
 10518  004894  243C               	addwf	___ftadd@exp2,w,c
 10519  004896  6E38               	movwf	??___ftadd& (0+255),c
 10520  004898  0E18               	movlw	24
 10521  00489A  6438               	cpfsgt	??___ftadd,c
 10522  00489C  D007               	goto	l3435
 10523  00489E                     l736:
 10524  00489E  C035  F032         	movff	___ftadd@f2,?___ftadd
 10525  0048A2  C036  F033         	movff	___ftadd@f2+1,?___ftadd+1
 10526  0048A6  C037  F034         	movff	___ftadd@f2+2,?___ftadd+2
 10527  0048AA  0012               	return	
 10528  0048AC                     l3435:
 10529  0048AC  503C               	movf	___ftadd@exp2,w,c
 10530  0048AE  B4D8               	btfsc	status,2,c
 10531  0048B0  D00B               	goto	l740
 10532  0048B2  503D               	movf	___ftadd@exp1,w,c
 10533  0048B4  5C3C               	subwf	___ftadd@exp2,w,c
 10534  0048B6  B0D8               	btfsc	status,0,c
 10535  0048B8  D00E               	goto	l3441
 10536  0048BA  503C               	movf	___ftadd@exp2,w,c
 10537  0048BC  0800               	sublw	0
 10538  0048BE  243D               	addwf	___ftadd@exp1,w,c
 10539  0048C0  6E38               	movwf	??___ftadd& (0+255),c
 10540  0048C2  0E18               	movlw	24
 10541  0048C4  6438               	cpfsgt	??___ftadd,c
 10542  0048C6  D007               	goto	l3441
 10543  0048C8                     l740:
 10544  0048C8  C032  F032         	movff	___ftadd@f1,?___ftadd
 10545  0048CC  C033  F033         	movff	___ftadd@f1+1,?___ftadd+1
 10546  0048D0  C034  F034         	movff	___ftadd@f1+2,?___ftadd+2
 10547  0048D4  0012               	return	
 10548  0048D6                     l3441:
 10549  0048D6  0E06               	movlw	6
 10550  0048D8  6E3B               	movwf	___ftadd@sign,c
 10551  0048DA  BE34               	btfsc	___ftadd@f1+2,7,c
 10552  0048DC  8E3B               	bsf	___ftadd@sign,7,c
 10553  0048DE  BE37               	btfsc	___ftadd@f2+2,7,c
 10554  0048E0  8C3B               	bsf	___ftadd@sign,6,c
 10555  0048E2  8E33               	bsf	___ftadd@f1+1,7,c
 10556  0048E4  0EFF               	movlw	255
 10557  0048E6  1632               	andwf	___ftadd@f1,f,c
 10558  0048E8  0EFF               	movlw	255
 10559  0048EA  1633               	andwf	___ftadd@f1+1,f,c
 10560  0048EC  0E00               	movlw	0
 10561  0048EE  1634               	andwf	___ftadd@f1+2,f,c
 10562  0048F0  8E36               	bsf	___ftadd@f2+1,7,c
 10563  0048F2  0EFF               	movlw	255
 10564  0048F4  1635               	andwf	___ftadd@f2,f,c
 10565  0048F6  0EFF               	movlw	255
 10566  0048F8  1636               	andwf	___ftadd@f2+1,f,c
 10567  0048FA  0E00               	movlw	0
 10568  0048FC  1637               	andwf	___ftadd@f2+2,f,c
 10569  0048FE  503C               	movf	___ftadd@exp2,w,c
 10570  004900  5C3D               	subwf	___ftadd@exp1,w,c
 10571  004902  B0D8               	btfsc	status,0,c
 10572  004904  D01B               	goto	l3467
 10573  004906                     l3457:
 10574  004906  90D8               	bcf	status,0,c
 10575  004908  3635               	rlcf	___ftadd@f2,f,c
 10576  00490A  3636               	rlcf	___ftadd@f2+1,f,c
 10577  00490C  3637               	rlcf	___ftadd@f2+2,f,c
 10578  00490E  063C               	decf	___ftadd@exp2,f,c
 10579  004910  503D               	movf	___ftadd@exp1,w,c
 10580  004912  183C               	xorwf	___ftadd@exp2,w,c
 10581  004914  B4D8               	btfsc	status,2,c
 10582  004916  D00D               	goto	l3465
 10583  004918  063B               	decf	___ftadd@sign,f,c
 10584  00491A  C03B  F038         	movff	___ftadd@sign,??___ftadd
 10585  00491E  0E07               	movlw	7
 10586  004920  1638               	andwf	??___ftadd,f,c
 10587  004922  B4D8               	btfsc	status,2,c
 10588  004924  D006               	goto	l3465
 10589  004926  D7EF               	goto	l3457
 10590  004928                     l3463:
 10591  004928  90D8               	bcf	status,0,c
 10592  00492A  3234               	rrcf	___ftadd@f1+2,f,c
 10593  00492C  3233               	rrcf	___ftadd@f1+1,f,c
 10594  00492E  3232               	rrcf	___ftadd@f1,f,c
 10595  004930  2A3D               	incf	___ftadd@exp1,f,c
 10596  004932                     l3465:
 10597  004932  503C               	movf	___ftadd@exp2,w,c
 10598  004934  183D               	xorwf	___ftadd@exp1,w,c
 10599  004936  B4D8               	btfsc	status,2,c
 10600  004938  D01F               	goto	l751
 10601  00493A  D7F6               	goto	l3463
 10602  00493C                     l3467:
 10603  00493C  503D               	movf	___ftadd@exp1,w,c
 10604  00493E  5C3C               	subwf	___ftadd@exp2,w,c
 10605  004940  B0D8               	btfsc	status,0,c
 10606  004942  D01A               	goto	l751
 10607  004944                     l3469:
 10608  004944  90D8               	bcf	status,0,c
 10609  004946  3632               	rlcf	___ftadd@f1,f,c
 10610  004948  3633               	rlcf	___ftadd@f1+1,f,c
 10611  00494A  3634               	rlcf	___ftadd@f1+2,f,c
 10612  00494C  063D               	decf	___ftadd@exp1,f,c
 10613  00494E  503D               	movf	___ftadd@exp1,w,c
 10614  004950  183C               	xorwf	___ftadd@exp2,w,c
 10615  004952  B4D8               	btfsc	status,2,c
 10616  004954  D00D               	goto	l3477
 10617  004956  063B               	decf	___ftadd@sign,f,c
 10618  004958  C03B  F038         	movff	___ftadd@sign,??___ftadd
 10619  00495C  0E07               	movlw	7
 10620  00495E  1638               	andwf	??___ftadd,f,c
 10621  004960  B4D8               	btfsc	status,2,c
 10622  004962  D006               	goto	l3477
 10623  004964  D7EF               	goto	l3469
 10624  004966                     l3475:
 10625  004966  90D8               	bcf	status,0,c
 10626  004968  3237               	rrcf	___ftadd@f2+2,f,c
 10627  00496A  3236               	rrcf	___ftadd@f2+1,f,c
 10628  00496C  3235               	rrcf	___ftadd@f2,f,c
 10629  00496E  2A3C               	incf	___ftadd@exp2,f,c
 10630  004970                     l3477:
 10631  004970  503C               	movf	___ftadd@exp2,w,c
 10632  004972  183D               	xorwf	___ftadd@exp1,w,c
 10633  004974  A4D8               	btfss	status,2,c
 10634  004976  D7F7               	goto	l3475
 10635  004978                     l751:
 10636  004978  AE3B               	btfss	___ftadd@sign,7,c
 10637  00497A  D00C               	goto	l760
 10638  00497C  0EFF               	movlw	255
 10639  00497E  1A32               	xorwf	___ftadd@f1,f,c
 10640  004980  0EFF               	movlw	255
 10641  004982  1A33               	xorwf	___ftadd@f1+1,f,c
 10642  004984  0EFF               	movlw	255
 10643  004986  1A34               	xorwf	___ftadd@f1+2,f,c
 10644  004988  0E01               	movlw	1
 10645  00498A  2632               	addwf	___ftadd@f1,f,c
 10646  00498C  0E00               	movlw	0
 10647  00498E  2233               	addwfc	___ftadd@f1+1,f,c
 10648  004990  0E00               	movlw	0
 10649  004992  2234               	addwfc	___ftadd@f1+2,f,c
 10650  004994                     l760:
 10651  004994  AC3B               	btfss	___ftadd@sign,6,c
 10652  004996  D00C               	goto	l3483
 10653  004998  0EFF               	movlw	255
 10654  00499A  1A35               	xorwf	___ftadd@f2,f,c
 10655  00499C  0EFF               	movlw	255
 10656  00499E  1A36               	xorwf	___ftadd@f2+1,f,c
 10657  0049A0  0EFF               	movlw	255
 10658  0049A2  1A37               	xorwf	___ftadd@f2+2,f,c
 10659  0049A4  0E01               	movlw	1
 10660  0049A6  2635               	addwf	___ftadd@f2,f,c
 10661  0049A8  0E00               	movlw	0
 10662  0049AA  2236               	addwfc	___ftadd@f2+1,f,c
 10663  0049AC  0E00               	movlw	0
 10664  0049AE  2237               	addwfc	___ftadd@f2+2,f,c
 10665  0049B0                     l3483:
 10666  0049B0  0E00               	movlw	0
 10667  0049B2  6E3B               	movwf	___ftadd@sign,c
 10668  0049B4  5032               	movf	___ftadd@f1,w,c
 10669  0049B6  2635               	addwf	___ftadd@f2,f,c
 10670  0049B8  5033               	movf	___ftadd@f1+1,w,c
 10671  0049BA  2236               	addwfc	___ftadd@f2+1,f,c
 10672  0049BC  5034               	movf	___ftadd@f1+2,w,c
 10673  0049BE  2237               	addwfc	___ftadd@f2+2,f,c
 10674  0049C0  AE37               	btfss	___ftadd@f2+2,7,c
 10675  0049C2  D00E               	goto	l3493
 10676  0049C4  0EFF               	movlw	255
 10677  0049C6  1A35               	xorwf	___ftadd@f2,f,c
 10678  0049C8  0EFF               	movlw	255
 10679  0049CA  1A36               	xorwf	___ftadd@f2+1,f,c
 10680  0049CC  0EFF               	movlw	255
 10681  0049CE  1A37               	xorwf	___ftadd@f2+2,f,c
 10682  0049D0  0E01               	movlw	1
 10683  0049D2  2635               	addwf	___ftadd@f2,f,c
 10684  0049D4  0E00               	movlw	0
 10685  0049D6  2236               	addwfc	___ftadd@f2+1,f,c
 10686  0049D8  0E00               	movlw	0
 10687  0049DA  2237               	addwfc	___ftadd@f2+2,f,c
 10688  0049DC  0E01               	movlw	1
 10689  0049DE  6E3B               	movwf	___ftadd@sign,c
 10690  0049E0                     l3493:
 10691  0049E0  C035  F001         	movff	___ftadd@f2,___ftpack@arg
 10692  0049E4  C036  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10693  0049E8  C037  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10694  0049EC  C03D  F004         	movff	___ftadd@exp1,___ftpack@exp
 10695  0049F0  C03B  F005         	movff	___ftadd@sign,___ftpack@sign
 10696  0049F4  ECF2  F01F         	call	___ftpack	;wreg free
 10697  0049F8  C001  F032         	movff	?___ftpack,?___ftadd
 10698  0049FC  C002  F033         	movff	?___ftpack+1,?___ftadd+1
 10699  004A00  C003  F034         	movff	?___ftpack+2,?___ftadd+2
 10700  004A04  0012               	return	
 10701  004A06                     __end_of___ftadd:
 10702                           	opt stack 0
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           postinc0	equ	0xFEE
 10710                           wreg	equ	0xFE8
 10711                           indf1	equ	0xFE7
 10712                           postdec1	equ	0xFE5
 10713                           fsr1h	equ	0xFE2
 10714                           fsr1l	equ	0xFE1
 10715                           indf2	equ	0xFDF
 10716                           postinc2	equ	0xFDE
 10717                           postdec2	equ	0xFDD
 10718                           fsr2h	equ	0xFDA
 10719                           fsr2l	equ	0xFD9
 10720                           status	equ	0xFD8
 10721                           
 10722 ;; *************** function ___ftneg *****************
 10723 ;; Defined at:
 10724 ;;		line 15 in file "/opt/microchip/xc8/v1.37/sources/common/ftneg.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;  f1              3    0[COMRAM] float 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  3    0[COMRAM] float 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10738 ;;      Params:         3       0       0       0       0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10741 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10742 ;;Total ram usage:        3 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_sprintf
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           	psect	text19
 10752  003936                     __ptext19:
 10753                           	opt stack 0
 10754  003936                     ___ftneg:
 10755                           	opt stack 29
 10756                           
 10757                           ;incstack = 0
 10758  003936  5001               	movf	___ftneg@f1,w,c
 10759  003938  1002               	iorwf	___ftneg@f1+1,w,c
 10760  00393A  1003               	iorwf	___ftneg@f1+2,w,c
 10761  00393C  B4D8               	btfsc	status,2,c
 10762  00393E  D006               	goto	l810
 10763  003940  0E00               	movlw	0
 10764  003942  1A01               	xorwf	___ftneg@f1,f,c
 10765  003944  0E00               	movlw	0
 10766  003946  1A02               	xorwf	___ftneg@f1+1,f,c
 10767  003948  0E80               	movlw	128
 10768  00394A  1A03               	xorwf	___ftneg@f1+2,f,c
 10769  00394C                     l810:
 10770  00394C  C001  F001         	movff	___ftneg@f1,?___ftneg
 10771  003950  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10772  003954  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10773  003958  0012               	return		;funcret
 10774  00395A                     __end_of___ftneg:
 10775                           	opt stack 0
 10776                           tblptru	equ	0xFF8
 10777                           tblptrh	equ	0xFF7
 10778                           tblptrl	equ	0xFF6
 10779                           tablat	equ	0xFF5
 10780                           prodh	equ	0xFF4
 10781                           prodl	equ	0xFF3
 10782                           postinc0	equ	0xFEE
 10783                           wreg	equ	0xFE8
 10784                           indf1	equ	0xFE7
 10785                           postdec1	equ	0xFE5
 10786                           fsr1h	equ	0xFE2
 10787                           fsr1l	equ	0xFE1
 10788                           indf2	equ	0xFDF
 10789                           postinc2	equ	0xFDE
 10790                           postdec2	equ	0xFDD
 10791                           fsr2h	equ	0xFDA
 10792                           fsr2l	equ	0xFD9
 10793                           status	equ	0xFD8
 10794                           
 10795 ;; *************** function ___ftge *****************
 10796 ;; Defined at:
 10797 ;;		line 4 in file "/opt/microchip/xc8/v1.37/sources/common/ftge.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;  ff1             3    0[COMRAM] float 
 10800 ;;  ff2             3    3[COMRAM] float 
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;		None
 10803 ;; Return value:  Size  Location     Type
 10804 ;;		None               void
 10805 ;; Registers used:
 10806 ;;		wreg, status,2, status,0
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10812 ;;      Params:         6       0       0       0       0       0       0       0       0
 10813 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10814 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10815 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10816 ;;Total ram usage:        9 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; This function calls:
 10819 ;;		Nothing
 10820 ;; This function is called by:
 10821 ;;		_main
 10822 ;;		_sprintf
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           	psect	text20
 10827  003F54                     __ptext20:
 10828                           	opt stack 0
 10829  003F54                     ___ftge:
 10830                           	opt stack 29
 10831                           
 10832                           ;incstack = 0
 10833  003F54  AE03               	btfss	___ftge@ff1+2,7,c
 10834  003F56  D016               	goto	l3941
 10835  003F58  C001  F007         	movff	___ftge@ff1,??___ftge
 10836  003F5C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10837  003F60  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10838  003F64  1E07               	comf	??___ftge,f,c
 10839  003F66  1E08               	comf	??___ftge+1,f,c
 10840  003F68  1E09               	comf	??___ftge+2,f,c
 10841  003F6A  2A07               	incf	??___ftge,f,c
 10842  003F6C  0E00               	movlw	0
 10843  003F6E  2208               	addwfc	??___ftge+1,f,c
 10844  003F70  2209               	addwfc	??___ftge+2,f,c
 10845  003F72  0E00               	movlw	0
 10846  003F74  2407               	addwf	??___ftge,w,c
 10847  003F76  6E01               	movwf	___ftge@ff1,c
 10848  003F78  0E00               	movlw	0
 10849  003F7A  2008               	addwfc	??___ftge+1,w,c
 10850  003F7C  6E02               	movwf	___ftge@ff1+1,c
 10851  003F7E  0E80               	movlw	128
 10852  003F80  2009               	addwfc	??___ftge+2,w,c
 10853  003F82  6E03               	movwf	___ftge@ff1+2,c
 10854  003F84                     l3941:
 10855  003F84  AE06               	btfss	___ftge@ff2+2,7,c
 10856  003F86  D016               	goto	l3945
 10857  003F88  C004  F007         	movff	___ftge@ff2,??___ftge
 10858  003F8C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10859  003F90  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10860  003F94  1E07               	comf	??___ftge,f,c
 10861  003F96  1E08               	comf	??___ftge+1,f,c
 10862  003F98  1E09               	comf	??___ftge+2,f,c
 10863  003F9A  2A07               	incf	??___ftge,f,c
 10864  003F9C  0E00               	movlw	0
 10865  003F9E  2208               	addwfc	??___ftge+1,f,c
 10866  003FA0  2209               	addwfc	??___ftge+2,f,c
 10867  003FA2  0E00               	movlw	0
 10868  003FA4  2407               	addwf	??___ftge,w,c
 10869  003FA6  6E04               	movwf	___ftge@ff2,c
 10870  003FA8  0E00               	movlw	0
 10871  003FAA  2008               	addwfc	??___ftge+1,w,c
 10872  003FAC  6E05               	movwf	___ftge@ff2+1,c
 10873  003FAE  0E80               	movlw	128
 10874  003FB0  2009               	addwfc	??___ftge+2,w,c
 10875  003FB2  6E06               	movwf	___ftge@ff2+2,c
 10876  003FB4                     l3945:
 10877  003FB4  0E00               	movlw	0
 10878  003FB6  1A01               	xorwf	___ftge@ff1,f,c
 10879  003FB8  0E00               	movlw	0
 10880  003FBA  1A02               	xorwf	___ftge@ff1+1,f,c
 10881  003FBC  0E80               	movlw	128
 10882  003FBE  1A03               	xorwf	___ftge@ff1+2,f,c
 10883  003FC0  0E00               	movlw	0
 10884  003FC2  1A04               	xorwf	___ftge@ff2,f,c
 10885  003FC4  0E00               	movlw	0
 10886  003FC6  1A05               	xorwf	___ftge@ff2+1,f,c
 10887  003FC8  0E80               	movlw	128
 10888  003FCA  1A06               	xorwf	___ftge@ff2+2,f,c
 10889  003FCC  5004               	movf	___ftge@ff2,w,c
 10890  003FCE  5C01               	subwf	___ftge@ff1,w,c
 10891  003FD0  5005               	movf	___ftge@ff2+1,w,c
 10892  003FD2  5802               	subwfb	___ftge@ff1+1,w,c
 10893  003FD4  5006               	movf	___ftge@ff2+2,w,c
 10894  003FD6  5803               	subwfb	___ftge@ff1+2,w,c
 10895  003FD8  B0D8               	btfsc	status,0,c
 10896  003FDA  D002               	goto	l3951
 10897  003FDC  90D8               	bcf	status,0,c
 10898  003FDE  0012               	return	
 10899  003FE0                     l3951:
 10900  003FE0  80D8               	bsf	status,0,c
 10901  003FE2  0012               	return	
 10902  003FE4                     __end_of___ftge:
 10903                           	opt stack 0
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           postinc0	equ	0xFEE
 10911                           wreg	equ	0xFE8
 10912                           indf1	equ	0xFE7
 10913                           postdec1	equ	0xFE5
 10914                           fsr1h	equ	0xFE2
 10915                           fsr1l	equ	0xFE1
 10916                           indf2	equ	0xFDF
 10917                           postinc2	equ	0xFDE
 10918                           postdec2	equ	0xFDD
 10919                           fsr2h	equ	0xFDA
 10920                           fsr2l	equ	0xFD9
 10921                           status	equ	0xFD8
 10922                           
 10923 ;; *************** function _abs *****************
 10924 ;; Defined at:
 10925 ;;		line 36 in file "src/main.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;  a               2    0[COMRAM] int 
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;		None
 10930 ;; Return value:  Size  Location     Type
 10931 ;;                  2    0[COMRAM] int 
 10932 ;; Registers used:
 10933 ;;		wreg, status,2, status,0
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10939 ;;      Params:         2       0       0       0       0       0       0       0       0
 10940 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10941 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10942 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10943 ;;Total ram usage:        4 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_main
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text21
 10953  003980                     __ptext21:
 10954                           	opt stack 0
 10955  003980                     _abs:
 10956                           	opt stack 30
 10957                           
 10958                           ;main.c: 38: return a >= 0 ? a : -a;
 10959                           
 10960                           ;incstack = 0
 10961  003980  AE02               	btfss	abs@a+1,7,c
 10962  003982  D00D               	goto	l54
 10963  003984  C001  F003         	movff	abs@a,??_abs
 10964  003988  C002  F004         	movff	abs@a+1,??_abs+1
 10965  00398C  1E03               	comf	??_abs,f,c
 10966  00398E  1E04               	comf	??_abs+1,f,c
 10967  003990  4A03               	infsnz	??_abs,f,c
 10968  003992  2A04               	incf	??_abs+1,f,c
 10969  003994  C003  F001         	movff	??_abs,?_abs
 10970  003998  C004  F002         	movff	??_abs+1,?_abs+1
 10971  00399C  0012               	return	
 10972  00399E                     l54:
 10973  00399E  C001  F001         	movff	abs@a,?_abs
 10974  0039A2  C002  F002         	movff	abs@a+1,?_abs+1
 10975  0039A6  0012               	return	
 10976  0039A8                     __end_of_abs:
 10977                           	opt stack 0
 10978                           tblptru	equ	0xFF8
 10979                           tblptrh	equ	0xFF7
 10980                           tblptrl	equ	0xFF6
 10981                           tablat	equ	0xFF5
 10982                           prodh	equ	0xFF4
 10983                           prodl	equ	0xFF3
 10984                           postinc0	equ	0xFEE
 10985                           wreg	equ	0xFE8
 10986                           indf1	equ	0xFE7
 10987                           postdec1	equ	0xFE5
 10988                           fsr1h	equ	0xFE2
 10989                           fsr1l	equ	0xFE1
 10990                           indf2	equ	0xFDF
 10991                           postinc2	equ	0xFDE
 10992                           postdec2	equ	0xFDD
 10993                           fsr2h	equ	0xFDA
 10994                           fsr2l	equ	0xFD9
 10995                           status	equ	0xFD8
 10996                           
 10997 ;; *************** function ___lwtoft *****************
 10998 ;; Defined at:
 10999 ;;		line 28 in file "/opt/microchip/xc8/v1.37/sources/common/lwtoft.c"
 11000 ;; Parameters:    Size  Location     Type
 11001 ;;  c               2    8[COMRAM] unsigned int 
 11002 ;; Auto vars:     Size  Location     Type
 11003 ;;		None
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  3    8[COMRAM] float 
 11006 ;; Registers used:
 11007 ;;		wreg, status,2, status,0, cstack
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11013 ;;      Params:         3       0       0       0       0       0       0       0       0
 11014 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11016 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11017 ;;Total ram usage:        3 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    1
 11020 ;; This function calls:
 11021 ;;		___ftpack
 11022 ;; This function is called by:
 11023 ;;		_main
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text22
 11028  003912                     __ptext22:
 11029                           	opt stack 0
 11030  003912                     ___lwtoft:
 11031                           	opt stack 29
 11032                           
 11033                           ;incstack = 0
 11034  003912  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 11035  003916  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 11036  00391A  6A03               	clrf	___ftpack@arg+2,c
 11037  00391C  0E8E               	movlw	142
 11038  00391E  6E04               	movwf	___ftpack@exp,c
 11039  003920  0E00               	movlw	0
 11040  003922  6E05               	movwf	___ftpack@sign,c
 11041  003924  ECF2  F01F         	call	___ftpack	;wreg free
 11042  003928  C001  F009         	movff	?___ftpack,?___lwtoft
 11043  00392C  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 11044  003930  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 11045  003934  0012               	return	
 11046  003936                     __end_of___lwtoft:
 11047                           	opt stack 0
 11048                           tblptru	equ	0xFF8
 11049                           tblptrh	equ	0xFF7
 11050                           tblptrl	equ	0xFF6
 11051                           tablat	equ	0xFF5
 11052                           prodh	equ	0xFF4
 11053                           prodl	equ	0xFF3
 11054                           postinc0	equ	0xFEE
 11055                           wreg	equ	0xFE8
 11056                           indf1	equ	0xFE7
 11057                           postdec1	equ	0xFE5
 11058                           fsr1h	equ	0xFE2
 11059                           fsr1l	equ	0xFE1
 11060                           indf2	equ	0xFDF
 11061                           postinc2	equ	0xFDE
 11062                           postdec2	equ	0xFDD
 11063                           fsr2h	equ	0xFDA
 11064                           fsr2l	equ	0xFD9
 11065                           status	equ	0xFD8
 11066                           
 11067 ;; *************** function ___ftdiv *****************
 11068 ;; Defined at:
 11069 ;;		line 54 in file "/opt/microchip/xc8/v1.37/sources/common/ftdiv.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;  f1              3   24[COMRAM] float 
 11072 ;;  f2              3   27[COMRAM] float 
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;  f3              3   34[COMRAM] float 
 11075 ;;  sign            1   38[COMRAM] unsigned char 
 11076 ;;  exp             1   37[COMRAM] unsigned char 
 11077 ;;  cntr            1   33[COMRAM] unsigned char 
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  3   24[COMRAM] float 
 11080 ;; Registers used:
 11081 ;;		wreg, status,2, status,0, cstack
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11087 ;;      Params:         6       0       0       0       0       0       0       0       0
 11088 ;;      Locals:         6       0       0       0       0       0       0       0       0
 11089 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11090 ;;      Totals:        15       0       0       0       0       0       0       0       0
 11091 ;;Total ram usage:       15 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    1
 11094 ;; This function calls:
 11095 ;;		___ftpack
 11096 ;; This function is called by:
 11097 ;;		_main
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text23
 11102  004092                     __ptext23:
 11103                           	opt stack 0
 11104  004092                     ___ftdiv:
 11105                           	opt stack 29
 11106                           
 11107                           ;incstack = 0
 11108  004092  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
 11109  004096  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 11110  004098  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 11111  00409A  341A               	rlcf	___ftdiv@f1+1,w,c
 11112  00409C  361F               	rlcf	??___ftdiv& (0+255),f,c
 11113  00409E  E301               	bnc	u5221
 11114  0040A0  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 11115  0040A2                     u5221:
 11116  0040A2  501F               	movf	??___ftdiv,w,c
 11117  0040A4  6E26               	movwf	___ftdiv@exp,c
 11118  0040A6  5026               	movf	___ftdiv@exp,w,c
 11119  0040A8  A4D8               	btfss	status,2,c
 11120  0040AA  D007               	goto	l4637
 11121  0040AC  0E00               	movlw	0
 11122  0040AE  6E19               	movwf	?___ftdiv,c
 11123  0040B0  0E00               	movlw	0
 11124  0040B2  6E1A               	movwf	?___ftdiv+1,c
 11125  0040B4  0E00               	movlw	0
 11126  0040B6  6E1B               	movwf	?___ftdiv+2,c
 11127  0040B8  0012               	return	
 11128  0040BA                     l4637:
 11129  0040BA  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
 11130  0040BE  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 11131  0040C0  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 11132  0040C2  341D               	rlcf	___ftdiv@f2+1,w,c
 11133  0040C4  361F               	rlcf	??___ftdiv& (0+255),f,c
 11134  0040C6  E301               	bnc	u5241
 11135  0040C8  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 11136  0040CA                     u5241:
 11137  0040CA  501F               	movf	??___ftdiv,w,c
 11138  0040CC  6E27               	movwf	___ftdiv@sign,c
 11139  0040CE  5027               	movf	___ftdiv@sign,w,c
 11140  0040D0  A4D8               	btfss	status,2,c
 11141  0040D2  D007               	goto	l4643
 11142  0040D4  0E00               	movlw	0
 11143  0040D6  6E19               	movwf	?___ftdiv,c
 11144  0040D8  0E00               	movlw	0
 11145  0040DA  6E1A               	movwf	?___ftdiv+1,c
 11146  0040DC  0E00               	movlw	0
 11147  0040DE  6E1B               	movwf	?___ftdiv+2,c
 11148  0040E0  0012               	return	
 11149  0040E2                     l4643:
 11150  0040E2  0E00               	movlw	0
 11151  0040E4  6E23               	movwf	___ftdiv@f3,c
 11152  0040E6  0E00               	movlw	0
 11153  0040E8  6E24               	movwf	___ftdiv@f3+1,c
 11154  0040EA  0E00               	movlw	0
 11155  0040EC  6E25               	movwf	___ftdiv@f3+2,c
 11156  0040EE  5027               	movf	___ftdiv@sign,w,c
 11157  0040F0  0F89               	addlw	137
 11158  0040F2  5E26               	subwf	___ftdiv@exp,f,c
 11159  0040F4  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
 11160  0040F8  501E               	movf	___ftdiv@f2+2,w,c
 11161  0040FA  1A27               	xorwf	___ftdiv@sign,f,c
 11162  0040FC  0E80               	movlw	128
 11163  0040FE  1627               	andwf	___ftdiv@sign,f,c
 11164  004100  8E1A               	bsf	___ftdiv@f1+1,7,c
 11165  004102  0EFF               	movlw	255
 11166  004104  1619               	andwf	___ftdiv@f1,f,c
 11167  004106  0EFF               	movlw	255
 11168  004108  161A               	andwf	___ftdiv@f1+1,f,c
 11169  00410A  0E00               	movlw	0
 11170  00410C  161B               	andwf	___ftdiv@f1+2,f,c
 11171  00410E  8E1D               	bsf	___ftdiv@f2+1,7,c
 11172  004110  0EFF               	movlw	255
 11173  004112  161C               	andwf	___ftdiv@f2,f,c
 11174  004114  0EFF               	movlw	255
 11175  004116  161D               	andwf	___ftdiv@f2+1,f,c
 11176  004118  0E00               	movlw	0
 11177  00411A  161E               	andwf	___ftdiv@f2+2,f,c
 11178  00411C  0E18               	movlw	24
 11179  00411E  6E22               	movwf	___ftdiv@cntr,c
 11180  004120                     l4663:
 11181  004120  90D8               	bcf	status,0,c
 11182  004122  3623               	rlcf	___ftdiv@f3,f,c
 11183  004124  3624               	rlcf	___ftdiv@f3+1,f,c
 11184  004126  3625               	rlcf	___ftdiv@f3+2,f,c
 11185  004128  501C               	movf	___ftdiv@f2,w,c
 11186  00412A  5C19               	subwf	___ftdiv@f1,w,c
 11187  00412C  501D               	movf	___ftdiv@f2+1,w,c
 11188  00412E  581A               	subwfb	___ftdiv@f1+1,w,c
 11189  004130  501E               	movf	___ftdiv@f2+2,w,c
 11190  004132  581B               	subwfb	___ftdiv@f1+2,w,c
 11191  004134  A0D8               	btfss	status,0,c
 11192  004136  D007               	goto	l771
 11193  004138  501C               	movf	___ftdiv@f2,w,c
 11194  00413A  5E19               	subwf	___ftdiv@f1,f,c
 11195  00413C  501D               	movf	___ftdiv@f2+1,w,c
 11196  00413E  5A1A               	subwfb	___ftdiv@f1+1,f,c
 11197  004140  501E               	movf	___ftdiv@f2+2,w,c
 11198  004142  5A1B               	subwfb	___ftdiv@f1+2,f,c
 11199  004144  8023               	bsf	___ftdiv@f3,0,c
 11200  004146                     l771:
 11201  004146  90D8               	bcf	status,0,c
 11202  004148  3619               	rlcf	___ftdiv@f1,f,c
 11203  00414A  361A               	rlcf	___ftdiv@f1+1,f,c
 11204  00414C  361B               	rlcf	___ftdiv@f1+2,f,c
 11205  00414E  2E22               	decfsz	___ftdiv@cntr,f,c
 11206  004150  D7E7               	goto	l4663
 11207  004152  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
 11208  004156  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11209  00415A  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11210  00415E  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
 11211  004162  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
 11212  004166  ECF2  F01F         	call	___ftpack	;wreg free
 11213  00416A  C001  F019         	movff	?___ftpack,?___ftdiv
 11214  00416E  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
 11215  004172  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
 11216  004176  0012               	return	
 11217  004178                     __end_of___ftdiv:
 11218                           	opt stack 0
 11219                           tblptru	equ	0xFF8
 11220                           tblptrh	equ	0xFF7
 11221                           tblptrl	equ	0xFF6
 11222                           tablat	equ	0xFF5
 11223                           prodh	equ	0xFF4
 11224                           prodl	equ	0xFF3
 11225                           postinc0	equ	0xFEE
 11226                           wreg	equ	0xFE8
 11227                           indf1	equ	0xFE7
 11228                           postdec1	equ	0xFE5
 11229                           fsr1h	equ	0xFE2
 11230                           fsr1l	equ	0xFE1
 11231                           indf2	equ	0xFDF
 11232                           postinc2	equ	0xFDE
 11233                           postdec2	equ	0xFDD
 11234                           fsr2h	equ	0xFDA
 11235                           fsr2l	equ	0xFD9
 11236                           status	equ	0xFD8
 11237                           
 11238 ;; *************** function ___awtoft *****************
 11239 ;; Defined at:
 11240 ;;		line 32 in file "/opt/microchip/xc8/v1.37/sources/common/awtoft.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;  c               2   20[COMRAM] int 
 11243 ;; Auto vars:     Size  Location     Type
 11244 ;;  sign            1   23[COMRAM] unsigned char 
 11245 ;; Return value:  Size  Location     Type
 11246 ;;                  3   20[COMRAM] float 
 11247 ;; Registers used:
 11248 ;;		wreg, status,2, status,0, cstack
 11249 ;; Tracked objects:
 11250 ;;		On entry : 0/0
 11251 ;;		On exit  : 0/0
 11252 ;;		Unchanged: 0/0
 11253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11254 ;;      Params:         3       0       0       0       0       0       0       0       0
 11255 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11256 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11257 ;;      Totals:         4       0       0       0       0       0       0       0       0
 11258 ;;Total ram usage:        4 bytes
 11259 ;; Hardware stack levels used:    1
 11260 ;; Hardware stack levels required when called:    1
 11261 ;; This function calls:
 11262 ;;		___ftpack
 11263 ;; This function is called by:
 11264 ;;		_main
 11265 ;; This function uses a non-reentrant model
 11266 ;;
 11267                           
 11268                           	psect	text24
 11269  0039D4                     __ptext24:
 11270                           	opt stack 0
 11271  0039D4                     ___awtoft:
 11272                           	opt stack 29
 11273                           
 11274                           ;incstack = 0
 11275  0039D4  0E00               	movlw	0
 11276  0039D6  6E18               	movwf	___awtoft@sign,c
 11277  0039D8  AE16               	btfss	___awtoft@c+1,7,c
 11278  0039DA  D006               	goto	l4685
 11279  0039DC  6C15               	negf	___awtoft@c,c
 11280  0039DE  1E16               	comf	___awtoft@c+1,f,c
 11281  0039E0  B0D8               	btfsc	status,0,c
 11282  0039E2  2A16               	incf	___awtoft@c+1,f,c
 11283  0039E4  0E01               	movlw	1
 11284  0039E6  6E18               	movwf	___awtoft@sign,c
 11285  0039E8                     l4685:
 11286  0039E8  C015  F001         	movff	___awtoft@c,___ftpack@arg
 11287  0039EC  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 11288  0039F0  6A03               	clrf	___ftpack@arg+2,c
 11289  0039F2  0E8E               	movlw	142
 11290  0039F4  6E04               	movwf	___ftpack@exp,c
 11291  0039F6  C018  F005         	movff	___awtoft@sign,___ftpack@sign
 11292  0039FA  ECF2  F01F         	call	___ftpack	;wreg free
 11293  0039FE  C001  F015         	movff	?___ftpack,?___awtoft
 11294  003A02  C002  F016         	movff	?___ftpack+1,?___awtoft+1
 11295  003A06  C003  F017         	movff	?___ftpack+2,?___awtoft+2
 11296  003A0A  0012               	return	
 11297  003A0C                     __end_of___awtoft:
 11298                           	opt stack 0
 11299                           tblptru	equ	0xFF8
 11300                           tblptrh	equ	0xFF7
 11301                           tblptrl	equ	0xFF6
 11302                           tablat	equ	0xFF5
 11303                           prodh	equ	0xFF4
 11304                           prodl	equ	0xFF3
 11305                           postinc0	equ	0xFEE
 11306                           wreg	equ	0xFE8
 11307                           indf1	equ	0xFE7
 11308                           postdec1	equ	0xFE5
 11309                           fsr1h	equ	0xFE2
 11310                           fsr1l	equ	0xFE1
 11311                           indf2	equ	0xFDF
 11312                           postinc2	equ	0xFDE
 11313                           postdec2	equ	0xFDD
 11314                           fsr2h	equ	0xFDA
 11315                           fsr2l	equ	0xFD9
 11316                           status	equ	0xFD8
 11317                           
 11318 ;; *************** function ___ftpack *****************
 11319 ;; Defined at:
 11320 ;;		line 62 in file "/opt/microchip/xc8/v1.37/sources/common/float.c"
 11321 ;; Parameters:    Size  Location     Type
 11322 ;;  arg             3    0[COMRAM] unsigned um
 11323 ;;  exp             1    3[COMRAM] unsigned char 
 11324 ;;  sign            1    4[COMRAM] unsigned char 
 11325 ;; Auto vars:     Size  Location     Type
 11326 ;;		None
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  3    0[COMRAM] float 
 11329 ;; Registers used:
 11330 ;;		wreg, status,2, status,0
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11336 ;;      Params:         5       0       0       0       0       0       0       0       0
 11337 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11338 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11339 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11340 ;;Total ram usage:        8 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; This function calls:
 11343 ;;		Nothing
 11344 ;; This function is called by:
 11345 ;;		___awtoft
 11346 ;;		___ftadd
 11347 ;;		___ftdiv
 11348 ;;		___ftmul
 11349 ;;		___lltoft
 11350 ;;		___lwtoft
 11351 ;; This function uses a non-reentrant model
 11352 ;;
 11353                           
 11354                           	psect	text25
 11355  003FE4                     __ptext25:
 11356                           	opt stack 0
 11357  003FE4                     ___ftpack:
 11358                           	opt stack 27
 11359                           
 11360                           ;incstack = 0
 11361  003FE4  5004               	movf	___ftpack@exp,w,c
 11362  003FE6  B4D8               	btfsc	status,2,c
 11363  003FE8  D005               	goto	l3273
 11364  003FEA  5001               	movf	___ftpack@arg,w,c
 11365  003FEC  1002               	iorwf	___ftpack@arg+1,w,c
 11366  003FEE  1003               	iorwf	___ftpack@arg+2,w,c
 11367  003FF0  A4D8               	btfss	status,2,c
 11368  003FF2  D00C               	goto	l3279
 11369  003FF4                     l3273:
 11370  003FF4  0E00               	movlw	0
 11371  003FF6  6E01               	movwf	?___ftpack,c
 11372  003FF8  0E00               	movlw	0
 11373  003FFA  6E02               	movwf	?___ftpack+1,c
 11374  003FFC  0E00               	movlw	0
 11375  003FFE  6E03               	movwf	?___ftpack+2,c
 11376  004000  0012               	return	
 11377  004002                     l3277:
 11378  004002  2A04               	incf	___ftpack@exp,f,c
 11379  004004  90D8               	bcf	status,0,c
 11380  004006  3203               	rrcf	___ftpack@arg+2,f,c
 11381  004008  3202               	rrcf	___ftpack@arg+1,f,c
 11382  00400A  3201               	rrcf	___ftpack@arg,f,c
 11383  00400C                     l3279:
 11384  00400C  0E00               	movlw	0
 11385  00400E  1401               	andwf	___ftpack@arg,w,c
 11386  004010  6E06               	movwf	??___ftpack& (0+255),c
 11387  004012  0E00               	movlw	0
 11388  004014  1402               	andwf	___ftpack@arg+1,w,c
 11389  004016  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11390  004018  0EFE               	movlw	254
 11391  00401A  1403               	andwf	___ftpack@arg+2,w,c
 11392  00401C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11393  00401E  5006               	movf	??___ftpack,w,c
 11394  004020  1007               	iorwf	??___ftpack+1,w,c
 11395  004022  1008               	iorwf	??___ftpack+2,w,c
 11396  004024  B4D8               	btfsc	status,2,c
 11397  004026  D00C               	goto	l3285
 11398  004028  D7EC               	goto	l3277
 11399  00402A                     l3281:
 11400  00402A  2A04               	incf	___ftpack@exp,f,c
 11401  00402C  0E01               	movlw	1
 11402  00402E  2601               	addwf	___ftpack@arg,f,c
 11403  004030  0E00               	movlw	0
 11404  004032  2202               	addwfc	___ftpack@arg+1,f,c
 11405  004034  0E00               	movlw	0
 11406  004036  2203               	addwfc	___ftpack@arg+2,f,c
 11407  004038  90D8               	bcf	status,0,c
 11408  00403A  3203               	rrcf	___ftpack@arg+2,f,c
 11409  00403C  3202               	rrcf	___ftpack@arg+1,f,c
 11410  00403E  3201               	rrcf	___ftpack@arg,f,c
 11411  004040                     l3285:
 11412  004040  0E00               	movlw	0
 11413  004042  1401               	andwf	___ftpack@arg,w,c
 11414  004044  6E06               	movwf	??___ftpack& (0+255),c
 11415  004046  0E00               	movlw	0
 11416  004048  1402               	andwf	___ftpack@arg+1,w,c
 11417  00404A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11418  00404C  0EFF               	movlw	255
 11419  00404E  1403               	andwf	___ftpack@arg+2,w,c
 11420  004050  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11421  004052  5006               	movf	??___ftpack,w,c
 11422  004054  1007               	iorwf	??___ftpack+1,w,c
 11423  004056  1008               	iorwf	??___ftpack+2,w,c
 11424  004058  B4D8               	btfsc	status,2,c
 11425  00405A  D006               	goto	l3289
 11426  00405C  D7E6               	goto	l3281
 11427  00405E                     l3287:
 11428  00405E  0604               	decf	___ftpack@exp,f,c
 11429  004060  90D8               	bcf	status,0,c
 11430  004062  3601               	rlcf	___ftpack@arg,f,c
 11431  004064  3602               	rlcf	___ftpack@arg+1,f,c
 11432  004066  3603               	rlcf	___ftpack@arg+2,f,c
 11433  004068                     l3289:
 11434  004068  BE02               	btfsc	___ftpack@arg+1,7,c
 11435  00406A  D003               	goto	l713
 11436  00406C  0E02               	movlw	2
 11437  00406E  6004               	cpfslt	___ftpack@exp,c
 11438  004070  D7F6               	goto	l3287
 11439  004072                     l713:
 11440  004072  A004               	btfss	___ftpack@exp,0,c
 11441  004074  9E02               	bcf	___ftpack@arg+1,7,c
 11442  004076  90D8               	bcf	status,0,c
 11443  004078  3204               	rrcf	___ftpack@exp,f,c
 11444  00407A  5004               	movf	___ftpack@exp,w,c
 11445  00407C  1203               	iorwf	___ftpack@arg+2,f,c
 11446  00407E  5005               	movf	___ftpack@sign,w,c
 11447  004080  A4D8               	btfss	status,2,c
 11448  004082  8E03               	bsf	___ftpack@arg+2,7,c
 11449  004084  C001  F001         	movff	___ftpack@arg,?___ftpack
 11450  004088  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11451  00408C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11452  004090  0012               	return	
 11453  004092                     __end_of___ftpack:
 11454                           	opt stack 0
 11455                           tblptru	equ	0xFF8
 11456                           tblptrh	equ	0xFF7
 11457                           tblptrl	equ	0xFF6
 11458                           tablat	equ	0xFF5
 11459                           prodh	equ	0xFF4
 11460                           prodl	equ	0xFF3
 11461                           postinc0	equ	0xFEE
 11462                           wreg	equ	0xFE8
 11463                           indf1	equ	0xFE7
 11464                           postdec1	equ	0xFE5
 11465                           fsr1h	equ	0xFE2
 11466                           fsr1l	equ	0xFE1
 11467                           indf2	equ	0xFDF
 11468                           postinc2	equ	0xFDE
 11469                           postdec2	equ	0xFDD
 11470                           fsr2h	equ	0xFDA
 11471                           fsr2l	equ	0xFD9
 11472                           status	equ	0xFD8
 11473                           
 11474 ;; *************** function _LCDstring *****************
 11475 ;; Defined at:
 11476 ;;		line 636 in file "src/LCDgraphic.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  p               1    wreg     unsigned char 
 11479 ;;  buffer          2   44[COMRAM] PTR const unsigned char 
 11480 ;;		 -> main@buf_360(13), main@bottom_buf(40), main@buf_344(10), main@buf(10), 
 11481 ;; Auto vars:     Size  Location     Type
 11482 ;;  p               1   73[COMRAM] unsigned char 
 11483 ;;  i               2   67[COMRAM] int 
 11484 ;;  i               2   65[COMRAM] int 
 11485 ;;  i               2   71[COMRAM] int 
 11486 ;;  i               2   63[COMRAM] int 
 11487 ;;  i               2   61[COMRAM] int 
 11488 ;;  i               2   59[COMRAM] int 
 11489 ;;  i               2   57[COMRAM] int 
 11490 ;;  i               2   55[COMRAM] int 
 11491 ;;  i               2   53[COMRAM] int 
 11492 ;;  i               2   69[COMRAM] int 
 11493 ;;  i               2   51[COMRAM] int 
 11494 ;;  l1              2   74[COMRAM] int 
 11495 ;;  length          2   76[COMRAM] int 
 11496 ;; Return value:  Size  Location     Type
 11497 ;;                  1    wreg      unsigned char 
 11498 ;; Registers used:
 11499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11505 ;;      Params:         2       0       0       0       0       0       0       0       0
 11506 ;;      Locals:        27       0       0       0       0       0       0       0       0
 11507 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11508 ;;      Totals:        34       0       0       0       0       0       0       0       0
 11509 ;;Total ram usage:       34 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; Hardware stack levels required when called:    5
 11512 ;; This function calls:
 11513 ;;		_LCDchar
 11514 ;;		_LCDpage
 11515 ;;		_LCDy
 11516 ;;		___awdiv
 11517 ;;		__lcd_waitbusy
 11518 ;;		_emptycolumn
 11519 ;;		_strlen
 11520 ;; This function is called by:
 11521 ;;		_main
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           	psect	text26
 11526  005752                     __ptext26:
 11527                           	opt stack 0
 11528  005752                     _LCDstring:
 11529                           	opt stack 25
 11530                           
 11531                           ;incstack = 0
 11532                           ;LCDstring@p stored from wreg
 11533  005752  6E4A               	movwf	LCDstring@p,c
 11534                           
 11535                           ;LCDgraphic.c: 638: if (p < 0 || p > 3 || buffer == 0)
 11536  005754  0E04               	movlw	4
 11537  005756  604A               	cpfslt	LCDstring@p,c
 11538  005758  0012               	return	
 11539  00575A  502D               	movf	LCDstring@buffer,w,c
 11540  00575C  102E               	iorwf	LCDstring@buffer+1,w,c
 11541  00575E  B4D8               	btfsc	status,2,c
 11542  005760  0012               	return	
 11543                           
 11544                           ;LCDgraphic.c: 641: }
 11545                           ;LCDgraphic.c: 643: _lcd_waitbusy();
 11546                           
 11547                           ;LCDgraphic.c: 639: {
 11548                           ;LCDgraphic.c: 640: return -1;
 11549                           ;	Return value of _LCDstring is never used
 11550  005762  EC50  F01C         	call	__lcd_waitbusy	;wreg free
 11551                           
 11552                           ;LCDgraphic.c: 645: int length = strlen(buffer);
 11553  005766  C02D  F001         	movff	LCDstring@buffer,strlen@s
 11554  00576A  C02E  F002         	movff	LCDstring@buffer+1,strlen@s+1
 11555  00576E  EC06  F01D         	call	_strlen	;wreg free
 11556  005772  C001  F04D         	movff	?_strlen,LCDstring@length
 11557  005776  C002  F04E         	movff	?_strlen+1,LCDstring@length+1
 11558                           
 11559                           ;LCDgraphic.c: 648: if(p==0)
 11560  00577A  504A               	movf	LCDstring@p,w,c
 11561  00577C  B4D8               	btfsc	status,2,c
 11562  00577E  D00E               	goto	l4405
 11563  005780  D015               	goto	l4407
 11564  005782                     l4399:
 11565                           
 11566                           ;LCDgraphic.c: 652: {
 11567                           ;LCDgraphic.c: 653: LCDchar(*buffer++,0);
 11568  005782  0E00               	movlw	0
 11569  005784  6E15               	movwf	LCDchar@position,c
 11570  005786  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11571  00578A  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11572  00578E  50DF               	movf	indf2,w,c
 11573  005790  EC6C  F029         	call	_LCDchar
 11574  005794  4A2D               	infsnz	LCDstring@buffer,f,c
 11575  005796  2A2E               	incf	LCDstring@buffer+1,f,c
 11576                           
 11577                           ;LCDgraphic.c: 654: emptycolumn();
 11578  005798  EC9E  F01E         	call	_emptycolumn	;wreg free
 11579  00579C                     l4405:
 11580  00579C  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11581  0057A0  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11582  0057A4  50DF               	movf	indf2,w,c
 11583  0057A6  B4D8               	btfsc	status,2,c
 11584  0057A8  0012               	return	
 11585  0057AA  D7EB               	goto	l4399
 11586  0057AC                     l4407:
 11587                           
 11588                           ;LCDgraphic.c: 657: else if(p == 1)
 11589  0057AC  044A               	decf	LCDstring@p,w,c
 11590  0057AE  A4D8               	btfss	status,2,c
 11591  0057B0  D086               	goto	l4463
 11592                           
 11593                           ;LCDgraphic.c: 658: {
 11594                           ;LCDgraphic.c: 660: LCDpage(0,curr_page);
 11595  0057B2  C05E  F00F         	movff	_curr_page,LCDpage@page
 11596  0057B6  0E00               	movlw	0
 11597  0057B8  EC89  F01D         	call	_LCDpage
 11598                           
 11599                           ;LCDgraphic.c: 661: LCDy(0,1);
 11600  0057BC  0E01               	movlw	1
 11601  0057BE  6E05               	movwf	LCDy@value,c
 11602  0057C0  0E00               	movlw	0
 11603  0057C2  ECDA  F01D         	call	_LCDy
 11604                           
 11605                           ;LCDgraphic.c: 663: if(length < 11)
 11606  0057C6  BE4E               	btfsc	LCDstring@length+1,7,c
 11607  0057C8  D006               	goto	l4413
 11608  0057CA  504E               	movf	LCDstring@length+1,w,c
 11609  0057CC  E123               	bnz	l4425
 11610  0057CE  0E0B               	movlw	11
 11611  0057D0  5C4D               	subwf	LCDstring@length,w,c
 11612  0057D2  B0D8               	btfsc	status,0,c
 11613  0057D4  D01F               	goto	l4425
 11614  0057D6                     l4413:
 11615                           
 11616                           ;LCDgraphic.c: 664: {
 11617                           ;LCDgraphic.c: 666: for(int i=0; i<length; i++)
 11618  0057D6  0E00               	movlw	0
 11619  0057D8  6E35               	movwf	LCDstring@i+1,c
 11620  0057DA  0E00               	movlw	0
 11621  0057DC  6E34               	movwf	LCDstring@i,c
 11622  0057DE  D00F               	goto	l4423
 11623  0057E0                     l4415:
 11624                           
 11625                           ;LCDgraphic.c: 667: {
 11626                           ;LCDgraphic.c: 668: LCDchar(*buffer++,0);
 11627  0057E0  0E00               	movlw	0
 11628  0057E2  6E15               	movwf	LCDchar@position,c
 11629  0057E4  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11630  0057E8  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11631  0057EC  50DF               	movf	indf2,w,c
 11632  0057EE  EC6C  F029         	call	_LCDchar
 11633  0057F2  4A2D               	infsnz	LCDstring@buffer,f,c
 11634  0057F4  2A2E               	incf	LCDstring@buffer+1,f,c
 11635                           
 11636                           ;LCDgraphic.c: 670: emptycolumn();
 11637  0057F6  EC9E  F01E         	call	_emptycolumn	;wreg free
 11638  0057FA  4A34               	infsnz	LCDstring@i,f,c
 11639  0057FC  2A35               	incf	LCDstring@i+1,f,c
 11640  0057FE                     l4423:
 11641  0057FE  504D               	movf	LCDstring@length,w,c
 11642  005800  5C34               	subwf	LCDstring@i,w,c
 11643  005802  5035               	movf	LCDstring@i+1,w,c
 11644  005804  0A80               	xorlw	128
 11645  005806  6E2F               	movwf	??_LCDstring& (0+255),c
 11646  005808  504E               	movf	LCDstring@length+1,w,c
 11647  00580A  0A80               	xorlw	128
 11648  00580C  582F               	subwfb	??_LCDstring& (0+255),w,c
 11649  00580E  B0D8               	btfsc	status,0,c
 11650  005810  0012               	return	
 11651  005812  D7E6               	goto	l4415
 11652  005814                     l4425:
 11653                           
 11654                           ;LCDgraphic.c: 674: else
 11655                           ;LCDgraphic.c: 675: {
 11656                           ;LCDgraphic.c: 677: for(int i=0; i<10; i++)
 11657  005814  0E00               	movlw	0
 11658  005816  6E47               	movwf	LCDstring@i_531+1,c
 11659  005818  0E00               	movlw	0
 11660  00581A  6E46               	movwf	LCDstring@i_531,c
 11661  00581C                     l4427:
 11662  00581C  BE47               	btfsc	LCDstring@i_531+1,7,c
 11663  00581E  D006               	goto	l4431
 11664  005820  5047               	movf	LCDstring@i_531+1,w,c
 11665  005822  E114               	bnz	l4441
 11666  005824  0E0A               	movlw	10
 11667  005826  5C46               	subwf	LCDstring@i_531,w,c
 11668  005828  B0D8               	btfsc	status,0,c
 11669  00582A  D010               	goto	l4441
 11670  00582C                     l4431:
 11671                           
 11672                           ;LCDgraphic.c: 678: {
 11673                           ;LCDgraphic.c: 679: LCDchar(*buffer++,0);
 11674  00582C  0E00               	movlw	0
 11675  00582E  6E15               	movwf	LCDchar@position,c
 11676  005830  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11677  005834  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11678  005838  50DF               	movf	indf2,w,c
 11679  00583A  EC6C  F029         	call	_LCDchar
 11680  00583E  4A2D               	infsnz	LCDstring@buffer,f,c
 11681  005840  2A2E               	incf	LCDstring@buffer+1,f,c
 11682                           
 11683                           ;LCDgraphic.c: 680: emptycolumn();
 11684  005842  EC9E  F01E         	call	_emptycolumn	;wreg free
 11685  005846  4A46               	infsnz	LCDstring@i_531,f,c
 11686  005848  2A47               	incf	LCDstring@i_531+1,f,c
 11687  00584A  D7E8               	goto	l4427
 11688  00584C                     l4441:
 11689                           
 11690                           ;LCDgraphic.c: 681: }
 11691                           ;LCDgraphic.c: 683: LCDpage(0,curr_page);
 11692  00584C  C05E  F00F         	movff	_curr_page,LCDpage@page
 11693  005850  0E00               	movlw	0
 11694  005852  EC89  F01D         	call	_LCDpage
 11695                           
 11696                           ;LCDgraphic.c: 684: LCDchar(*buffer++,2);
 11697  005856  0E02               	movlw	2
 11698  005858  6E15               	movwf	LCDchar@position,c
 11699  00585A  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11700  00585E  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11701  005862  50DF               	movf	indf2,w,c
 11702  005864  EC6C  F029         	call	_LCDchar
 11703  005868  4A2D               	infsnz	LCDstring@buffer,f,c
 11704  00586A  2A2E               	incf	LCDstring@buffer+1,f,c
 11705                           
 11706                           ;LCDgraphic.c: 687: LCDpage(1,curr_page);
 11707  00586C  C05E  F00F         	movff	_curr_page,LCDpage@page
 11708  005870  0E01               	movlw	1
 11709  005872  EC89  F01D         	call	_LCDpage
 11710                           
 11711                           ;LCDgraphic.c: 688: LCDy(1,3);
 11712  005876  0E03               	movlw	3
 11713  005878  6E05               	movwf	LCDy@value,c
 11714  00587A  0E01               	movlw	1
 11715  00587C  ECDA  F01D         	call	_LCDy
 11716                           
 11717                           ;LCDgraphic.c: 689: for(int i=11;i<length;i++)
 11718  005880  0E00               	movlw	0
 11719  005882  6E37               	movwf	LCDstring@i_532+1,c
 11720  005884  0E0B               	movlw	11
 11721  005886  6E36               	movwf	LCDstring@i_532,c
 11722  005888  D00F               	goto	l4461
 11723  00588A                     l4453:
 11724                           
 11725                           ;LCDgraphic.c: 690: {
 11726                           ;LCDgraphic.c: 691: LCDchar(*buffer,0);
 11727  00588A  0E00               	movlw	0
 11728  00588C  6E15               	movwf	LCDchar@position,c
 11729  00588E  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11730  005892  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11731  005896  50DF               	movf	indf2,w,c
 11732  005898  EC6C  F029         	call	_LCDchar
 11733                           
 11734                           ;LCDgraphic.c: 692: emptycolumn();
 11735  00589C  EC9E  F01E         	call	_emptycolumn	;wreg free
 11736                           
 11737                           ;LCDgraphic.c: 693: buffer++;
 11738  0058A0  4A2D               	infsnz	LCDstring@buffer,f,c
 11739  0058A2  2A2E               	incf	LCDstring@buffer+1,f,c
 11740  0058A4  4A36               	infsnz	LCDstring@i_532,f,c
 11741  0058A6  2A37               	incf	LCDstring@i_532+1,f,c
 11742  0058A8                     l4461:
 11743  0058A8  504D               	movf	LCDstring@length,w,c
 11744  0058AA  5C36               	subwf	LCDstring@i_532,w,c
 11745  0058AC  5037               	movf	LCDstring@i_532+1,w,c
 11746  0058AE  0A80               	xorlw	128
 11747  0058B0  6E2F               	movwf	??_LCDstring& (0+255),c
 11748  0058B2  504E               	movf	LCDstring@length+1,w,c
 11749  0058B4  0A80               	xorlw	128
 11750  0058B6  582F               	subwfb	??_LCDstring& (0+255),w,c
 11751  0058B8  B0D8               	btfsc	status,0,c
 11752  0058BA  0012               	return	
 11753  0058BC  D7E6               	goto	l4453
 11754  0058BE                     l4463:
 11755                           
 11756                           ;LCDgraphic.c: 698: else if(p==2)
 11757  0058BE  0E02               	movlw	2
 11758  0058C0  184A               	xorwf	LCDstring@p,w,c
 11759  0058C2  A4D8               	btfss	status,2,c
 11760  0058C4  D0CC               	goto	l4537
 11761                           
 11762                           ;LCDgraphic.c: 699: {
 11763                           ;LCDgraphic.c: 700: int l1=length/2;
 11764  0058C6  C04D  F007         	movff	LCDstring@length,___awdiv@dividend
 11765  0058CA  C04E  F008         	movff	LCDstring@length+1,___awdiv@dividend+1
 11766  0058CE  0E00               	movlw	0
 11767  0058D0  6E0A               	movwf	___awdiv@divisor+1,c
 11768  0058D2  0E02               	movlw	2
 11769  0058D4  6E09               	movwf	___awdiv@divisor,c
 11770  0058D6  EC20  F01F         	call	___awdiv	;wreg free
 11771  0058DA  C007  F04B         	movff	?___awdiv,LCDstring@l1
 11772  0058DE  C008  F04C         	movff	?___awdiv+1,LCDstring@l1+1
 11773                           
 11774                           ;LCDgraphic.c: 702: if(length % 2 == 0)
 11775  0058E2  B04D               	btfsc	LCDstring@length,0,c
 11776  0058E4  D055               	goto	l4499
 11777                           
 11778                           ;LCDgraphic.c: 703: {
 11779                           ;LCDgraphic.c: 705: LCDpage(0,curr_page);
 11780  0058E6  C05E  F00F         	movff	_curr_page,LCDpage@page
 11781  0058EA  0E00               	movlw	0
 11782  0058EC  EC89  F01D         	call	_LCDpage
 11783                           
 11784                           ;LCDgraphic.c: 706: LCDy(0,63-(6*l1));
 11785  0058F0  504B               	movf	LCDstring@l1,w,c
 11786  0058F2  0D06               	mullw	6
 11787  0058F4  50F3               	movf	prodl,w,c
 11788  0058F6  0800               	sublw	0
 11789  0058F8  0F3F               	addlw	63
 11790  0058FA  6E05               	movwf	LCDy@value,c
 11791  0058FC  0E00               	movlw	0
 11792  0058FE  ECDA  F01D         	call	_LCDy
 11793                           
 11794                           ;LCDgraphic.c: 708: for(int i=0; i<l1; i++)
 11795  005902  0E00               	movlw	0
 11796  005904  6E39               	movwf	LCDstring@i_534+1,c
 11797  005906  0E00               	movlw	0
 11798  005908  6E38               	movwf	LCDstring@i_534,c
 11799  00590A  D00F               	goto	l4483
 11800  00590C                     l4475:
 11801                           
 11802                           ;LCDgraphic.c: 709: {
 11803                           ;LCDgraphic.c: 711: LCDchar(*buffer++,0);
 11804  00590C  0E00               	movlw	0
 11805  00590E  6E15               	movwf	LCDchar@position,c
 11806  005910  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11807  005914  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11808  005918  50DF               	movf	indf2,w,c
 11809  00591A  EC6C  F029         	call	_LCDchar
 11810  00591E  4A2D               	infsnz	LCDstring@buffer,f,c
 11811  005920  2A2E               	incf	LCDstring@buffer+1,f,c
 11812                           
 11813                           ;LCDgraphic.c: 712: emptycolumn();
 11814  005922  EC9E  F01E         	call	_emptycolumn	;wreg free
 11815  005926  4A38               	infsnz	LCDstring@i_534,f,c
 11816  005928  2A39               	incf	LCDstring@i_534+1,f,c
 11817  00592A                     l4483:
 11818  00592A  504B               	movf	LCDstring@l1,w,c
 11819  00592C  5C38               	subwf	LCDstring@i_534,w,c
 11820  00592E  5039               	movf	LCDstring@i_534+1,w,c
 11821  005930  0A80               	xorlw	128
 11822  005932  6E2F               	movwf	??_LCDstring& (0+255),c
 11823  005934  504C               	movf	LCDstring@l1+1,w,c
 11824  005936  0A80               	xorlw	128
 11825  005938  582F               	subwfb	??_LCDstring& (0+255),w,c
 11826  00593A  A0D8               	btfss	status,0,c
 11827  00593C  D7E7               	goto	l4475
 11828                           
 11829                           ;LCDgraphic.c: 713: }
 11830                           ;LCDgraphic.c: 715: LCDpage(1,curr_page);
 11831  00593E  C05E  F00F         	movff	_curr_page,LCDpage@page
 11832  005942  0E01               	movlw	1
 11833  005944  EC89  F01D         	call	_LCDpage
 11834                           
 11835                           ;LCDgraphic.c: 716: LCDy(1,0);
 11836  005948  0E00               	movlw	0
 11837  00594A  6E05               	movwf	LCDy@value,c
 11838  00594C  0E01               	movlw	1
 11839  00594E  ECDA  F01D         	call	_LCDy
 11840                           
 11841                           ;LCDgraphic.c: 717: for(int i=l1; i < length; i++)
 11842  005952  C04B  F03A         	movff	LCDstring@l1,LCDstring@i_535
 11843  005956  C04C  F03B         	movff	LCDstring@l1+1,LCDstring@i_535+1
 11844  00595A  D00F               	goto	l4497
 11845  00595C                     l4489:
 11846                           
 11847                           ;LCDgraphic.c: 718: {
 11848                           ;LCDgraphic.c: 720: LCDchar(*buffer++,0);
 11849  00595C  0E00               	movlw	0
 11850  00595E  6E15               	movwf	LCDchar@position,c
 11851  005960  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11852  005964  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11853  005968  50DF               	movf	indf2,w,c
 11854  00596A  EC6C  F029         	call	_LCDchar
 11855  00596E  4A2D               	infsnz	LCDstring@buffer,f,c
 11856  005970  2A2E               	incf	LCDstring@buffer+1,f,c
 11857                           
 11858                           ;LCDgraphic.c: 721: emptycolumn();
 11859  005972  EC9E  F01E         	call	_emptycolumn	;wreg free
 11860  005976  4A3A               	infsnz	LCDstring@i_535,f,c
 11861  005978  2A3B               	incf	LCDstring@i_535+1,f,c
 11862  00597A                     l4497:
 11863  00597A  504D               	movf	LCDstring@length,w,c
 11864  00597C  5C3A               	subwf	LCDstring@i_535,w,c
 11865  00597E  503B               	movf	LCDstring@i_535+1,w,c
 11866  005980  0A80               	xorlw	128
 11867  005982  6E2F               	movwf	??_LCDstring& (0+255),c
 11868  005984  504E               	movf	LCDstring@length+1,w,c
 11869  005986  0A80               	xorlw	128
 11870  005988  582F               	subwfb	??_LCDstring& (0+255),w,c
 11871  00598A  B0D8               	btfsc	status,0,c
 11872  00598C  0012               	return	
 11873  00598E  D7E6               	goto	l4489
 11874  005990                     l4499:
 11875                           
 11876                           ;LCDgraphic.c: 725: else
 11877                           ;LCDgraphic.c: 726: {
 11878                           ;LCDgraphic.c: 728: LCDpage(0,curr_page);
 11879  005990  C05E  F00F         	movff	_curr_page,LCDpage@page
 11880  005994  0E00               	movlw	0
 11881  005996  EC89  F01D         	call	_LCDpage
 11882                           
 11883                           ;LCDgraphic.c: 729: LCDy(0,61-(6*l1));
 11884  00599A  504B               	movf	LCDstring@l1,w,c
 11885  00599C  0D06               	mullw	6
 11886  00599E  50F3               	movf	prodl,w,c
 11887  0059A0  0800               	sublw	0
 11888  0059A2  0F3D               	addlw	61
 11889  0059A4  6E05               	movwf	LCDy@value,c
 11890  0059A6  0E00               	movlw	0
 11891  0059A8  ECDA  F01D         	call	_LCDy
 11892                           
 11893                           ;LCDgraphic.c: 731: for(int i = 0; i<l1; i++)
 11894  0059AC  0E00               	movlw	0
 11895  0059AE  6E3D               	movwf	LCDstring@i_536+1,c
 11896  0059B0  0E00               	movlw	0
 11897  0059B2  6E3C               	movwf	LCDstring@i_536,c
 11898  0059B4  D00F               	goto	l4513
 11899  0059B6                     l4505:
 11900                           
 11901                           ;LCDgraphic.c: 732: {
 11902                           ;LCDgraphic.c: 734: LCDchar(*buffer++,0);
 11903  0059B6  0E00               	movlw	0
 11904  0059B8  6E15               	movwf	LCDchar@position,c
 11905  0059BA  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11906  0059BE  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11907  0059C2  50DF               	movf	indf2,w,c
 11908  0059C4  EC6C  F029         	call	_LCDchar
 11909  0059C8  4A2D               	infsnz	LCDstring@buffer,f,c
 11910  0059CA  2A2E               	incf	LCDstring@buffer+1,f,c
 11911                           
 11912                           ;LCDgraphic.c: 735: emptycolumn();
 11913  0059CC  EC9E  F01E         	call	_emptycolumn	;wreg free
 11914  0059D0  4A3C               	infsnz	LCDstring@i_536,f,c
 11915  0059D2  2A3D               	incf	LCDstring@i_536+1,f,c
 11916  0059D4                     l4513:
 11917  0059D4  504B               	movf	LCDstring@l1,w,c
 11918  0059D6  5C3C               	subwf	LCDstring@i_536,w,c
 11919  0059D8  503D               	movf	LCDstring@i_536+1,w,c
 11920  0059DA  0A80               	xorlw	128
 11921  0059DC  6E2F               	movwf	??_LCDstring& (0+255),c
 11922  0059DE  504C               	movf	LCDstring@l1+1,w,c
 11923  0059E0  0A80               	xorlw	128
 11924  0059E2  582F               	subwfb	??_LCDstring& (0+255),w,c
 11925  0059E4  A0D8               	btfss	status,0,c
 11926  0059E6  D7E7               	goto	l4505
 11927                           
 11928                           ;LCDgraphic.c: 736: }
 11929                           ;LCDgraphic.c: 739: LCDpage(0,curr_page);
 11930  0059E8  C05E  F00F         	movff	_curr_page,LCDpage@page
 11931  0059EC  0E00               	movlw	0
 11932  0059EE  EC89  F01D         	call	_LCDpage
 11933                           
 11934                           ;LCDgraphic.c: 740: LCDchar(*buffer++,2);
 11935  0059F2  0E02               	movlw	2
 11936  0059F4  6E15               	movwf	LCDchar@position,c
 11937  0059F6  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11938  0059FA  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11939  0059FE  50DF               	movf	indf2,w,c
 11940  005A00  EC6C  F029         	call	_LCDchar
 11941  005A04  4A2D               	infsnz	LCDstring@buffer,f,c
 11942  005A06  2A2E               	incf	LCDstring@buffer+1,f,c
 11943                           
 11944                           ;LCDgraphic.c: 743: LCDpage(1,curr_page);
 11945  005A08  C05E  F00F         	movff	_curr_page,LCDpage@page
 11946  005A0C  0E01               	movlw	1
 11947  005A0E  EC89  F01D         	call	_LCDpage
 11948                           
 11949                           ;LCDgraphic.c: 744: LCDy(1,3);
 11950  005A12  0E03               	movlw	3
 11951  005A14  6E05               	movwf	LCDy@value,c
 11952  005A16  0E01               	movlw	1
 11953  005A18  ECDA  F01D         	call	_LCDy
 11954                           
 11955                           ;LCDgraphic.c: 746: for(int i=l1+1; i<length; i++)
 11956  005A1C  0E01               	movlw	1
 11957  005A1E  244B               	addwf	LCDstring@l1,w,c
 11958  005A20  6E3E               	movwf	LCDstring@i_537,c
 11959  005A22  0E00               	movlw	0
 11960  005A24  204C               	addwfc	LCDstring@l1+1,w,c
 11961  005A26  6E3F               	movwf	LCDstring@i_537+1,c
 11962  005A28  D00F               	goto	l4535
 11963  005A2A                     l4527:
 11964                           
 11965                           ;LCDgraphic.c: 747: {
 11966                           ;LCDgraphic.c: 749: LCDchar(*buffer++,0);
 11967  005A2A  0E00               	movlw	0
 11968  005A2C  6E15               	movwf	LCDchar@position,c
 11969  005A2E  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 11970  005A32  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 11971  005A36  50DF               	movf	indf2,w,c
 11972  005A38  EC6C  F029         	call	_LCDchar
 11973  005A3C  4A2D               	infsnz	LCDstring@buffer,f,c
 11974  005A3E  2A2E               	incf	LCDstring@buffer+1,f,c
 11975                           
 11976                           ;LCDgraphic.c: 750: emptycolumn();
 11977  005A40  EC9E  F01E         	call	_emptycolumn	;wreg free
 11978  005A44  4A3E               	infsnz	LCDstring@i_537,f,c
 11979  005A46  2A3F               	incf	LCDstring@i_537+1,f,c
 11980  005A48                     l4535:
 11981  005A48  504D               	movf	LCDstring@length,w,c
 11982  005A4A  5C3E               	subwf	LCDstring@i_537,w,c
 11983  005A4C  503F               	movf	LCDstring@i_537+1,w,c
 11984  005A4E  0A80               	xorlw	128
 11985  005A50  6E2F               	movwf	??_LCDstring& (0+255),c
 11986  005A52  504E               	movf	LCDstring@length+1,w,c
 11987  005A54  0A80               	xorlw	128
 11988  005A56  582F               	subwfb	??_LCDstring& (0+255),w,c
 11989  005A58  B0D8               	btfsc	status,0,c
 11990  005A5A  0012               	return	
 11991  005A5C  D7E6               	goto	l4527
 11992  005A5E                     l4537:
 11993                           
 11994                           ;LCDgraphic.c: 755: else
 11995                           ;LCDgraphic.c: 756: {
 11996                           ;LCDgraphic.c: 758: if(length < 11)
 11997  005A5E  BE4E               	btfsc	LCDstring@length+1,7,c
 11998  005A60  D006               	goto	l4539
 11999  005A62  504E               	movf	LCDstring@length+1,w,c
 12000  005A64  E131               	bnz	l4555
 12001  005A66  0E0B               	movlw	11
 12002  005A68  5C4D               	subwf	LCDstring@length,w,c
 12003  005A6A  B0D8               	btfsc	status,0,c
 12004  005A6C  D02D               	goto	l4555
 12005  005A6E                     l4539:
 12006                           
 12007                           ;LCDgraphic.c: 759: {
 12008                           ;LCDgraphic.c: 761: LCDpage(1,curr_page);
 12009  005A6E  C05E  F00F         	movff	_curr_page,LCDpage@page
 12010  005A72  0E01               	movlw	1
 12011  005A74  EC89  F01D         	call	_LCDpage
 12012                           
 12013                           ;LCDgraphic.c: 762: LCDy(1,63-(6*length));
 12014  005A78  504D               	movf	LCDstring@length,w,c
 12015  005A7A  0D06               	mullw	6
 12016  005A7C  50F3               	movf	prodl,w,c
 12017  005A7E  0800               	sublw	0
 12018  005A80  0F3F               	addlw	63
 12019  005A82  6E05               	movwf	LCDy@value,c
 12020  005A84  0E01               	movlw	1
 12021  005A86  ECDA  F01D         	call	_LCDy
 12022                           
 12023                           ;LCDgraphic.c: 764: for(int i = 0; i<length; i++)
 12024  005A8A  0E00               	movlw	0
 12025  005A8C  6E41               	movwf	LCDstring@i_538+1,c
 12026  005A8E  0E00               	movlw	0
 12027  005A90  6E40               	movwf	LCDstring@i_538,c
 12028  005A92  D00F               	goto	l4553
 12029  005A94                     l4545:
 12030                           
 12031                           ;LCDgraphic.c: 765: {
 12032                           ;LCDgraphic.c: 766: LCDchar(*buffer,0);
 12033  005A94  0E00               	movlw	0
 12034  005A96  6E15               	movwf	LCDchar@position,c
 12035  005A98  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 12036  005A9C  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 12037  005AA0  50DF               	movf	indf2,w,c
 12038  005AA2  EC6C  F029         	call	_LCDchar
 12039                           
 12040                           ;LCDgraphic.c: 767: emptycolumn();
 12041  005AA6  EC9E  F01E         	call	_emptycolumn	;wreg free
 12042                           
 12043                           ;LCDgraphic.c: 768: buffer++;
 12044  005AAA  4A2D               	infsnz	LCDstring@buffer,f,c
 12045  005AAC  2A2E               	incf	LCDstring@buffer+1,f,c
 12046  005AAE  4A40               	infsnz	LCDstring@i_538,f,c
 12047  005AB0  2A41               	incf	LCDstring@i_538+1,f,c
 12048  005AB2                     l4553:
 12049  005AB2  504D               	movf	LCDstring@length,w,c
 12050  005AB4  5C40               	subwf	LCDstring@i_538,w,c
 12051  005AB6  5041               	movf	LCDstring@i_538+1,w,c
 12052  005AB8  0A80               	xorlw	128
 12053  005ABA  6E2F               	movwf	??_LCDstring& (0+255),c
 12054  005ABC  504E               	movf	LCDstring@length+1,w,c
 12055  005ABE  0A80               	xorlw	128
 12056  005AC0  582F               	subwfb	??_LCDstring& (0+255),w,c
 12057  005AC2  B0D8               	btfsc	status,0,c
 12058  005AC4  0012               	return	
 12059  005AC6  D7E6               	goto	l4545
 12060  005AC8                     l4555:
 12061                           
 12062                           ;LCDgraphic.c: 772: else
 12063                           ;LCDgraphic.c: 773: {
 12064                           ;LCDgraphic.c: 774: if(length==11)
 12065  005AC8  0E0B               	movlw	11
 12066  005ACA  184D               	xorwf	LCDstring@length,w,c
 12067  005ACC  104E               	iorwf	LCDstring@length+1,w,c
 12068  005ACE  A4D8               	btfss	status,2,c
 12069  005AD0  D03D               	goto	l4583
 12070                           
 12071                           ;LCDgraphic.c: 775: {
 12072                           ;LCDgraphic.c: 777: LCDpage(0,curr_page);
 12073  005AD2  C05E  F00F         	movff	_curr_page,LCDpage@page
 12074  005AD6  0E00               	movlw	0
 12075  005AD8  EC89  F01D         	call	_LCDpage
 12076                           
 12077                           ;LCDgraphic.c: 778: LCDchar(*buffer++,2);
 12078  005ADC  0E02               	movlw	2
 12079  005ADE  6E15               	movwf	LCDchar@position,c
 12080  005AE0  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 12081  005AE4  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 12082  005AE8  50DF               	movf	indf2,w,c
 12083  005AEA  EC6C  F029         	call	_LCDchar
 12084  005AEE  4A2D               	infsnz	LCDstring@buffer,f,c
 12085  005AF0  2A2E               	incf	LCDstring@buffer+1,f,c
 12086                           
 12087                           ;LCDgraphic.c: 779: LCDpage(1,curr_page);
 12088  005AF2  C05E  F00F         	movff	_curr_page,LCDpage@page
 12089  005AF6  0E01               	movlw	1
 12090  005AF8  EC89  F01D         	call	_LCDpage
 12091                           
 12092                           ;LCDgraphic.c: 780: LCDy(1,3);
 12093  005AFC  0E03               	movlw	3
 12094  005AFE  6E05               	movwf	LCDy@value,c
 12095  005B00  0E01               	movlw	1
 12096  005B02  ECDA  F01D         	call	_LCDy
 12097                           
 12098                           ;LCDgraphic.c: 782: for(int i=0; i<10; i++)
 12099  005B06  0E00               	movlw	0
 12100  005B08  6E49               	movwf	LCDstring@i_539+1,c
 12101  005B0A  0E00               	movlw	0
 12102  005B0C  6E48               	movwf	LCDstring@i_539,c
 12103  005B0E  BE49               	btfsc	LCDstring@i_539+1,7,c
 12104  005B10  D008               	goto	l4573
 12105  005B12  5049               	movf	LCDstring@i_539+1,w,c
 12106  005B14  E105               	bnz	u5160
 12107  005B16  0E0A               	movlw	10
 12108  005B18  5C48               	subwf	LCDstring@i_539,w,c
 12109  005B1A  B0D8               	btfsc	status,0,c
 12110  005B1C  0012               	return	
 12111  005B1E  D001               	goto	l4573
 12112  005B20                     u5160:
 12113  005B20  0012               	return	
 12114  005B22                     l4573:
 12115                           
 12116                           ;LCDgraphic.c: 783: {
 12117                           ;LCDgraphic.c: 784: LCDchar(*buffer++,0);
 12118  005B22  0E00               	movlw	0
 12119  005B24  6E15               	movwf	LCDchar@position,c
 12120  005B26  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 12121  005B2A  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 12122  005B2E  50DF               	movf	indf2,w,c
 12123  005B30  EC6C  F029         	call	_LCDchar
 12124  005B34  4A2D               	infsnz	LCDstring@buffer,f,c
 12125  005B36  2A2E               	incf	LCDstring@buffer+1,f,c
 12126                           
 12127                           ;LCDgraphic.c: 785: emptycolumn();
 12128  005B38  EC9E  F01E         	call	_emptycolumn	;wreg free
 12129  005B3C  4A48               	infsnz	LCDstring@i_539,f,c
 12130  005B3E  2A49               	incf	LCDstring@i_539+1,f,c
 12131  005B40  BE49               	btfsc	LCDstring@i_539+1,7,c
 12132  005B42  D7EF               	goto	l4573
 12133  005B44  5049               	movf	LCDstring@i_539+1,w,c
 12134  005B46  E101               	bnz	u5170
 12135  005B48  D7E6               	goto	L18
 12136  005B4A                     u5170:
 12137                           
 12138                           ;LCDgraphic.c: 786: }
 12139                           ;LCDgraphic.c: 788: }
 12140  005B4A  0012               	return	
 12141  005B4C                     l4583:
 12142                           
 12143                           ;LCDgraphic.c: 789: else
 12144                           ;LCDgraphic.c: 790: {
 12145                           ;LCDgraphic.c: 792: LCDpage(0,curr_page);
 12146  005B4C  C05E  F00F         	movff	_curr_page,LCDpage@page
 12147  005B50  0E00               	movlw	0
 12148  005B52  EC89  F01D         	call	_LCDpage
 12149                           
 12150                           ;LCDgraphic.c: 793: LCDy(0,126-(6*length));
 12151  005B56  504D               	movf	LCDstring@length,w,c
 12152  005B58  0D06               	mullw	6
 12153  005B5A  50F3               	movf	prodl,w,c
 12154  005B5C  0800               	sublw	0
 12155  005B5E  0F7E               	addlw	126
 12156  005B60  6E05               	movwf	LCDy@value,c
 12157  005B62  0E00               	movlw	0
 12158  005B64  ECDA  F01D         	call	_LCDy
 12159                           
 12160                           ;LCDgraphic.c: 795: for(int i=0; i<length-11; i++)
 12161  005B68  0E00               	movlw	0
 12162  005B6A  6E43               	movwf	LCDstring@i_540+1,c
 12163  005B6C  0E00               	movlw	0
 12164  005B6E  6E42               	movwf	LCDstring@i_540,c
 12165  005B70  D00F               	goto	l4597
 12166  005B72                     l4589:
 12167                           
 12168                           ;LCDgraphic.c: 796: {
 12169                           ;LCDgraphic.c: 797: LCDchar(*buffer++,0);
 12170  005B72  0E00               	movlw	0
 12171  005B74  6E15               	movwf	LCDchar@position,c
 12172  005B76  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 12173  005B7A  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 12174  005B7E  50DF               	movf	indf2,w,c
 12175  005B80  EC6C  F029         	call	_LCDchar
 12176  005B84  4A2D               	infsnz	LCDstring@buffer,f,c
 12177  005B86  2A2E               	incf	LCDstring@buffer+1,f,c
 12178                           
 12179                           ;LCDgraphic.c: 798: emptycolumn();
 12180  005B88  EC9E  F01E         	call	_emptycolumn	;wreg free
 12181  005B8C  4A42               	infsnz	LCDstring@i_540,f,c
 12182  005B8E  2A43               	incf	LCDstring@i_540+1,f,c
 12183  005B90                     l4597:
 12184  005B90  0EF5               	movlw	245
 12185  005B92  6E2F               	movwf	??_LCDstring& (0+255),c
 12186  005B94  0EFF               	movlw	255
 12187  005B96  6E30               	movwf	(??_LCDstring+1)& (0+255),c
 12188  005B98  C04D  F031         	movff	LCDstring@length,??_LCDstring+2
 12189  005B9C  C04E  F032         	movff	LCDstring@length+1,??_LCDstring+3
 12190  005BA0  502F               	movf	??_LCDstring,w,c
 12191  005BA2  2631               	addwf	??_LCDstring+2,f,c
 12192  005BA4  5030               	movf	??_LCDstring+1,w,c
 12193  005BA6  2232               	addwfc	??_LCDstring+3,f,c
 12194  005BA8  5031               	movf	??_LCDstring+2,w,c
 12195  005BAA  5C42               	subwf	LCDstring@i_540,w,c
 12196  005BAC  5043               	movf	LCDstring@i_540+1,w,c
 12197  005BAE  0A80               	xorlw	128
 12198  005BB0  6E33               	movwf	(??_LCDstring+4)& (0+255),c
 12199  005BB2  5032               	movf	??_LCDstring+3,w,c
 12200  005BB4  0A80               	xorlw	128
 12201  005BB6  5833               	subwfb	(??_LCDstring+4)& (0+255),w,c
 12202  005BB8  A0D8               	btfss	status,0,c
 12203  005BBA  D7DB               	goto	l4589
 12204                           
 12205                           ;LCDgraphic.c: 799: }
 12206                           ;LCDgraphic.c: 801: LCDpage(0,curr_page);
 12207  005BBC  C05E  F00F         	movff	_curr_page,LCDpage@page
 12208  005BC0  0E00               	movlw	0
 12209  005BC2  EC89  F01D         	call	_LCDpage
 12210                           
 12211                           ;LCDgraphic.c: 802: LCDchar(*buffer++,2);
 12212  005BC6  0E02               	movlw	2
 12213  005BC8  6E15               	movwf	LCDchar@position,c
 12214  005BCA  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 12215  005BCE  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 12216  005BD2  50DF               	movf	indf2,w,c
 12217  005BD4  EC6C  F029         	call	_LCDchar
 12218  005BD8  4A2D               	infsnz	LCDstring@buffer,f,c
 12219  005BDA  2A2E               	incf	LCDstring@buffer+1,f,c
 12220                           
 12221                           ;LCDgraphic.c: 803: LCDpage(1,curr_page);
 12222  005BDC  C05E  F00F         	movff	_curr_page,LCDpage@page
 12223  005BE0  0E01               	movlw	1
 12224  005BE2  EC89  F01D         	call	_LCDpage
 12225                           
 12226                           ;LCDgraphic.c: 804: LCDy(1,3);
 12227  005BE6  0E03               	movlw	3
 12228  005BE8  6E05               	movwf	LCDy@value,c
 12229  005BEA  0E01               	movlw	1
 12230  005BEC  ECDA  F01D         	call	_LCDy
 12231                           
 12232                           ;LCDgraphic.c: 806: for(int i = length-10; i<length; i++)
 12233  005BF0  0EF6               	movlw	246
 12234  005BF2  244D               	addwf	LCDstring@length,w,c
 12235  005BF4  6E44               	movwf	LCDstring@i_541,c
 12236  005BF6  0EFF               	movlw	255
 12237  005BF8  204E               	addwfc	LCDstring@length+1,w,c
 12238  005BFA  6E45               	movwf	LCDstring@i_541+1,c
 12239  005BFC  D00F               	goto	l4619
 12240  005BFE                     l4611:
 12241                           
 12242                           ;LCDgraphic.c: 807: {
 12243                           ;LCDgraphic.c: 808: LCDchar(*buffer++,0);
 12244  005BFE  0E00               	movlw	0
 12245  005C00  6E15               	movwf	LCDchar@position,c
 12246  005C02  C02D  FFD9         	movff	LCDstring@buffer,fsr2l
 12247  005C06  C02E  FFDA         	movff	LCDstring@buffer+1,fsr2h
 12248  005C0A  50DF               	movf	indf2,w,c
 12249  005C0C  EC6C  F029         	call	_LCDchar
 12250  005C10  4A2D               	infsnz	LCDstring@buffer,f,c
 12251  005C12  2A2E               	incf	LCDstring@buffer+1,f,c
 12252                           
 12253                           ;LCDgraphic.c: 809: emptycolumn();
 12254  005C14  EC9E  F01E         	call	_emptycolumn	;wreg free
 12255  005C18  4A44               	infsnz	LCDstring@i_541,f,c
 12256  005C1A  2A45               	incf	LCDstring@i_541+1,f,c
 12257  005C1C                     l4619:
 12258  005C1C  504D               	movf	LCDstring@length,w,c
 12259  005C1E  5C44               	subwf	LCDstring@i_541,w,c
 12260  005C20  5045               	movf	LCDstring@i_541+1,w,c
 12261  005C22  0A80               	xorlw	128
 12262  005C24  6E2F               	movwf	??_LCDstring& (0+255),c
 12263  005C26  504E               	movf	LCDstring@length+1,w,c
 12264  005C28  0A80               	xorlw	128
 12265  005C2A  582F               	subwfb	??_LCDstring& (0+255),w,c
 12266  005C2C  B0D8               	btfsc	status,0,c
 12267  005C2E  0012               	return	
 12268  005C30  D7E6               	goto	l4611
 12269  005C32                     __end_of_LCDstring:
 12270                           	opt stack 0
 12271                           tblptru	equ	0xFF8
 12272                           tblptrh	equ	0xFF7
 12273                           tblptrl	equ	0xFF6
 12274                           tablat	equ	0xFF5
 12275                           prodh	equ	0xFF4
 12276                           prodl	equ	0xFF3
 12277                           postinc0	equ	0xFEE
 12278                           wreg	equ	0xFE8
 12279                           indf1	equ	0xFE7
 12280                           postdec1	equ	0xFE5
 12281                           fsr1h	equ	0xFE2
 12282                           fsr1l	equ	0xFE1
 12283                           indf2	equ	0xFDF
 12284                           postinc2	equ	0xFDE
 12285                           postdec2	equ	0xFDD
 12286                           fsr2h	equ	0xFDA
 12287                           fsr2l	equ	0xFD9
 12288                           status	equ	0xFD8
 12289                           
 12290 ;; *************** function _strlen *****************
 12291 ;; Defined at:
 12292 ;;		line 4 in file "/opt/microchip/xc8/v1.37/sources/common/strlen.c"
 12293 ;; Parameters:    Size  Location     Type
 12294 ;;  s               2    0[COMRAM] PTR const unsigned char 
 12295 ;;		 -> main@buf_360(13), main@bottom_buf(40), main@buf_344(10), main@buf(10), 
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;  cp              2    4[COMRAM] PTR const unsigned char 
 12298 ;;		 -> main@buf_360(13), main@bottom_buf(40), main@buf_344(10), main@buf(10), 
 12299 ;; Return value:  Size  Location     Type
 12300 ;;                  2    0[COMRAM] unsigned int 
 12301 ;; Registers used:
 12302 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12303 ;; Tracked objects:
 12304 ;;		On entry : 0/0
 12305 ;;		On exit  : 0/0
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12308 ;;      Params:         2       0       0       0       0       0       0       0       0
 12309 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12310 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12311 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12312 ;;Total ram usage:        6 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; This function calls:
 12315 ;;		Nothing
 12316 ;; This function is called by:
 12317 ;;		_LCDstring
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           	psect	text27
 12322  003A0C                     __ptext27:
 12323                           	opt stack 0
 12324  003A0C                     _strlen:
 12325                           	opt stack 29
 12326                           
 12327                           ;incstack = 0
 12328  003A0C  C001  F005         	movff	strlen@s,strlen@cp
 12329  003A10  C002  F006         	movff	strlen@s+1,strlen@cp+1
 12330  003A14  D002               	goto	l3735
 12331  003A16                     l3733:
 12332  003A16  4A05               	infsnz	strlen@cp,f,c
 12333  003A18  2A06               	incf	strlen@cp+1,f,c
 12334  003A1A                     l3735:
 12335  003A1A  C005  FFD9         	movff	strlen@cp,fsr2l
 12336  003A1E  C006  FFDA         	movff	strlen@cp+1,fsr2h
 12337  003A22  50DF               	movf	indf2,w,c
 12338  003A24  A4D8               	btfss	status,2,c
 12339  003A26  D7F7               	goto	l3733
 12340  003A28  C001  F003         	movff	strlen@s,??_strlen
 12341  003A2C  C002  F004         	movff	strlen@s+1,??_strlen+1
 12342  003A30  1E03               	comf	??_strlen,f,c
 12343  003A32  1E04               	comf	??_strlen+1,f,c
 12344  003A34  4A03               	infsnz	??_strlen,f,c
 12345  003A36  2A04               	incf	??_strlen+1,f,c
 12346  003A38  5005               	movf	strlen@cp,w,c
 12347  003A3A  2403               	addwf	??_strlen,w,c
 12348  003A3C  6E01               	movwf	?_strlen,c
 12349  003A3E  5006               	movf	strlen@cp+1,w,c
 12350  003A40  2004               	addwfc	??_strlen+1,w,c
 12351  003A42  6E02               	movwf	?_strlen+1,c
 12352  003A44  0012               	return	
 12353  003A46                     __end_of_strlen:
 12354                           	opt stack 0
 12355                           tblptru	equ	0xFF8
 12356                           tblptrh	equ	0xFF7
 12357                           tblptrl	equ	0xFF6
 12358                           tablat	equ	0xFF5
 12359                           prodh	equ	0xFF4
 12360                           prodl	equ	0xFF3
 12361                           postinc0	equ	0xFEE
 12362                           wreg	equ	0xFE8
 12363                           indf1	equ	0xFE7
 12364                           postdec1	equ	0xFE5
 12365                           fsr1h	equ	0xFE2
 12366                           fsr1l	equ	0xFE1
 12367                           indf2	equ	0xFDF
 12368                           postinc2	equ	0xFDE
 12369                           postdec2	equ	0xFDD
 12370                           fsr2h	equ	0xFDA
 12371                           fsr2l	equ	0xFD9
 12372                           status	equ	0xFD8
 12373                           
 12374 ;; *************** function _emptycolumn *****************
 12375 ;; Defined at:
 12376 ;;		line 455 in file "src/LCDgraphic.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  char_index      2    3[COMRAM] int 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      void 
 12383 ;; Registers used:
 12384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0
 12391 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12392 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12393 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12394 ;;Total ram usage:        4 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    2
 12397 ;; This function calls:
 12398 ;;		_LCDcmd
 12399 ;; This function is called by:
 12400 ;;		_LCDstring
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           	psect	text28
 12405  003D3C                     __ptext28:
 12406                           	opt stack 0
 12407  003D3C                     _emptycolumn:
 12408                           	opt stack 27
 12409                           
 12410                           ;LCDgraphic.c: 457: int char_index;
 12411                           ;LCDgraphic.c: 459: LATCbits.LATC2=1;
 12412                           
 12413                           ;incstack = 0
 12414  003D3C  848B               	bsf	3979,2,c	;volatile
 12415                           
 12416                           ;LCDgraphic.c: 460: LATCbits.LATC1=0;
 12417  003D3E  928B               	bcf	3979,1,c	;volatile
 12418                           
 12419                           ;LCDgraphic.c: 462: if(selected_side==0)
 12420  003D40  0102               	movlb	2	; () banked
 12421  003D42  5129               	movf	_selected_side& (0+255),w,b
 12422  003D44  0102               	movlb	2	; () banked
 12423  003D46  112A               	iorwf	(_selected_side+1)& (0+255),w,b
 12424  003D48  A4D8               	btfss	status,2,c
 12425  003D4A  D00F               	goto	l3725
 12426                           
 12427                           ; BSR set to: 2
 12428                           ;LCDgraphic.c: 463: {
 12429                           ;LCDgraphic.c: 464: char_index = (128*curr_page) + curr_column;
 12430  003D4C  C05E  F002         	movff	_curr_page,??_emptycolumn
 12431  003D50  C05F  F003         	movff	_curr_page+1,??_emptycolumn+1
 12432  003D54  0E07               	movlw	7
 12433  003D56                     u3885:
 12434  003D56  90D8               	bcf	status,0,c
 12435  003D58  3602               	rlcf	??_emptycolumn,f,c
 12436  003D5A  3603               	rlcf	??_emptycolumn+1,f,c
 12437  003D5C  2EE8               	decfsz	wreg,f,c
 12438  003D5E  D7FB               	goto	u3885
 12439  003D60  505C               	movf	_curr_column,w,c
 12440  003D62  2402               	addwf	??_emptycolumn,w,c
 12441  003D64  6E04               	movwf	emptycolumn@char_index,c
 12442  003D66  505D               	movf	_curr_column+1,w,c
 12443  003D68  D012               	goto	L19
 12444  003D6A                     l3725:
 12445                           
 12446                           ; BSR set to: 2
 12447                           ;LCDgraphic.c: 467: else
 12448                           ;LCDgraphic.c: 468: {
 12449                           ;LCDgraphic.c: 469: char_index = (128*curr_page) + curr_column+64;
 12450  003D6A  C05E  F002         	movff	_curr_page,??_emptycolumn
 12451  003D6E  C05F  F003         	movff	_curr_page+1,??_emptycolumn+1
 12452  003D72  0E07               	movlw	7
 12453  003D74                     u3895:
 12454  003D74  90D8               	bcf	status,0,c
 12455  003D76  3602               	rlcf	??_emptycolumn,f,c
 12456  003D78  3603               	rlcf	??_emptycolumn+1,f,c
 12457  003D7A  2EE8               	decfsz	wreg,f,c
 12458  003D7C  D7FB               	goto	u3895
 12459  003D7E  505C               	movf	_curr_column,w,c
 12460  003D80  2602               	addwf	??_emptycolumn,f,c
 12461  003D82  505D               	movf	_curr_column+1,w,c
 12462  003D84  2203               	addwfc	??_emptycolumn+1,f,c
 12463  003D86  0E40               	movlw	64
 12464  003D88  2402               	addwf	??_emptycolumn,w,c
 12465  003D8A  6E04               	movwf	emptycolumn@char_index,c
 12466  003D8C  0E00               	movlw	0
 12467  003D8E                     L19:
 12468  003D8E  2003               	addwfc	??_emptycolumn+1,w,c
 12469  003D90  6E05               	movwf	emptycolumn@char_index+1,c
 12470                           
 12471                           ; BSR set to: 2
 12472                           ;LCDgraphic.c: 470: }
 12473                           ;LCDgraphic.c: 473: LCDcmd (0x00 | pixels[char_index+5]);
 12474                           
 12475                           ; BSR set to: 2
 12476  003D92  0E05               	movlw	5
 12477  003D94  2404               	addwf	emptycolumn@char_index,w,c
 12478  003D96  6E02               	movwf	??_emptycolumn& (0+255),c
 12479  003D98  0E00               	movlw	0
 12480  003D9A  2005               	addwfc	emptycolumn@char_index+1,w,c
 12481  003D9C  6E03               	movwf	(??_emptycolumn+1)& (0+255),c
 12482  003D9E  0EFF               	movlw	low _pixels
 12483  003DA0  2402               	addwf	??_emptycolumn,w,c
 12484  003DA2  6ED9               	movwf	fsr2l,c
 12485  003DA4  0E03               	movlw	high _pixels
 12486  003DA6  2003               	addwfc	??_emptycolumn+1,w,c
 12487  003DA8  6EDA               	movwf	fsr2h,c
 12488  003DAA  50DF               	movf	indf2,w,c
 12489  003DAC  EC43  F01C         	call	_LCDcmd
 12490                           
 12491                           ;LCDgraphic.c: 475: curr_column = curr_column+6;
 12492  003DB0  0E06               	movlw	6
 12493  003DB2  245C               	addwf	_curr_column,w,c
 12494  003DB4  6E5C               	movwf	_curr_column,c
 12495  003DB6  0E00               	movlw	0
 12496  003DB8  205D               	addwfc	_curr_column+1,w,c
 12497  003DBA  6E5D               	movwf	_curr_column+1,c
 12498  003DBC  0012               	return		;funcret
 12499  003DBE                     __end_of_emptycolumn:
 12500                           	opt stack 0
 12501                           tblptru	equ	0xFF8
 12502                           tblptrh	equ	0xFF7
 12503                           tblptrl	equ	0xFF6
 12504                           tablat	equ	0xFF5
 12505                           prodh	equ	0xFF4
 12506                           prodl	equ	0xFF3
 12507                           postinc0	equ	0xFEE
 12508                           wreg	equ	0xFE8
 12509                           indf1	equ	0xFE7
 12510                           postdec1	equ	0xFE5
 12511                           fsr1h	equ	0xFE2
 12512                           fsr1l	equ	0xFE1
 12513                           indf2	equ	0xFDF
 12514                           postinc2	equ	0xFDE
 12515                           postdec2	equ	0xFDD
 12516                           fsr2h	equ	0xFDA
 12517                           fsr2l	equ	0xFD9
 12518                           status	equ	0xFD8
 12519                           
 12520 ;; *************** function ___awdiv *****************
 12521 ;; Defined at:
 12522 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/awdiv.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  dividend        2    6[COMRAM] int 
 12525 ;;  divisor         2    8[COMRAM] int 
 12526 ;; Auto vars:     Size  Location     Type
 12527 ;;  quotient        2   12[COMRAM] int 
 12528 ;;  sign            1   11[COMRAM] unsigned char 
 12529 ;;  counter         1   10[COMRAM] unsigned char 
 12530 ;; Return value:  Size  Location     Type
 12531 ;;                  2    6[COMRAM] int 
 12532 ;; Registers used:
 12533 ;;		wreg, status,2, status,0
 12534 ;; Tracked objects:
 12535 ;;		On entry : 0/0
 12536 ;;		On exit  : 0/0
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12539 ;;      Params:         4       0       0       0       0       0       0       0       0
 12540 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12541 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12542 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12543 ;;Total ram usage:        8 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		_main
 12549 ;;		_LCDstring
 12550 ;;		_lcdplotpixel2
 12551 ;;		_fround
 12552 ;;		_scale
 12553 ;;		_sprintf
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text29
 12558  003E40                     __ptext29:
 12559                           	opt stack 0
 12560  003E40                     ___awdiv:
 12561                           	opt stack 28
 12562                           
 12563                           ;incstack = 0
 12564  003E40  0E00               	movlw	0
 12565  003E42  6E0C               	movwf	___awdiv@sign,c
 12566  003E44  AE0A               	btfss	___awdiv@divisor+1,7,c
 12567  003E46  D006               	goto	l3553
 12568  003E48  6C09               	negf	___awdiv@divisor,c
 12569  003E4A  1E0A               	comf	___awdiv@divisor+1,f,c
 12570  003E4C  B0D8               	btfsc	status,0,c
 12571  003E4E  2A0A               	incf	___awdiv@divisor+1,f,c
 12572  003E50  0E01               	movlw	1
 12573  003E52  6E0C               	movwf	___awdiv@sign,c
 12574  003E54                     l3553:
 12575  003E54  AE08               	btfss	___awdiv@dividend+1,7,c
 12576  003E56  D006               	goto	l3559
 12577  003E58  6C07               	negf	___awdiv@dividend,c
 12578  003E5A  1E08               	comf	___awdiv@dividend+1,f,c
 12579  003E5C  B0D8               	btfsc	status,0,c
 12580  003E5E  2A08               	incf	___awdiv@dividend+1,f,c
 12581  003E60  0E01               	movlw	1
 12582  003E62  1A0C               	xorwf	___awdiv@sign,f,c
 12583  003E64                     l3559:
 12584  003E64  0E00               	movlw	0
 12585  003E66  6E0E               	movwf	___awdiv@quotient+1,c
 12586  003E68  0E00               	movlw	0
 12587  003E6A  6E0D               	movwf	___awdiv@quotient,c
 12588  003E6C  5009               	movf	___awdiv@divisor,w,c
 12589  003E6E  100A               	iorwf	___awdiv@divisor+1,w,c
 12590  003E70  B4D8               	btfsc	status,2,c
 12591  003E72  D01C               	goto	l3581
 12592  003E74  0E01               	movlw	1
 12593  003E76  6E0B               	movwf	___awdiv@counter,c
 12594  003E78  D004               	goto	l3567
 12595  003E7A                     l3565:
 12596  003E7A  90D8               	bcf	status,0,c
 12597  003E7C  3609               	rlcf	___awdiv@divisor,f,c
 12598  003E7E  360A               	rlcf	___awdiv@divisor+1,f,c
 12599  003E80  2A0B               	incf	___awdiv@counter,f,c
 12600  003E82                     l3567:
 12601  003E82  AE0A               	btfss	___awdiv@divisor+1,7,c
 12602  003E84  D7FA               	goto	l3565
 12603  003E86                     l3569:
 12604  003E86  90D8               	bcf	status,0,c
 12605  003E88  360D               	rlcf	___awdiv@quotient,f,c
 12606  003E8A  360E               	rlcf	___awdiv@quotient+1,f,c
 12607  003E8C  5009               	movf	___awdiv@divisor,w,c
 12608  003E8E  5C07               	subwf	___awdiv@dividend,w,c
 12609  003E90  500A               	movf	___awdiv@divisor+1,w,c
 12610  003E92  5808               	subwfb	___awdiv@dividend+1,w,c
 12611  003E94  A0D8               	btfss	status,0,c
 12612  003E96  D005               	goto	l3577
 12613  003E98  5009               	movf	___awdiv@divisor,w,c
 12614  003E9A  5E07               	subwf	___awdiv@dividend,f,c
 12615  003E9C  500A               	movf	___awdiv@divisor+1,w,c
 12616  003E9E  5A08               	subwfb	___awdiv@dividend+1,f,c
 12617  003EA0  800D               	bsf	___awdiv@quotient,0,c
 12618  003EA2                     l3577:
 12619  003EA2  90D8               	bcf	status,0,c
 12620  003EA4  320A               	rrcf	___awdiv@divisor+1,f,c
 12621  003EA6  3209               	rrcf	___awdiv@divisor,f,c
 12622  003EA8  2E0B               	decfsz	___awdiv@counter,f,c
 12623  003EAA  D7ED               	goto	l3569
 12624  003EAC                     l3581:
 12625  003EAC  500C               	movf	___awdiv@sign,w,c
 12626  003EAE  B4D8               	btfsc	status,2,c
 12627  003EB0  D004               	goto	l3585
 12628  003EB2  6C0D               	negf	___awdiv@quotient,c
 12629  003EB4  1E0E               	comf	___awdiv@quotient+1,f,c
 12630  003EB6  B0D8               	btfsc	status,0,c
 12631  003EB8  2A0E               	incf	___awdiv@quotient+1,f,c
 12632  003EBA                     l3585:
 12633  003EBA  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 12634  003EBE  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 12635  003EC2  0012               	return	
 12636  003EC4                     __end_of___awdiv:
 12637                           	opt stack 0
 12638                           tblptru	equ	0xFF8
 12639                           tblptrh	equ	0xFF7
 12640                           tblptrl	equ	0xFF6
 12641                           tablat	equ	0xFF5
 12642                           prodh	equ	0xFF4
 12643                           prodl	equ	0xFF3
 12644                           postinc0	equ	0xFEE
 12645                           wreg	equ	0xFE8
 12646                           indf1	equ	0xFE7
 12647                           postdec1	equ	0xFE5
 12648                           fsr1h	equ	0xFE2
 12649                           fsr1l	equ	0xFE1
 12650                           indf2	equ	0xFDF
 12651                           postinc2	equ	0xFDE
 12652                           postdec2	equ	0xFDD
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _LCDinit *****************
 12658 ;; Defined at:
 12659 ;;		line 176 in file "src/LCDgraphic.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;		None
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;  i               2   51[COMRAM] int 
 12664 ;; Return value:  Size  Location     Type
 12665 ;;                  1    wreg      void 
 12666 ;; Registers used:
 12667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12668 ;; Tracked objects:
 12669 ;;		On entry : 0/0
 12670 ;;		On exit  : 0/0
 12671 ;;		Unchanged: 0/0
 12672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12673 ;;      Params:         0       0       0       0       0       0       0       0       0
 12674 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12675 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12676 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12677 ;;Total ram usage:        3 bytes
 12678 ;; Hardware stack levels used:    1
 12679 ;; Hardware stack levels required when called:    6
 12680 ;; This function calls:
 12681 ;;		_LCDclear
 12682 ;;		_LCDon
 12683 ;;		_LCDreset
 12684 ;;		__lcd_status
 12685 ;; This function is called by:
 12686 ;;		_main
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           	psect	text30
 12691  003AC8                     __ptext30:
 12692                           	opt stack 0
 12693  003AC8                     _LCDinit:
 12694                           	opt stack 24
 12695                           
 12696                           ;LCDgraphic.c: 179: for (int i = 0; i < 15; i++)
 12697                           
 12698                           ;incstack = 0
 12699  003AC8  0E00               	movlw	0
 12700  003ACA  6E35               	movwf	LCDinit@i+1,c
 12701  003ACC  0E00               	movlw	0
 12702  003ACE  6E34               	movwf	LCDinit@i,c
 12703  003AD0                     l4059:
 12704  003AD0  BE35               	btfsc	LCDinit@i+1,7,c
 12705  003AD2  D006               	goto	l4063
 12706  003AD4  5035               	movf	LCDinit@i+1,w,c
 12707  003AD6  E10E               	bnz	l4067
 12708  003AD8  0E0F               	movlw	15
 12709  003ADA  5C34               	subwf	LCDinit@i,w,c
 12710  003ADC  B0D8               	btfsc	status,0,c
 12711  003ADE  D00A               	goto	l4067
 12712  003AE0                     l4063:
 12713                           
 12714                           ;LCDgraphic.c: 180: {
 12715                           ;LCDgraphic.c: 181: _delay((unsigned long)((10)*(40000000/4000.0)));
 12716  003AE0  0E82               	movlw	130
 12717  003AE2  6E33               	movwf	??_LCDinit& (0+255),c
 12718  003AE4  0EDE               	movlw	222
 12719  003AE6                     u6087:
 12720  003AE6  2EE8               	decfsz	wreg,f,c
 12721  003AE8  D7FE               	goto	u6087
 12722  003AEA  2E33               	decfsz	??_LCDinit& (0+255),f,c
 12723  003AEC  D7FC               	goto	u6087
 12724  003AEE  4A34               	infsnz	LCDinit@i,f,c
 12725  003AF0  2A35               	incf	LCDinit@i+1,f,c
 12726  003AF2  D7EE               	goto	l4059
 12727  003AF4                     l4067:
 12728  003AF4  ECB0  F01D         	call	__lcd_status	;wreg free
 12729  003AF8  6E33               	movwf	??_LCDinit& (0+255),c
 12730  003AFA  0E90               	movlw	144
 12731  003AFC  1633               	andwf	??_LCDinit,f,c
 12732  003AFE  A4D8               	btfss	status,2,c
 12733  003B00  D7F9               	goto	l4067
 12734                           
 12735                           ;LCDgraphic.c: 188: LCDreset();
 12736  003B02  EC67  F01C         	call	_LCDreset	;wreg free
 12737                           
 12738                           ;LCDgraphic.c: 190: LCDon(1);
 12739  003B06  0E01               	movlw	1
 12740  003B08  EC77  F01C         	call	_LCDon
 12741                           
 12742                           ;LCDgraphic.c: 192: LCDclear();
 12743  003B0C  EC62  F01F         	call	_LCDclear	;wreg free
 12744  003B10  0012               	return		;funcret
 12745  003B12                     __end_of_LCDinit:
 12746                           	opt stack 0
 12747                           tblptru	equ	0xFF8
 12748                           tblptrh	equ	0xFF7
 12749                           tblptrl	equ	0xFF6
 12750                           tablat	equ	0xFF5
 12751                           prodh	equ	0xFF4
 12752                           prodl	equ	0xFF3
 12753                           postinc0	equ	0xFEE
 12754                           wreg	equ	0xFE8
 12755                           indf1	equ	0xFE7
 12756                           postdec1	equ	0xFE5
 12757                           fsr1h	equ	0xFE2
 12758                           fsr1l	equ	0xFE1
 12759                           indf2	equ	0xFDF
 12760                           postinc2	equ	0xFDE
 12761                           postdec2	equ	0xFDD
 12762                           fsr2h	equ	0xFDA
 12763                           fsr2l	equ	0xFD9
 12764                           status	equ	0xFD8
 12765                           
 12766 ;; *************** function _LCDreset *****************
 12767 ;; Defined at:
 12768 ;;		line 280 in file "src/LCDgraphic.c"
 12769 ;; Parameters:    Size  Location     Type
 12770 ;;		None
 12771 ;; Auto vars:     Size  Location     Type
 12772 ;;		None
 12773 ;; Return value:  Size  Location     Type
 12774 ;;                  1    wreg      void 
 12775 ;; Registers used:
 12776 ;;		wreg, status,2, status,0, cstack
 12777 ;; Tracked objects:
 12778 ;;		On entry : 0/0
 12779 ;;		On exit  : 0/0
 12780 ;;		Unchanged: 0/0
 12781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12782 ;;      Params:         0       0       0       0       0       0       0       0       0
 12783 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12784 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12785 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12786 ;;Total ram usage:        1 bytes
 12787 ;; Hardware stack levels used:    1
 12788 ;; Hardware stack levels required when called:    2
 12789 ;; This function calls:
 12790 ;;		__lcd_status
 12791 ;; This function is called by:
 12792 ;;		_LCDinit
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796                           	psect	text31
 12797  0038CE                     __ptext31:
 12798                           	opt stack 0
 12799  0038CE                     _LCDreset:
 12800                           	opt stack 27
 12801                           
 12802                           ;LCDgraphic.c: 283: PORTD = 0x00;
 12803                           
 12804                           ;incstack = 0
 12805  0038CE  0E00               	movlw	0
 12806  0038D0  6E83               	movwf	3971,c	;volatile
 12807                           
 12808                           ;LCDgraphic.c: 286: LATCbits.LATC6 = 0;
 12809  0038D2  9C8B               	bcf	3979,6,c	;volatile
 12810                           
 12811                           ;LCDgraphic.c: 287: _delay((unsigned long)((20)*(40000000/4000000.0)));
 12812  0038D4  0E42               	movlw	66
 12813  0038D6                     u6097:
 12814  0038D6  2EE8               	decfsz	wreg,f,c
 12815  0038D8  D7FE               	goto	u6097
 12816  0038DA  D000               	nop2		;nop
 12817                           
 12818                           ;LCDgraphic.c: 288: LATCbits.LATC6 = 1;
 12819  0038DC  8C8B               	bsf	3979,6,c	;volatile
 12820  0038DE                     l3701:
 12821  0038DE  ECB0  F01D         	call	__lcd_status	;wreg free
 12822  0038E2  6E04               	movwf	??_LCDreset& (0+255),c
 12823  0038E4  0E90               	movlw	144
 12824  0038E6  1604               	andwf	??_LCDreset,f,c
 12825  0038E8  B4D8               	btfsc	status,2,c
 12826  0038EA  0012               	return	
 12827  0038EC  D7F8               	goto	l3701
 12828  0038EE                     __end_of_LCDreset:
 12829                           	opt stack 0
 12830                           tblptru	equ	0xFF8
 12831                           tblptrh	equ	0xFF7
 12832                           tblptrl	equ	0xFF6
 12833                           tablat	equ	0xFF5
 12834                           prodh	equ	0xFF4
 12835                           prodl	equ	0xFF3
 12836                           postinc0	equ	0xFEE
 12837                           wreg	equ	0xFE8
 12838                           indf1	equ	0xFE7
 12839                           postdec1	equ	0xFE5
 12840                           fsr1h	equ	0xFE2
 12841                           fsr1l	equ	0xFE1
 12842                           indf2	equ	0xFDF
 12843                           postinc2	equ	0xFDE
 12844                           postdec2	equ	0xFDD
 12845                           fsr2h	equ	0xFDA
 12846                           fsr2l	equ	0xFD9
 12847                           status	equ	0xFD8
 12848                           
 12849 ;; *************** function _LCDon *****************
 12850 ;; Defined at:
 12851 ;;		line 376 in file "src/LCDgraphic.c"
 12852 ;; Parameters:    Size  Location     Type
 12853 ;;  on              1    wreg     unsigned char 
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;  on              1    4[COMRAM] unsigned char 
 12856 ;; Return value:  Size  Location     Type
 12857 ;;                  1    wreg      void 
 12858 ;; Registers used:
 12859 ;;		wreg, status,2, status,0, cstack
 12860 ;; Tracked objects:
 12861 ;;		On entry : 0/0
 12862 ;;		On exit  : 0/0
 12863 ;;		Unchanged: 0/0
 12864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12865 ;;      Params:         0       0       0       0       0       0       0       0       0
 12866 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12867 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12868 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12869 ;;Total ram usage:        1 bytes
 12870 ;; Hardware stack levels used:    1
 12871 ;; Hardware stack levels required when called:    3
 12872 ;; This function calls:
 12873 ;;		_LCDcmd
 12874 ;;		__lcd_waitbusy
 12875 ;; This function is called by:
 12876 ;;		_LCDinit
 12877 ;; This function uses a non-reentrant model
 12878 ;;
 12879                           
 12880                           	psect	text32
 12881  0038EE                     __ptext32:
 12882                           	opt stack 0
 12883  0038EE                     _LCDon:
 12884                           	opt stack 26
 12885                           
 12886                           ;incstack = 0
 12887                           ;LCDon@on stored from wreg
 12888  0038EE  6E05               	movwf	LCDon@on,c
 12889                           
 12890                           ;LCDgraphic.c: 379: _lcd_waitbusy();
 12891  0038F0  EC50  F01C         	call	__lcd_waitbusy	;wreg free
 12892                           
 12893                           ;LCDgraphic.c: 381: LATCbits.LATC2=0;
 12894  0038F4  948B               	bcf	3979,2,c	;volatile
 12895                           
 12896                           ;LCDgraphic.c: 382: LATCbits.LATC1=0;
 12897  0038F6  928B               	bcf	3979,1,c	;volatile
 12898                           
 12899                           ;LCDgraphic.c: 383: LATEbits.LATE0=1;
 12900  0038F8  808D               	bsf	3981,0,c	;volatile
 12901                           
 12902                           ;LCDgraphic.c: 384: LATEbits.LATE1=1;
 12903  0038FA  828D               	bsf	3981,1,c	;volatile
 12904                           
 12905                           ;LCDgraphic.c: 385: if(on)
 12906  0038FC  5005               	movf	LCDon@on,w,c
 12907  0038FE  B4D8               	btfsc	status,2,c
 12908  003900  D004               	goto	l3717
 12909                           
 12910                           ;LCDgraphic.c: 386: {
 12911                           ;LCDgraphic.c: 387: LCDcmd(0b00111111);
 12912  003902  0E3F               	movlw	63
 12913  003904  EC43  F01C         	call	_LCDcmd
 12914                           
 12915                           ;LCDgraphic.c: 388: }
 12916  003908  0012               	return	
 12917  00390A                     l3717:
 12918                           
 12919                           ;LCDgraphic.c: 389: else
 12920                           ;LCDgraphic.c: 390: {
 12921                           ;LCDgraphic.c: 391: LCDcmd(0b00111110);
 12922  00390A  0E3E               	movlw	62
 12923  00390C  EC43  F01C         	call	_LCDcmd
 12924  003910  0012               	return	
 12925  003912                     __end_of_LCDon:
 12926                           	opt stack 0
 12927                           tblptru	equ	0xFF8
 12928                           tblptrh	equ	0xFF7
 12929                           tblptrl	equ	0xFF6
 12930                           tablat	equ	0xFF5
 12931                           prodh	equ	0xFF4
 12932                           prodl	equ	0xFF3
 12933                           postinc0	equ	0xFEE
 12934                           wreg	equ	0xFE8
 12935                           indf1	equ	0xFE7
 12936                           postdec1	equ	0xFE5
 12937                           fsr1h	equ	0xFE2
 12938                           fsr1l	equ	0xFE1
 12939                           indf2	equ	0xFDF
 12940                           postinc2	equ	0xFDE
 12941                           postdec2	equ	0xFDD
 12942                           fsr2h	equ	0xFDA
 12943                           fsr2l	equ	0xFD9
 12944                           status	equ	0xFD8
 12945                           
 12946 ;; *************** function _LCDclear *****************
 12947 ;; Defined at:
 12948 ;;		line 600 in file "src/LCDgraphic.c"
 12949 ;; Parameters:    Size  Location     Type
 12950 ;;		None
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;  j               2   48[COMRAM] int 
 12953 ;;  i               2   46[COMRAM] int 
 12954 ;;  i               2   44[COMRAM] int 
 12955 ;; Return value:  Size  Location     Type
 12956 ;;                  1    wreg      void 
 12957 ;; Registers used:
 12958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12964 ;;      Params:         0       0       0       0       0       0       0       0       0
 12965 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12966 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12967 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12968 ;;Total ram usage:        6 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    5
 12971 ;; This function calls:
 12972 ;;		_LCDchar
 12973 ;;		_LCDpage
 12974 ;;		_LCDy
 12975 ;;		__lcd_waitbusy
 12976 ;; This function is called by:
 12977 ;;		_main
 12978 ;;		_LCDinit
 12979 ;; This function uses a non-reentrant model
 12980 ;;
 12981                           
 12982                           	psect	text33
 12983  003EC4                     __ptext33:
 12984                           	opt stack 0
 12985  003EC4                     _LCDclear:
 12986                           	opt stack 24
 12987                           
 12988                           ;LCDgraphic.c: 602: _lcd_waitbusy();
 12989                           
 12990                           ;incstack = 0
 12991  003EC4  EC50  F01C         	call	__lcd_waitbusy	;wreg free
 12992                           
 12993                           ;LCDgraphic.c: 605: for(int i = 0; i < 1025; i++)
 12994  003EC8  0E00               	movlw	0
 12995  003ECA  6E2E               	movwf	LCDclear@i+1,c
 12996  003ECC  0E00               	movlw	0
 12997  003ECE  6E2D               	movwf	LCDclear@i,c
 12998  003ED0                     l3629:
 12999  003ED0  BE2E               	btfsc	LCDclear@i+1,7,c
 13000  003ED2  D005               	goto	l3633
 13001  003ED4  042D               	decf	LCDclear@i,w,c
 13002  003ED6  0E04               	movlw	4
 13003  003ED8  582E               	subwfb	LCDclear@i+1,w,c
 13004  003EDA  B0D8               	btfsc	status,0,c
 13005  003EDC  D00B               	goto	l3639
 13006  003EDE                     l3633:
 13007                           
 13008                           ;LCDgraphic.c: 606: {
 13009                           ;LCDgraphic.c: 607: pixels[i] = 0x00;
 13010  003EDE  0EFF               	movlw	low _pixels
 13011  003EE0  242D               	addwf	LCDclear@i,w,c
 13012  003EE2  6ED9               	movwf	fsr2l,c
 13013  003EE4  0E03               	movlw	high _pixels
 13014  003EE6  202E               	addwfc	LCDclear@i+1,w,c
 13015  003EE8  6EDA               	movwf	fsr2h,c
 13016  003EEA  0E00               	movlw	0
 13017  003EEC  6EDF               	movwf	indf2,c
 13018  003EEE  4A2D               	infsnz	LCDclear@i,f,c
 13019  003EF0  2A2E               	incf	LCDclear@i+1,f,c
 13020  003EF2  D7EE               	goto	l3629
 13021  003EF4                     l3639:
 13022                           
 13023                           ;LCDgraphic.c: 608: }
 13024                           ;LCDgraphic.c: 610: for(int i = 0; i < 8;i++)
 13025  003EF4  0E00               	movlw	0
 13026  003EF6  6E30               	movwf	LCDclear@i_521+1,c
 13027  003EF8  0E00               	movlw	0
 13028  003EFA  6E2F               	movwf	LCDclear@i_521,c
 13029  003EFC                     l3641:
 13030  003EFC  BE30               	btfsc	LCDclear@i_521+1,7,c
 13031  003EFE  D006               	goto	l3645
 13032  003F00  5030               	movf	LCDclear@i_521+1,w,c
 13033  003F02  E127               	bnz	l277
 13034  003F04  0E08               	movlw	8
 13035  003F06  5C2F               	subwf	LCDclear@i_521,w,c
 13036  003F08  B0D8               	btfsc	status,0,c
 13037  003F0A  0012               	return	
 13038  003F0C                     l3645:
 13039                           
 13040                           ;LCDgraphic.c: 611: {
 13041                           ;LCDgraphic.c: 612: LCDpage(2,i);
 13042  003F0C  C02F  F00F         	movff	LCDclear@i_521,LCDpage@page
 13043  003F10  0E02               	movlw	2
 13044  003F12  EC89  F01D         	call	_LCDpage
 13045                           
 13046                           ;LCDgraphic.c: 613: for(int j = 0; j < 13; j++)
 13047  003F16  0E00               	movlw	0
 13048  003F18  6E32               	movwf	LCDclear@j+1,c
 13049  003F1A  0E00               	movlw	0
 13050  003F1C  6E31               	movwf	LCDclear@j,c
 13051  003F1E                     l3649:
 13052  003F1E  BE32               	btfsc	LCDclear@j+1,7,c
 13053  003F20  D006               	goto	l3653
 13054  003F22  5032               	movf	LCDclear@j+1,w,c
 13055  003F24  E113               	bnz	l3661
 13056  003F26  0E0D               	movlw	13
 13057  003F28  5C31               	subwf	LCDclear@j,w,c
 13058  003F2A  B0D8               	btfsc	status,0,c
 13059  003F2C  D00F               	goto	l3661
 13060  003F2E                     l3653:
 13061                           
 13062                           ;LCDgraphic.c: 614: {
 13063                           ;LCDgraphic.c: 615: LCDy(2,j*5);
 13064  003F2E  5031               	movf	LCDclear@j,w,c
 13065  003F30  0D05               	mullw	5
 13066  003F32  CFF3 F005          	movff	prodl,LCDy@value
 13067  003F36  0E02               	movlw	2
 13068  003F38  ECDA  F01D         	call	_LCDy
 13069                           
 13070                           ;LCDgraphic.c: 616: LCDchar(' ',0);
 13071  003F3C  0E00               	movlw	0
 13072  003F3E  6E15               	movwf	LCDchar@position,c
 13073  003F40  0E20               	movlw	32
 13074  003F42  EC6C  F029         	call	_LCDchar
 13075  003F46  4A31               	infsnz	LCDclear@j,f,c
 13076  003F48  2A32               	incf	LCDclear@j+1,f,c
 13077  003F4A  D7E9               	goto	l3649
 13078  003F4C                     l3661:
 13079  003F4C  4A2F               	infsnz	LCDclear@i_521,f,c
 13080  003F4E  2A30               	incf	LCDclear@i_521+1,f,c
 13081  003F50  D7D5               	goto	l3641
 13082  003F52                     l277:
 13083  003F52  0012               	return		;funcret
 13084  003F54                     __end_of_LCDclear:
 13085                           	opt stack 0
 13086                           tblptru	equ	0xFF8
 13087                           tblptrh	equ	0xFF7
 13088                           tblptrl	equ	0xFF6
 13089                           tablat	equ	0xFF5
 13090                           prodh	equ	0xFF4
 13091                           prodl	equ	0xFF3
 13092                           postinc0	equ	0xFEE
 13093                           wreg	equ	0xFE8
 13094                           indf1	equ	0xFE7
 13095                           postdec1	equ	0xFE5
 13096                           fsr1h	equ	0xFE2
 13097                           fsr1l	equ	0xFE1
 13098                           indf2	equ	0xFDF
 13099                           postinc2	equ	0xFDE
 13100                           postdec2	equ	0xFDD
 13101                           fsr2h	equ	0xFDA
 13102                           fsr2l	equ	0xFD9
 13103                           status	equ	0xFD8
 13104                           
 13105 ;; *************** function _LCDchar *****************
 13106 ;; Defined at:
 13107 ;;		line 494 in file "src/LCDgraphic.c"
 13108 ;; Parameters:    Size  Location     Type
 13109 ;;  c               1    wreg     unsigned char 
 13110 ;;  position        1   20[COMRAM] unsigned char 
 13111 ;; Auto vars:     Size  Location     Type
 13112 ;;  c               1   28[COMRAM] unsigned char 
 13113 ;;  i               2   39[COMRAM] int 
 13114 ;;  i               2   37[COMRAM] int 
 13115 ;;  i               2   35[COMRAM] int 
 13116 ;;  i               2   33[COMRAM] int 
 13117 ;;  i               2   31[COMRAM] int 
 13118 ;;  char_index      2   42[COMRAM] int 
 13119 ;;  index           2   29[COMRAM] int 
 13120 ;;  tmp             1   41[COMRAM] unsigned char 
 13121 ;; Return value:  Size  Location     Type
 13122 ;;                  1    wreg      unsigned char 
 13123 ;; Registers used:
 13124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13125 ;; Tracked objects:
 13126 ;;		On entry : 0/0
 13127 ;;		On exit  : 0/0
 13128 ;;		Unchanged: 0/0
 13129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13130 ;;      Params:         1       0       0       0       0       0       0       0       0
 13131 ;;      Locals:        16       0       0       0       0       0       0       0       0
 13132 ;;      Temps:          7       0       0       0       0       0       0       0       0
 13133 ;;      Totals:        24       0       0       0       0       0       0       0       0
 13134 ;;Total ram usage:       24 bytes
 13135 ;; Hardware stack levels used:    1
 13136 ;; Hardware stack levels required when called:    4
 13137 ;; This function calls:
 13138 ;;		_LCDcmd
 13139 ;;		_LCDpage
 13140 ;;		_LCDy
 13141 ;;		___wmul
 13142 ;;		__lcd_waitbusy
 13143 ;; This function is called by:
 13144 ;;		_LCDclear
 13145 ;;		_LCDstring
 13146 ;; This function uses a non-reentrant model
 13147 ;;
 13148                           
 13149                           	psect	text34
 13150  0052D8                     __ptext34:
 13151                           	opt stack 0
 13152  0052D8                     _LCDchar:
 13153                           	opt stack 25
 13154                           
 13155                           ;incstack = 0
 13156                           ;LCDchar@c stored from wreg
 13157  0052D8  6E1D               	movwf	LCDchar@c,c
 13158                           
 13159                           ;LCDgraphic.c: 496: if (position < 0 || position > 3)
 13160  0052DA  0E03               	movlw	3
 13161  0052DC  6415               	cpfsgt	LCDchar@position,c
 13162  0052DE  D001               	goto	l3309
 13163  0052E0  0012               	return	
 13164  0052E2                     l3309:
 13165                           
 13166                           ;LCDgraphic.c: 499: }
 13167                           ;LCDgraphic.c: 501: int index = c-32;
 13168  0052E2  0EE0               	movlw	224
 13169  0052E4  241D               	addwf	LCDchar@c,w,c
 13170  0052E6  6E1E               	movwf	LCDchar@index,c
 13171  0052E8  6A1F               	clrf	LCDchar@index+1,c
 13172  0052EA  0EFF               	movlw	255
 13173  0052EC  221F               	addwfc	LCDchar@index+1,f,c
 13174                           
 13175                           ;LCDgraphic.c: 502: int char_index;
 13176                           ;LCDgraphic.c: 503: unsigned char tmp;
 13177                           ;LCDgraphic.c: 505: _lcd_waitbusy();
 13178  0052EE  EC50  F01C         	call	__lcd_waitbusy	;wreg free
 13179                           
 13180                           ;LCDgraphic.c: 507: switch (position)
 13181  0052F2  D220               	goto	l3425
 13182  0052F4                     l3313:
 13183                           
 13184                           ;LCDgraphic.c: 510: if(selected_side==0)
 13185  0052F4  0102               	movlb	2	; () banked
 13186  0052F6  5129               	movf	_selected_side& (0+255),w,b
 13187  0052F8  0102               	movlb	2	; () banked
 13188  0052FA  112A               	iorwf	(_selected_side+1)& (0+255),w,b
 13189  0052FC  A4D8               	btfss	status,2,c
 13190  0052FE  D00F               	goto	l3317
 13191                           
 13192                           ; BSR set to: 2
 13193                           ;LCDgraphic.c: 511: {
 13194                           ;LCDgraphic.c: 512: char_index=(128*curr_page)+curr_column;
 13195  005300  C05E  F016         	movff	_curr_page,??_LCDchar
 13196  005304  C05F  F017         	movff	_curr_page+1,??_LCDchar+1
 13197  005308  0E07               	movlw	7
 13198  00530A                     u3205:
 13199  00530A  90D8               	bcf	status,0,c
 13200  00530C  3616               	rlcf	??_LCDchar,f,c
 13201  00530E  3617               	rlcf	??_LCDchar+1,f,c
 13202  005310  2EE8               	decfsz	wreg,f,c
 13203  005312  D7FB               	goto	u3205
 13204  005314  505C               	movf	_curr_column,w,c
 13205  005316  2416               	addwf	??_LCDchar,w,c
 13206  005318  6E2B               	movwf	LCDchar@char_index,c
 13207  00531A  505D               	movf	_curr_column+1,w,c
 13208  00531C  D012               	goto	L20
 13209  00531E                     l3317:
 13210                           
 13211                           ; BSR set to: 2
 13212                           ;LCDgraphic.c: 515: else
 13213                           ;LCDgraphic.c: 516: {
 13214                           ;LCDgraphic.c: 517: char_index=(128*curr_page)+64+curr_column;
 13215  00531E  C05E  F016         	movff	_curr_page,??_LCDchar
 13216  005322  C05F  F017         	movff	_curr_page+1,??_LCDchar+1
 13217  005326  0E07               	movlw	7
 13218  005328                     u3215:
 13219  005328  90D8               	bcf	status,0,c
 13220  00532A  3616               	rlcf	??_LCDchar,f,c
 13221  00532C  3617               	rlcf	??_LCDchar+1,f,c
 13222  00532E  2EE8               	decfsz	wreg,f,c
 13223  005330  D7FB               	goto	u3215
 13224  005332  505C               	movf	_curr_column,w,c
 13225  005334  2616               	addwf	??_LCDchar,f,c
 13226  005336  505D               	movf	_curr_column+1,w,c
 13227  005338  2217               	addwfc	??_LCDchar+1,f,c
 13228  00533A  0E40               	movlw	64
 13229  00533C  2416               	addwf	??_LCDchar,w,c
 13230  00533E  6E2B               	movwf	LCDchar@char_index,c
 13231  005340  0E00               	movlw	0
 13232  005342                     L20:
 13233  005342  2017               	addwfc	??_LCDchar+1,w,c
 13234  005344  6E2C               	movwf	LCDchar@char_index+1,c
 13235                           
 13236                           ; BSR set to: 2
 13237                           ;LCDgraphic.c: 518: }
 13238                           ;LCDgraphic.c: 520: LATCbits.LATC2=1;
 13239                           
 13240                           ; BSR set to: 2
 13241  005346  848B               	bsf	3979,2,c	;volatile
 13242                           
 13243                           ; BSR set to: 2
 13244                           ;LCDgraphic.c: 521: LATCbits.LATC1=0;
 13245  005348  928B               	bcf	3979,1,c	;volatile
 13246                           
 13247                           ; BSR set to: 2
 13248                           ;LCDgraphic.c: 522: for (int i=0; i<5; i++)
 13249  00534A  0E00               	movlw	0
 13250  00534C  6E21               	movwf	LCDchar@i+1,c
 13251  00534E  0E00               	movlw	0
 13252  005350  6E20               	movwf	LCDchar@i,c
 13253                           
 13254                           ; BSR set to: 2
 13255  005352  BE21               	btfsc	LCDchar@i+1,7,c
 13256  005354  D008               	goto	l3329
 13257  005356  5021               	movf	LCDchar@i+1,w,c
 13258  005358  E105               	bnz	u3220
 13259  00535A  0E05               	movlw	5
 13260  00535C  5C20               	subwf	LCDchar@i,w,c
 13261  00535E  B0D8               	btfsc	status,0,c
 13262  005360  0012               	return	
 13263  005362  D001               	goto	l3329
 13264  005364                     u3220:
 13265                           
 13266                           ; BSR set to: 2
 13267  005364  0012               	return	
 13268  005366                     l3329:
 13269                           
 13270                           ;LCDgraphic.c: 523: {
 13271                           ;LCDgraphic.c: 524: tmp = pixels[char_index+i] = pixels[char_index+i] | pic[index][i];
 13272  005366  5020               	movf	LCDchar@i,w,c
 13273  005368  242B               	addwf	LCDchar@char_index,w,c
 13274  00536A  6E16               	movwf	??_LCDchar& (0+255),c
 13275  00536C  5021               	movf	LCDchar@i+1,w,c
 13276  00536E  202C               	addwfc	LCDchar@char_index+1,w,c
 13277  005370  6E17               	movwf	(??_LCDchar+1)& (0+255),c
 13278  005372  0EFF               	movlw	low _pixels
 13279  005374  2416               	addwf	??_LCDchar,w,c
 13280  005376  6ED9               	movwf	fsr2l,c
 13281  005378  0E03               	movlw	high _pixels
 13282  00537A  2017               	addwfc	??_LCDchar+1,w,c
 13283  00537C  6EDA               	movwf	fsr2h,c
 13284  00537E  C01E  F00F         	movff	LCDchar@index,___wmul@multiplier
 13285  005382  C01F  F010         	movff	LCDchar@index+1,___wmul@multiplier+1
 13286  005386  0E00               	movlw	0
 13287  005388  6E12               	movwf	___wmul@multiplicand+1,c
 13288  00538A  0E05               	movlw	5
 13289  00538C  6E11               	movwf	___wmul@multiplicand,c
 13290  00538E  ECAD  F01C         	call	___wmul	;wreg free
 13291  005392  0E5B               	movlw	low _pic
 13292  005394  6E18               	movwf	(??_LCDchar+2)& (0+255),c
 13293  005396  0E79               	movlw	high _pic
 13294  005398  6E19               	movwf	(??_LCDchar+3)& (0+255),c
 13295  00539A  500F               	movf	?___wmul,w,c
 13296  00539C  2618               	addwf	??_LCDchar+2,f,c
 13297  00539E  5010               	movf	?___wmul+1,w,c
 13298  0053A0  2219               	addwfc	??_LCDchar+3,f,c
 13299  0053A2  5020               	movf	LCDchar@i,w,c
 13300  0053A4  2618               	addwf	??_LCDchar+2,f,c
 13301  0053A6  5021               	movf	LCDchar@i+1,w,c
 13302  0053A8  2219               	addwfc	??_LCDchar+3,f,c
 13303  0053AA  C018  FFF6         	movff	??_LCDchar+2,tblptrl
 13304  0053AE  C019  FFF7         	movff	??_LCDchar+3,tblptrh
 13305  0053B2                     	if	0	;tblptru may be non-zero
 13306  0053B2                     	endif
 13307  0053B2                     	if	0	;tblptru may be non-zero
 13308  0053B2                     	endif
 13309  0053B2  0008               	tblrd		*
 13310  0053B4  CFF5 F01A          	movff	tablat,??_LCDchar+4
 13311  0053B8  5020               	movf	LCDchar@i,w,c
 13312  0053BA  242B               	addwf	LCDchar@char_index,w,c
 13313  0053BC  6E1B               	movwf	(??_LCDchar+5)& (0+255),c
 13314  0053BE  5021               	movf	LCDchar@i+1,w,c
 13315  0053C0  202C               	addwfc	LCDchar@char_index+1,w,c
 13316  0053C2  6E1C               	movwf	(??_LCDchar+6)& (0+255),c
 13317  0053C4  0EFF               	movlw	low _pixels
 13318  0053C6  241B               	addwf	??_LCDchar+5,w,c
 13319  0053C8  6EE1               	movwf	fsr1l,c
 13320  0053CA  0E03               	movlw	high _pixels
 13321  0053CC  201C               	addwfc	??_LCDchar+6,w,c
 13322  0053CE  6EE2               	movwf	fsr1h,c
 13323  0053D0  50E7               	movf	indf1,w,c
 13324  0053D2  101A               	iorwf	??_LCDchar+4,w,c
 13325  0053D4  6EDF               	movwf	indf2,c
 13326  0053D6  50DF               	movf	indf2,w,c
 13327  0053D8  6E2A               	movwf	LCDchar@tmp,c
 13328                           
 13329                           ;LCDgraphic.c: 525: LCDcmd(tmp);
 13330  0053DA  502A               	movf	LCDchar@tmp,w,c
 13331  0053DC  EC43  F01C         	call	_LCDcmd
 13332  0053E0  4A20               	infsnz	LCDchar@i,f,c
 13333  0053E2  2A21               	incf	LCDchar@i+1,f,c
 13334  0053E4  BE21               	btfsc	LCDchar@i+1,7,c
 13335  0053E6  D7BF               	goto	l3329
 13336  0053E8  5021               	movf	LCDchar@i+1,w,c
 13337  0053EA  E101               	bnz	u3230
 13338  0053EC  D7B6               	goto	L21
 13339  0053EE                     u3230:
 13340                           
 13341                           ;LCDgraphic.c: 526: }
 13342                           ;LCDgraphic.c: 528: break;
 13343  0053EE  0012               	return	
 13344  0053F0                     l3337:
 13345                           
 13346                           ;LCDgraphic.c: 531: LCDpage(0,curr_page);
 13347  0053F0  C05E  F00F         	movff	_curr_page,LCDpage@page
 13348  0053F4  0E00               	movlw	0
 13349  0053F6  EC89  F01D         	call	_LCDpage
 13350                           
 13351                           ;LCDgraphic.c: 532: LCDy(0,1);
 13352  0053FA  0E01               	movlw	1
 13353  0053FC  6E05               	movwf	LCDy@value,c
 13354  0053FE  0E00               	movlw	0
 13355  005400  ECDA  F01D         	call	_LCDy
 13356                           
 13357                           ;LCDgraphic.c: 534: char_index=(128*curr_page)+curr_column;
 13358  005404  C05E  F016         	movff	_curr_page,??_LCDchar
 13359  005408  C05F  F017         	movff	_curr_page+1,??_LCDchar+1
 13360  00540C  0E07               	movlw	7
 13361  00540E                     u3245:
 13362  00540E  90D8               	bcf	status,0,c
 13363  005410  3616               	rlcf	??_LCDchar,f,c
 13364  005412  3617               	rlcf	??_LCDchar+1,f,c
 13365  005414  2EE8               	decfsz	wreg,f,c
 13366  005416  D7FB               	goto	u3245
 13367  005418  505C               	movf	_curr_column,w,c
 13368  00541A  2416               	addwf	??_LCDchar,w,c
 13369  00541C  6E2B               	movwf	LCDchar@char_index,c
 13370  00541E  505D               	movf	_curr_column+1,w,c
 13371  005420  2017               	addwfc	??_LCDchar+1,w,c
 13372  005422  6E2C               	movwf	LCDchar@char_index+1,c
 13373                           
 13374                           ;LCDgraphic.c: 536: LATCbits.LATC2=1;
 13375  005424  848B               	bsf	3979,2,c	;volatile
 13376                           
 13377                           ;LCDgraphic.c: 537: LATCbits.LATC1=0;
 13378  005426  928B               	bcf	3979,1,c	;volatile
 13379                           
 13380                           ;LCDgraphic.c: 538: for (int i=0; i<5; i++)
 13381  005428  0E00               	movlw	0
 13382  00542A  6E23               	movwf	LCDchar@i_515+1,c
 13383  00542C  0E00               	movlw	0
 13384  00542E  6E22               	movwf	LCDchar@i_515,c
 13385  005430  BE23               	btfsc	LCDchar@i_515+1,7,c
 13386  005432  D008               	goto	l3351
 13387  005434  5023               	movf	LCDchar@i_515+1,w,c
 13388  005436  E105               	bnz	u3250
 13389  005438  0E05               	movlw	5
 13390  00543A  5C22               	subwf	LCDchar@i_515,w,c
 13391  00543C  B0D8               	btfsc	status,0,c
 13392  00543E  0012               	return	
 13393  005440  D001               	goto	l3351
 13394  005442                     u3250:
 13395  005442  0012               	return	
 13396  005444                     l3351:
 13397                           
 13398                           ;LCDgraphic.c: 539: {
 13399                           ;LCDgraphic.c: 540: tmp = pixels[char_index+i] = pixels[char_index+i] | pic[index][i];
 13400  005444  5022               	movf	LCDchar@i_515,w,c
 13401  005446  242B               	addwf	LCDchar@char_index,w,c
 13402  005448  6E16               	movwf	??_LCDchar& (0+255),c
 13403  00544A  5023               	movf	LCDchar@i_515+1,w,c
 13404  00544C  202C               	addwfc	LCDchar@char_index+1,w,c
 13405  00544E  6E17               	movwf	(??_LCDchar+1)& (0+255),c
 13406  005450  0EFF               	movlw	low _pixels
 13407  005452  2416               	addwf	??_LCDchar,w,c
 13408  005454  6ED9               	movwf	fsr2l,c
 13409  005456  0E03               	movlw	high _pixels
 13410  005458  2017               	addwfc	??_LCDchar+1,w,c
 13411  00545A  6EDA               	movwf	fsr2h,c
 13412  00545C  C01E  F00F         	movff	LCDchar@index,___wmul@multiplier
 13413  005460  C01F  F010         	movff	LCDchar@index+1,___wmul@multiplier+1
 13414  005464  0E00               	movlw	0
 13415  005466  6E12               	movwf	___wmul@multiplicand+1,c
 13416  005468  0E05               	movlw	5
 13417  00546A  6E11               	movwf	___wmul@multiplicand,c
 13418  00546C  ECAD  F01C         	call	___wmul	;wreg free
 13419  005470  0E5B               	movlw	low _pic
 13420  005472  6E18               	movwf	(??_LCDchar+2)& (0+255),c
 13421  005474  0E79               	movlw	high _pic
 13422  005476  6E19               	movwf	(??_LCDchar+3)& (0+255),c
 13423  005478  500F               	movf	?___wmul,w,c
 13424  00547A  2618               	addwf	??_LCDchar+2,f,c
 13425  00547C  5010               	movf	?___wmul+1,w,c
 13426  00547E  2219               	addwfc	??_LCDchar+3,f,c
 13427  005480  5022               	movf	LCDchar@i_515,w,c
 13428  005482  2618               	addwf	??_LCDchar+2,f,c
 13429  005484  5023               	movf	LCDchar@i_515+1,w,c
 13430  005486  2219               	addwfc	??_LCDchar+3,f,c
 13431  005488  C018  FFF6         	movff	??_LCDchar+2,tblptrl
 13432  00548C  C019  FFF7         	movff	??_LCDchar+3,tblptrh
 13433  005490                     	if	0	;tblptru may be non-zero
 13434  005490                     	endif
 13435  005490                     	if	0	;tblptru may be non-zero
 13436  005490                     	endif
 13437  005490  0008               	tblrd		*
 13438  005492  CFF5 F01A          	movff	tablat,??_LCDchar+4
 13439  005496  5022               	movf	LCDchar@i_515,w,c
 13440  005498  242B               	addwf	LCDchar@char_index,w,c
 13441  00549A  6E1B               	movwf	(??_LCDchar+5)& (0+255),c
 13442  00549C  5023               	movf	LCDchar@i_515+1,w,c
 13443  00549E  202C               	addwfc	LCDchar@char_index+1,w,c
 13444  0054A0  6E1C               	movwf	(??_LCDchar+6)& (0+255),c
 13445  0054A2  0EFF               	movlw	low _pixels
 13446  0054A4  241B               	addwf	??_LCDchar+5,w,c
 13447  0054A6  6EE1               	movwf	fsr1l,c
 13448  0054A8  0E03               	movlw	high _pixels
 13449  0054AA  201C               	addwfc	??_LCDchar+6,w,c
 13450  0054AC  6EE2               	movwf	fsr1h,c
 13451  0054AE  50E7               	movf	indf1,w,c
 13452  0054B0  101A               	iorwf	??_LCDchar+4,w,c
 13453  0054B2  6EDF               	movwf	indf2,c
 13454  0054B4  50DF               	movf	indf2,w,c
 13455  0054B6  6E2A               	movwf	LCDchar@tmp,c
 13456                           
 13457                           ;LCDgraphic.c: 541: LCDcmd(tmp);
 13458  0054B8  502A               	movf	LCDchar@tmp,w,c
 13459  0054BA  EC43  F01C         	call	_LCDcmd
 13460  0054BE  4A22               	infsnz	LCDchar@i_515,f,c
 13461  0054C0  2A23               	incf	LCDchar@i_515+1,f,c
 13462  0054C2  BE23               	btfsc	LCDchar@i_515+1,7,c
 13463  0054C4  D7BF               	goto	l3351
 13464  0054C6  5023               	movf	LCDchar@i_515+1,w,c
 13465  0054C8  E101               	bnz	u3260
 13466  0054CA  D7B6               	goto	L22
 13467  0054CC                     u3260:
 13468                           
 13469                           ;LCDgraphic.c: 542: }
 13470                           ;LCDgraphic.c: 543: break;
 13471  0054CC  0012               	return	
 13472  0054CE                     l3359:
 13473                           
 13474                           ;LCDgraphic.c: 546: LCDpage(0,curr_page);
 13475  0054CE  C05E  F00F         	movff	_curr_page,LCDpage@page
 13476  0054D2  0E00               	movlw	0
 13477  0054D4  EC89  F01D         	call	_LCDpage
 13478                           
 13479                           ;LCDgraphic.c: 547: LCDy(0,61);
 13480  0054D8  0E3D               	movlw	61
 13481  0054DA  6E05               	movwf	LCDy@value,c
 13482  0054DC  0E00               	movlw	0
 13483  0054DE  ECDA  F01D         	call	_LCDy
 13484                           
 13485                           ;LCDgraphic.c: 549: char_index=(128*curr_page)+curr_column;
 13486  0054E2  C05E  F016         	movff	_curr_page,??_LCDchar
 13487  0054E6  C05F  F017         	movff	_curr_page+1,??_LCDchar+1
 13488  0054EA  0E07               	movlw	7
 13489  0054EC                     u3275:
 13490  0054EC  90D8               	bcf	status,0,c
 13491  0054EE  3616               	rlcf	??_LCDchar,f,c
 13492  0054F0  3617               	rlcf	??_LCDchar+1,f,c
 13493  0054F2  2EE8               	decfsz	wreg,f,c
 13494  0054F4  D7FB               	goto	u3275
 13495  0054F6  505C               	movf	_curr_column,w,c
 13496  0054F8  2416               	addwf	??_LCDchar,w,c
 13497  0054FA  6E2B               	movwf	LCDchar@char_index,c
 13498  0054FC  505D               	movf	_curr_column+1,w,c
 13499  0054FE  2017               	addwfc	??_LCDchar+1,w,c
 13500  005500  6E2C               	movwf	LCDchar@char_index+1,c
 13501                           
 13502                           ;LCDgraphic.c: 551: LATCbits.LATC2=1;
 13503  005502  848B               	bsf	3979,2,c	;volatile
 13504                           
 13505                           ;LCDgraphic.c: 552: LATCbits.LATC1=0;
 13506  005504  928B               	bcf	3979,1,c	;volatile
 13507                           
 13508                           ;LCDgraphic.c: 553: for (int i=0; i<3; i++)
 13509  005506  0E00               	movlw	0
 13510  005508  6E25               	movwf	LCDchar@i_516+1,c
 13511  00550A  0E00               	movlw	0
 13512  00550C  6E24               	movwf	LCDchar@i_516,c
 13513  00550E                     l3369:
 13514  00550E  BE25               	btfsc	LCDchar@i_516+1,7,c
 13515  005510  D006               	goto	l3373
 13516  005512  5025               	movf	LCDchar@i_516+1,w,c
 13517  005514  E144               	bnz	l3381
 13518  005516  0E03               	movlw	3
 13519  005518  5C24               	subwf	LCDchar@i_516,w,c
 13520  00551A  B0D8               	btfsc	status,0,c
 13521  00551C  D040               	goto	l3381
 13522  00551E                     l3373:
 13523                           
 13524                           ;LCDgraphic.c: 554: {
 13525                           ;LCDgraphic.c: 555: tmp = pixels[char_index+i] = pixels[char_index+i] | pic[index][i];
 13526  00551E  5024               	movf	LCDchar@i_516,w,c
 13527  005520  242B               	addwf	LCDchar@char_index,w,c
 13528  005522  6E16               	movwf	??_LCDchar& (0+255),c
 13529  005524  5025               	movf	LCDchar@i_516+1,w,c
 13530  005526  202C               	addwfc	LCDchar@char_index+1,w,c
 13531  005528  6E17               	movwf	(??_LCDchar+1)& (0+255),c
 13532  00552A  0EFF               	movlw	low _pixels
 13533  00552C  2416               	addwf	??_LCDchar,w,c
 13534  00552E  6ED9               	movwf	fsr2l,c
 13535  005530  0E03               	movlw	high _pixels
 13536  005532  2017               	addwfc	??_LCDchar+1,w,c
 13537  005534  6EDA               	movwf	fsr2h,c
 13538  005536  C01E  F00F         	movff	LCDchar@index,___wmul@multiplier
 13539  00553A  C01F  F010         	movff	LCDchar@index+1,___wmul@multiplier+1
 13540  00553E  0E00               	movlw	0
 13541  005540  6E12               	movwf	___wmul@multiplicand+1,c
 13542  005542  0E05               	movlw	5
 13543  005544  6E11               	movwf	___wmul@multiplicand,c
 13544  005546  ECAD  F01C         	call	___wmul	;wreg free
 13545  00554A  0E5B               	movlw	low _pic
 13546  00554C  6E18               	movwf	(??_LCDchar+2)& (0+255),c
 13547  00554E  0E79               	movlw	high _pic
 13548  005550  6E19               	movwf	(??_LCDchar+3)& (0+255),c
 13549  005552  500F               	movf	?___wmul,w,c
 13550  005554  2618               	addwf	??_LCDchar+2,f,c
 13551  005556  5010               	movf	?___wmul+1,w,c
 13552  005558  2219               	addwfc	??_LCDchar+3,f,c
 13553  00555A  5024               	movf	LCDchar@i_516,w,c
 13554  00555C  2618               	addwf	??_LCDchar+2,f,c
 13555  00555E  5025               	movf	LCDchar@i_516+1,w,c
 13556  005560  2219               	addwfc	??_LCDchar+3,f,c
 13557  005562  C018  FFF6         	movff	??_LCDchar+2,tblptrl
 13558  005566  C019  FFF7         	movff	??_LCDchar+3,tblptrh
 13559  00556A                     	if	0	;tblptru may be non-zero
 13560  00556A                     	endif
 13561  00556A                     	if	0	;tblptru may be non-zero
 13562  00556A                     	endif
 13563  00556A  0008               	tblrd		*
 13564  00556C  CFF5 F01A          	movff	tablat,??_LCDchar+4
 13565  005570  5024               	movf	LCDchar@i_516,w,c
 13566  005572  242B               	addwf	LCDchar@char_index,w,c
 13567  005574  6E1B               	movwf	(??_LCDchar+5)& (0+255),c
 13568  005576  5025               	movf	LCDchar@i_516+1,w,c
 13569  005578  202C               	addwfc	LCDchar@char_index+1,w,c
 13570  00557A  6E1C               	movwf	(??_LCDchar+6)& (0+255),c
 13571  00557C  0EFF               	movlw	low _pixels
 13572  00557E  241B               	addwf	??_LCDchar+5,w,c
 13573  005580  6EE1               	movwf	fsr1l,c
 13574  005582  0E03               	movlw	high _pixels
 13575  005584  201C               	addwfc	??_LCDchar+6,w,c
 13576  005586  6EE2               	movwf	fsr1h,c
 13577  005588  50E7               	movf	indf1,w,c
 13578  00558A  101A               	iorwf	??_LCDchar+4,w,c
 13579  00558C  6EDF               	movwf	indf2,c
 13580  00558E  50DF               	movf	indf2,w,c
 13581  005590  6E2A               	movwf	LCDchar@tmp,c
 13582                           
 13583                           ;LCDgraphic.c: 556: LCDcmd(tmp);
 13584  005592  502A               	movf	LCDchar@tmp,w,c
 13585  005594  EC43  F01C         	call	_LCDcmd
 13586  005598  4A24               	infsnz	LCDchar@i_516,f,c
 13587  00559A  2A25               	incf	LCDchar@i_516+1,f,c
 13588  00559C  D7B8               	goto	l3369
 13589  00559E                     l3381:
 13590                           
 13591                           ;LCDgraphic.c: 557: }
 13592                           ;LCDgraphic.c: 559: LCDpage(1,curr_page);
 13593  00559E  C05E  F00F         	movff	_curr_page,LCDpage@page
 13594  0055A2  0E01               	movlw	1
 13595  0055A4  EC89  F01D         	call	_LCDpage
 13596                           
 13597                           ;LCDgraphic.c: 560: LCDy(1,0);
 13598  0055A8  0E00               	movlw	0
 13599  0055AA  6E05               	movwf	LCDy@value,c
 13600  0055AC  0E01               	movlw	1
 13601  0055AE  ECDA  F01D         	call	_LCDy
 13602                           
 13603                           ;LCDgraphic.c: 563: LATCbits.LATC2=1;
 13604  0055B2  848B               	bsf	3979,2,c	;volatile
 13605                           
 13606                           ;LCDgraphic.c: 564: LATCbits.LATC1=0;
 13607  0055B4  928B               	bcf	3979,1,c	;volatile
 13608                           
 13609                           ;LCDgraphic.c: 565: for (int i=3; i<5; i++)
 13610  0055B6  0E00               	movlw	0
 13611  0055B8  6E27               	movwf	LCDchar@i_517+1,c
 13612  0055BA  0E03               	movlw	3
 13613  0055BC  6E26               	movwf	LCDchar@i_517,c
 13614  0055BE  BE27               	btfsc	LCDchar@i_517+1,7,c
 13615  0055C0  D008               	goto	l3393
 13616  0055C2  5027               	movf	LCDchar@i_517+1,w,c
 13617  0055C4  E105               	bnz	u3300
 13618  0055C6  0E05               	movlw	5
 13619  0055C8  5C26               	subwf	LCDchar@i_517,w,c
 13620  0055CA  B0D8               	btfsc	status,0,c
 13621  0055CC  0012               	return	
 13622  0055CE  D001               	goto	l3393
 13623  0055D0                     u3300:
 13624  0055D0  0012               	return	
 13625  0055D2                     l3393:
 13626                           
 13627                           ;LCDgraphic.c: 566: {
 13628                           ;LCDgraphic.c: 567: tmp = pixels[char_index+i] = pixels[char_index+i] | pic[index][i];
 13629  0055D2  5026               	movf	LCDchar@i_517,w,c
 13630  0055D4  242B               	addwf	LCDchar@char_index,w,c
 13631  0055D6  6E16               	movwf	??_LCDchar& (0+255),c
 13632  0055D8  5027               	movf	LCDchar@i_517+1,w,c
 13633  0055DA  202C               	addwfc	LCDchar@char_index+1,w,c
 13634  0055DC  6E17               	movwf	(??_LCDchar+1)& (0+255),c
 13635  0055DE  0EFF               	movlw	low _pixels
 13636  0055E0  2416               	addwf	??_LCDchar,w,c
 13637  0055E2  6ED9               	movwf	fsr2l,c
 13638  0055E4  0E03               	movlw	high _pixels
 13639  0055E6  2017               	addwfc	??_LCDchar+1,w,c
 13640  0055E8  6EDA               	movwf	fsr2h,c
 13641  0055EA  C01E  F00F         	movff	LCDchar@index,___wmul@multiplier
 13642  0055EE  C01F  F010         	movff	LCDchar@index+1,___wmul@multiplier+1
 13643  0055F2  0E00               	movlw	0
 13644  0055F4  6E12               	movwf	___wmul@multiplicand+1,c
 13645  0055F6  0E05               	movlw	5
 13646  0055F8  6E11               	movwf	___wmul@multiplicand,c
 13647  0055FA  ECAD  F01C         	call	___wmul	;wreg free
 13648  0055FE  0E5B               	movlw	low _pic
 13649  005600  6E18               	movwf	(??_LCDchar+2)& (0+255),c
 13650  005602  0E79               	movlw	high _pic
 13651  005604  6E19               	movwf	(??_LCDchar+3)& (0+255),c
 13652  005606  500F               	movf	?___wmul,w,c
 13653  005608  2618               	addwf	??_LCDchar+2,f,c
 13654  00560A  5010               	movf	?___wmul+1,w,c
 13655  00560C  2219               	addwfc	??_LCDchar+3,f,c
 13656  00560E  5026               	movf	LCDchar@i_517,w,c
 13657  005610  2618               	addwf	??_LCDchar+2,f,c
 13658  005612  5027               	movf	LCDchar@i_517+1,w,c
 13659  005614  2219               	addwfc	??_LCDchar+3,f,c
 13660  005616  C018  FFF6         	movff	??_LCDchar+2,tblptrl
 13661  00561A  C019  FFF7         	movff	??_LCDchar+3,tblptrh
 13662  00561E                     	if	0	;tblptru may be non-zero
 13663  00561E                     	endif
 13664  00561E                     	if	0	;tblptru may be non-zero
 13665  00561E                     	endif
 13666  00561E  0008               	tblrd		*
 13667  005620  CFF5 F01A          	movff	tablat,??_LCDchar+4
 13668  005624  5026               	movf	LCDchar@i_517,w,c
 13669  005626  242B               	addwf	LCDchar@char_index,w,c
 13670  005628  6E1B               	movwf	(??_LCDchar+5)& (0+255),c
 13671  00562A  5027               	movf	LCDchar@i_517+1,w,c
 13672  00562C  202C               	addwfc	LCDchar@char_index+1,w,c
 13673  00562E  6E1C               	movwf	(??_LCDchar+6)& (0+255),c
 13674  005630  0EFF               	movlw	low _pixels
 13675  005632  241B               	addwf	??_LCDchar+5,w,c
 13676  005634  6EE1               	movwf	fsr1l,c
 13677  005636  0E03               	movlw	high _pixels
 13678  005638  201C               	addwfc	??_LCDchar+6,w,c
 13679  00563A  6EE2               	movwf	fsr1h,c
 13680  00563C  50E7               	movf	indf1,w,c
 13681  00563E  101A               	iorwf	??_LCDchar+4,w,c
 13682  005640  6EDF               	movwf	indf2,c
 13683  005642  50DF               	movf	indf2,w,c
 13684  005644  6E2A               	movwf	LCDchar@tmp,c
 13685                           
 13686                           ;LCDgraphic.c: 568: LCDcmd(tmp);
 13687  005646  502A               	movf	LCDchar@tmp,w,c
 13688  005648  EC43  F01C         	call	_LCDcmd
 13689  00564C  4A26               	infsnz	LCDchar@i_517,f,c
 13690  00564E  2A27               	incf	LCDchar@i_517+1,f,c
 13691  005650  BE27               	btfsc	LCDchar@i_517+1,7,c
 13692  005652  D7BF               	goto	l3393
 13693  005654  5027               	movf	LCDchar@i_517+1,w,c
 13694  005656  E101               	bnz	u3310
 13695  005658  D7B6               	goto	L23
 13696  00565A                     u3310:
 13697                           
 13698                           ;LCDgraphic.c: 569: }
 13699                           ;LCDgraphic.c: 571: break;
 13700  00565A  0012               	return	
 13701  00565C                     l3401:
 13702                           
 13703                           ;LCDgraphic.c: 574: LCDpage(1,curr_page);
 13704  00565C  C05E  F00F         	movff	_curr_page,LCDpage@page
 13705  005660  0E01               	movlw	1
 13706  005662  EC89  F01D         	call	_LCDpage
 13707                           
 13708                           ;LCDgraphic.c: 575: LCDy(1,59);
 13709  005666  0E3B               	movlw	59
 13710  005668  6E05               	movwf	LCDy@value,c
 13711  00566A  0E01               	movlw	1
 13712  00566C  ECDA  F01D         	call	_LCDy
 13713                           
 13714                           ;LCDgraphic.c: 577: char_index=(128*curr_page)+curr_column+64;
 13715  005670  C05E  F016         	movff	_curr_page,??_LCDchar
 13716  005674  C05F  F017         	movff	_curr_page+1,??_LCDchar+1
 13717  005678  0E07               	movlw	7
 13718  00567A                     u3325:
 13719  00567A  90D8               	bcf	status,0,c
 13720  00567C  3616               	rlcf	??_LCDchar,f,c
 13721  00567E  3617               	rlcf	??_LCDchar+1,f,c
 13722  005680  2EE8               	decfsz	wreg,f,c
 13723  005682  D7FB               	goto	u3325
 13724  005684  505C               	movf	_curr_column,w,c
 13725  005686  2616               	addwf	??_LCDchar,f,c
 13726  005688  505D               	movf	_curr_column+1,w,c
 13727  00568A  2217               	addwfc	??_LCDchar+1,f,c
 13728  00568C  0E40               	movlw	64
 13729  00568E  2416               	addwf	??_LCDchar,w,c
 13730  005690  6E2B               	movwf	LCDchar@char_index,c
 13731  005692  0E00               	movlw	0
 13732  005694  2017               	addwfc	??_LCDchar+1,w,c
 13733  005696  6E2C               	movwf	LCDchar@char_index+1,c
 13734                           
 13735                           ;LCDgraphic.c: 579: LATCbits.LATC2=1;
 13736  005698  848B               	bsf	3979,2,c	;volatile
 13737                           
 13738                           ;LCDgraphic.c: 580: LATCbits.LATC1=0;
 13739  00569A  928B               	bcf	3979,1,c	;volatile
 13740                           
 13741                           ;LCDgraphic.c: 581: for (int i=0; i<5; i++)
 13742  00569C  0E00               	movlw	0
 13743  00569E  6E29               	movwf	LCDchar@i_518+1,c
 13744  0056A0  0E00               	movlw	0
 13745  0056A2  6E28               	movwf	LCDchar@i_518,c
 13746  0056A4                     l3411:
 13747  0056A4  BE29               	btfsc	LCDchar@i_518+1,7,c
 13748  0056A6  D006               	goto	l3415
 13749  0056A8  5029               	movf	LCDchar@i_518+1,w,c
 13750  0056AA  E152               	bnz	l250
 13751  0056AC  0E05               	movlw	5
 13752  0056AE  5C28               	subwf	LCDchar@i_518,w,c
 13753  0056B0  B0D8               	btfsc	status,0,c
 13754  0056B2  0012               	return	
 13755  0056B4                     l3415:
 13756                           
 13757                           ;LCDgraphic.c: 582: {
 13758                           ;LCDgraphic.c: 583: tmp = pixels[char_index+i] = pixels[char_index+i] | pic[index][i];
 13759  0056B4  5028               	movf	LCDchar@i_518,w,c
 13760  0056B6  242B               	addwf	LCDchar@char_index,w,c
 13761  0056B8  6E16               	movwf	??_LCDchar& (0+255),c
 13762  0056BA  5029               	movf	LCDchar@i_518+1,w,c
 13763  0056BC  202C               	addwfc	LCDchar@char_index+1,w,c
 13764  0056BE  6E17               	movwf	(??_LCDchar+1)& (0+255),c
 13765  0056C0  0EFF               	movlw	low _pixels
 13766  0056C2  2416               	addwf	??_LCDchar,w,c
 13767  0056C4  6ED9               	movwf	fsr2l,c
 13768  0056C6  0E03               	movlw	high _pixels
 13769  0056C8  2017               	addwfc	??_LCDchar+1,w,c
 13770  0056CA  6EDA               	movwf	fsr2h,c
 13771  0056CC  C01E  F00F         	movff	LCDchar@index,___wmul@multiplier
 13772  0056D0  C01F  F010         	movff	LCDchar@index+1,___wmul@multiplier+1
 13773  0056D4  0E00               	movlw	0
 13774  0056D6  6E12               	movwf	___wmul@multiplicand+1,c
 13775  0056D8  0E05               	movlw	5
 13776  0056DA  6E11               	movwf	___wmul@multiplicand,c
 13777  0056DC  ECAD  F01C         	call	___wmul	;wreg free
 13778  0056E0  0E5B               	movlw	low _pic
 13779  0056E2  6E18               	movwf	(??_LCDchar+2)& (0+255),c
 13780  0056E4  0E79               	movlw	high _pic
 13781  0056E6  6E19               	movwf	(??_LCDchar+3)& (0+255),c
 13782  0056E8  500F               	movf	?___wmul,w,c
 13783  0056EA  2618               	addwf	??_LCDchar+2,f,c
 13784  0056EC  5010               	movf	?___wmul+1,w,c
 13785  0056EE  2219               	addwfc	??_LCDchar+3,f,c
 13786  0056F0  5028               	movf	LCDchar@i_518,w,c
 13787  0056F2  2618               	addwf	??_LCDchar+2,f,c
 13788  0056F4  5029               	movf	LCDchar@i_518+1,w,c
 13789  0056F6  2219               	addwfc	??_LCDchar+3,f,c
 13790  0056F8  C018  FFF6         	movff	??_LCDchar+2,tblptrl
 13791  0056FC  C019  FFF7         	movff	??_LCDchar+3,tblptrh
 13792  005700                     	if	0	;tblptru may be non-zero
 13793  005700                     	endif
 13794  005700                     	if	0	;tblptru may be non-zero
 13795  005700                     	endif
 13796  005700  0008               	tblrd		*
 13797  005702  CFF5 F01A          	movff	tablat,??_LCDchar+4
 13798  005706  5028               	movf	LCDchar@i_518,w,c
 13799  005708  242B               	addwf	LCDchar@char_index,w,c
 13800  00570A  6E1B               	movwf	(??_LCDchar+5)& (0+255),c
 13801  00570C  5029               	movf	LCDchar@i_518+1,w,c
 13802  00570E  202C               	addwfc	LCDchar@char_index+1,w,c
 13803  005710  6E1C               	movwf	(??_LCDchar+6)& (0+255),c
 13804  005712  0EFF               	movlw	low _pixels
 13805  005714  241B               	addwf	??_LCDchar+5,w,c
 13806  005716  6EE1               	movwf	fsr1l,c
 13807  005718  0E03               	movlw	high _pixels
 13808  00571A  201C               	addwfc	??_LCDchar+6,w,c
 13809  00571C  6EE2               	movwf	fsr1h,c
 13810  00571E  50E7               	movf	indf1,w,c
 13811  005720  101A               	iorwf	??_LCDchar+4,w,c
 13812  005722  6EDF               	movwf	indf2,c
 13813  005724  50DF               	movf	indf2,w,c
 13814  005726  6E2A               	movwf	LCDchar@tmp,c
 13815                           
 13816                           ;LCDgraphic.c: 584: LCDcmd(tmp);
 13817  005728  502A               	movf	LCDchar@tmp,w,c
 13818  00572A  EC43  F01C         	call	_LCDcmd
 13819  00572E  4A28               	infsnz	LCDchar@i_518,f,c
 13820  005730  2A29               	incf	LCDchar@i_518+1,f,c
 13821  005732  D7B8               	goto	l3411
 13822  005734                     l3425:
 13823  005734  5015               	movf	LCDchar@position,w,c
 13824                           
 13825                           ; Switch size 1, requested type "space"
 13826                           ; Number of cases is 4, Range of values is 0 to 3
 13827                           ; switch strategies available:
 13828                           ; Name         Instructions Cycles
 13829                           ; simple_byte           13     7 (average)
 13830                           ;	Chosen strategy is simple_byte
 13831  005736  0A00               	xorlw	0	; case 0
 13832  005738  B4D8               	btfsc	status,2,c
 13833  00573A  D5DC               	goto	l3313
 13834  00573C  0A01               	xorlw	1	; case 1
 13835  00573E  B4D8               	btfsc	status,2,c
 13836  005740  D657               	goto	l3337
 13837  005742  0A03               	xorlw	3	; case 2
 13838  005744  B4D8               	btfsc	status,2,c
 13839  005746  D6C3               	goto	l3359
 13840  005748  0A01               	xorlw	1	; case 3
 13841  00574A  A4D8               	btfss	status,2,c
 13842  00574C  0012               	return	
 13843  00574E  D786               	goto	l3401
 13844  005750                     l250:
 13845  005750  0012               	return		;funcret
 13846  005752                     __end_of_LCDchar:
 13847                           	opt stack 0
 13848                           tblptru	equ	0xFF8
 13849                           tblptrh	equ	0xFF7
 13850                           tblptrl	equ	0xFF6
 13851                           tablat	equ	0xFF5
 13852                           prodh	equ	0xFF4
 13853                           prodl	equ	0xFF3
 13854                           postinc0	equ	0xFEE
 13855                           wreg	equ	0xFE8
 13856                           indf1	equ	0xFE7
 13857                           postdec1	equ	0xFE5
 13858                           fsr1h	equ	0xFE2
 13859                           fsr1l	equ	0xFE1
 13860                           indf2	equ	0xFDF
 13861                           postinc2	equ	0xFDE
 13862                           postdec2	equ	0xFDD
 13863                           fsr2h	equ	0xFDA
 13864                           fsr2l	equ	0xFD9
 13865                           status	equ	0xFD8
 13866                           
 13867 ;; *************** function ___wmul *****************
 13868 ;; Defined at:
 13869 ;;		line 15 in file "/opt/microchip/xc8/v1.37/sources/common/Umul16.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;  multiplier      2   14[COMRAM] unsigned int 
 13872 ;;  multiplicand    2   16[COMRAM] unsigned int 
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;  product         2   18[COMRAM] unsigned int 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  2   14[COMRAM] unsigned int 
 13877 ;; Registers used:
 13878 ;;		wreg, status,2, status,0, prodl, prodh
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13884 ;;      Params:         4       0       0       0       0       0       0       0       0
 13885 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13886 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13887 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13888 ;;Total ram usage:        6 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; This function calls:
 13891 ;;		Nothing
 13892 ;; This function is called by:
 13893 ;;		_main
 13894 ;;		_LCDchar
 13895 ;;		_fround
 13896 ;;		_scale
 13897 ;;		_sprintf
 13898 ;; This function uses a non-reentrant model
 13899 ;;
 13900                           
 13901                           	psect	text35
 13902  00395A                     __ptext35:
 13903                           	opt stack 0
 13904  00395A                     ___wmul:
 13905                           	opt stack 28
 13906                           
 13907                           ;incstack = 0
 13908  00395A  500F               	movf	___wmul@multiplier,w,c
 13909  00395C  0211               	mulwf	___wmul@multiplicand,c
 13910  00395E  CFF3 F013          	movff	prodl,___wmul@product
 13911  003962  CFF4 F014          	movff	prodh,___wmul@product+1
 13912  003966  500F               	movf	___wmul@multiplier,w,c
 13913  003968  0212               	mulwf	___wmul@multiplicand+1,c
 13914  00396A  50F3               	movf	prodl,w,c
 13915  00396C  2614               	addwf	___wmul@product+1,f,c
 13916  00396E  5010               	movf	___wmul@multiplier+1,w,c
 13917  003970  0211               	mulwf	___wmul@multiplicand,c
 13918  003972  50F3               	movf	prodl,w,c
 13919  003974  2614               	addwf	___wmul@product+1,f,c
 13920  003976  C013  F00F         	movff	___wmul@product,?___wmul
 13921  00397A  C014  F010         	movff	___wmul@product+1,?___wmul+1
 13922  00397E  0012               	return	
 13923  003980                     __end_of___wmul:
 13924                           	opt stack 0
 13925                           tblptru	equ	0xFF8
 13926                           tblptrh	equ	0xFF7
 13927                           tblptrl	equ	0xFF6
 13928                           tablat	equ	0xFF5
 13929                           prodh	equ	0xFF4
 13930                           prodl	equ	0xFF3
 13931                           postinc0	equ	0xFEE
 13932                           wreg	equ	0xFE8
 13933                           indf1	equ	0xFE7
 13934                           postdec1	equ	0xFE5
 13935                           fsr1h	equ	0xFE2
 13936                           fsr1l	equ	0xFE1
 13937                           indf2	equ	0xFDF
 13938                           postinc2	equ	0xFDE
 13939                           postdec2	equ	0xFDD
 13940                           fsr2h	equ	0xFDA
 13941                           fsr2l	equ	0xFD9
 13942                           status	equ	0xFD8
 13943                           
 13944 ;; *************** function _LCDy *****************
 13945 ;; Defined at:
 13946 ;;		line 410 in file "src/LCDgraphic.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;  side            1    wreg     unsigned char 
 13949 ;;  value           1    4[COMRAM] unsigned char 
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;  side            1    5[COMRAM] unsigned char 
 13952 ;; Return value:  Size  Location     Type
 13953 ;;                  1    wreg      unsigned char 
 13954 ;; Registers used:
 13955 ;;		wreg, status,2, status,0, cstack
 13956 ;; Tracked objects:
 13957 ;;		On entry : 0/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13961 ;;      Params:         1       0       0       0       0       0       0       0       0
 13962 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13963 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13964 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13965 ;;Total ram usage:        2 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:    3
 13968 ;; This function calls:
 13969 ;;		_LCDcmd
 13970 ;;		__lcd_waitbusy
 13971 ;; This function is called by:
 13972 ;;		_LCDchar
 13973 ;;		_LCDclear
 13974 ;;		_LCDstring
 13975 ;;		_lcdplotpixel2
 13976 ;;		_write_image
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           	psect	text36
 13981  003BB4                     __ptext36:
 13982                           	opt stack 0
 13983  003BB4                     _LCDy:
 13984                           	opt stack 25
 13985                           
 13986                           ;incstack = 0
 13987                           ;LCDy@side stored from wreg
 13988  003BB4  6E06               	movwf	LCDy@side,c
 13989                           
 13990                           ;LCDgraphic.c: 412: if (side < 0 || side > 2 || value < 0 || value > 63)
 13991  003BB6  0E03               	movlw	3
 13992  003BB8  6006               	cpfslt	LCDy@side,c
 13993  003BBA  0012               	return	
 13994  003BBC  0E3F               	movlw	63
 13995  003BBE  6405               	cpfsgt	LCDy@value,c
 13996  003BC0  D001               	goto	l233
 13997  003BC2  0012               	return	
 13998  003BC4                     l233:
 13999                           
 14000                           ;LCDgraphic.c: 416: selected_side = side;
 14001  003BC4  C006  F229         	movff	LCDy@side,_selected_side
 14002  003BC8  0102               	movlb	2	; () banked
 14003  003BCA  6B2A               	clrf	(_selected_side+1)& (0+255),b
 14004                           
 14005                           ;LCDgraphic.c: 418: curr_column = value;
 14006  003BCC  C005  F05C         	movff	LCDy@value,_curr_column
 14007  003BD0  6A5D               	clrf	_curr_column+1,c
 14008                           
 14009                           ; BSR set to: 2
 14010                           ;LCDgraphic.c: 420: _lcd_waitbusy();
 14011  003BD2  EC50  F01C         	call	__lcd_waitbusy	;wreg free
 14012                           
 14013                           ;LCDgraphic.c: 422: LATCbits.LATC2=0;
 14014  003BD6  948B               	bcf	3979,2,c	;volatile
 14015                           
 14016                           ;LCDgraphic.c: 423: LATCbits.LATC1=0;
 14017  003BD8  928B               	bcf	3979,1,c	;volatile
 14018                           
 14019                           ;LCDgraphic.c: 424: switch(side)
 14020  003BDA  D008               	goto	l3257
 14021  003BDC                     l238:
 14022                           
 14023                           ;LCDgraphic.c: 427: LATEbits.LATE0=1;
 14024  003BDC  808D               	bsf	3981,0,c	;volatile
 14025                           
 14026                           ;LCDgraphic.c: 428: LATEbits.LATE1=0;
 14027  003BDE  928D               	bcf	3981,1,c	;volatile
 14028                           
 14029                           ;LCDgraphic.c: 429: break;
 14030  003BE0  D00F               	goto	l3259
 14031  003BE2                     l240:
 14032                           
 14033                           ;LCDgraphic.c: 431: LATEbits.LATE0=0;
 14034  003BE2  908D               	bcf	3981,0,c	;volatile
 14035  003BE4  D001               	goto	L24
 14036  003BE6                     l241:
 14037                           
 14038                           ;LCDgraphic.c: 435: LATEbits.LATE0=1;
 14039  003BE6  808D               	bsf	3981,0,c	;volatile
 14040  003BE8                     L24:
 14041                           
 14042                           ;LCDgraphic.c: 436: LATEbits.LATE1=1;
 14043  003BE8  828D               	bsf	3981,1,c	;volatile
 14044                           
 14045                           ;LCDgraphic.c: 438: }
 14046                           
 14047                           ;LCDgraphic.c: 437: break;
 14048  003BEA  D00A               	goto	l3259
 14049  003BEC                     l3257:
 14050  003BEC  5006               	movf	LCDy@side,w,c
 14051                           
 14052                           ; Switch size 1, requested type "space"
 14053                           ; Number of cases is 3, Range of values is 0 to 2
 14054                           ; switch strategies available:
 14055                           ; Name         Instructions Cycles
 14056                           ; simple_byte           10     6 (average)
 14057                           ;	Chosen strategy is simple_byte
 14058  003BEE  0A00               	xorlw	0	; case 0
 14059  003BF0  B4D8               	btfsc	status,2,c
 14060  003BF2  D7F4               	goto	l238
 14061  003BF4  0A01               	xorlw	1	; case 1
 14062  003BF6  B4D8               	btfsc	status,2,c
 14063  003BF8  D7F4               	goto	l240
 14064  003BFA  0A03               	xorlw	3	; case 2
 14065  003BFC  B4D8               	btfsc	status,2,c
 14066  003BFE  D7F3               	goto	l241
 14067  003C00                     l3259:
 14068                           
 14069                           ;LCDgraphic.c: 440: LCDcmd(0b01000000 | value);
 14070  003C00  5005               	movf	LCDy@value,w,c
 14071  003C02  0940               	iorlw	64
 14072  003C04  EC43  F01C         	call	_LCDcmd
 14073  003C08  0012               	return	
 14074  003C0A                     __end_of_LCDy:
 14075                           	opt stack 0
 14076                           tblptru	equ	0xFF8
 14077                           tblptrh	equ	0xFF7
 14078                           tblptrl	equ	0xFF6
 14079                           tablat	equ	0xFF5
 14080                           prodh	equ	0xFF4
 14081                           prodl	equ	0xFF3
 14082                           postinc0	equ	0xFEE
 14083                           wreg	equ	0xFE8
 14084                           indf1	equ	0xFE7
 14085                           postdec1	equ	0xFE5
 14086                           fsr1h	equ	0xFE2
 14087                           fsr1l	equ	0xFE1
 14088                           indf2	equ	0xFDF
 14089                           postinc2	equ	0xFDE
 14090                           postdec2	equ	0xFDD
 14091                           fsr2h	equ	0xFDA
 14092                           fsr2l	equ	0xFD9
 14093                           status	equ	0xFD8
 14094                           
 14095 ;; *************** function _LCDpage *****************
 14096 ;; Defined at:
 14097 ;;		line 329 in file "src/LCDgraphic.c"
 14098 ;; Parameters:    Size  Location     Type
 14099 ;;  side            1    wreg     unsigned char 
 14100 ;;  page            1   14[COMRAM] unsigned char 
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;  side            1   15[COMRAM] unsigned char 
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      unsigned char 
 14105 ;; Registers used:
 14106 ;;		wreg, status,2, status,0, cstack
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14112 ;;      Params:         1       0       0       0       0       0       0       0       0
 14113 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14114 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14115 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14116 ;;Total ram usage:        2 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    3
 14119 ;; This function calls:
 14120 ;;		_LCDcmd
 14121 ;;		__lcd_waitbusy
 14122 ;; This function is called by:
 14123 ;;		_main
 14124 ;;		_LCDchar
 14125 ;;		_LCDclear
 14126 ;;		_LCDstring
 14127 ;;		_lcdplotpixel2
 14128 ;;		_write_image
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132                           	psect	text37
 14133  003B12                     __ptext37:
 14134                           	opt stack 0
 14135  003B12                     _LCDpage:
 14136                           	opt stack 25
 14137                           
 14138                           ;incstack = 0
 14139                           ;LCDpage@side stored from wreg
 14140  003B12  6E10               	movwf	LCDpage@side,c
 14141                           
 14142                           ;LCDgraphic.c: 331: if (side < 0 || side > 2 || page < 0 || page > 7)
 14143  003B14  0E03               	movlw	3
 14144  003B16  6010               	cpfslt	LCDpage@side,c
 14145  003B18  0012               	return	
 14146  003B1A  0E07               	movlw	7
 14147  003B1C  640F               	cpfsgt	LCDpage@page,c
 14148  003B1E  D001               	goto	l3229
 14149  003B20  0012               	return	
 14150  003B22                     l3229:
 14151                           
 14152                           ;LCDgraphic.c: 335: _lcd_waitbusy();
 14153  003B22  EC50  F01C         	call	__lcd_waitbusy	;wreg free
 14154                           
 14155                           ;LCDgraphic.c: 338: curr_page = page;
 14156  003B26  C00F  F05E         	movff	LCDpage@page,_curr_page
 14157  003B2A  6A5F               	clrf	_curr_page+1,c
 14158                           
 14159                           ;LCDgraphic.c: 340: LATCbits.LATC2=0;
 14160  003B2C  948B               	bcf	3979,2,c	;volatile
 14161                           
 14162                           ;LCDgraphic.c: 341: LATCbits.LATC1=0;
 14163  003B2E  928B               	bcf	3979,1,c	;volatile
 14164                           
 14165                           ;LCDgraphic.c: 343: switch(side)
 14166  003B30  D008               	goto	l3239
 14167  003B32                     l222:
 14168                           
 14169                           ;LCDgraphic.c: 346: LATEbits.LATE0=1;
 14170  003B32  808D               	bsf	3981,0,c	;volatile
 14171                           
 14172                           ;LCDgraphic.c: 347: LATEbits.LATE1=0;
 14173  003B34  928D               	bcf	3981,1,c	;volatile
 14174                           
 14175                           ;LCDgraphic.c: 348: break;
 14176  003B36  D00F               	goto	l3241
 14177  003B38                     l224:
 14178                           
 14179                           ;LCDgraphic.c: 351: LATEbits.LATE0=0;
 14180  003B38  908D               	bcf	3981,0,c	;volatile
 14181  003B3A  D001               	goto	L25
 14182  003B3C                     l225:
 14183                           
 14184                           ;LCDgraphic.c: 356: LATEbits.LATE0=1;
 14185  003B3C  808D               	bsf	3981,0,c	;volatile
 14186  003B3E                     L25:
 14187                           
 14188                           ;LCDgraphic.c: 357: LATEbits.LATE1=1;
 14189  003B3E  828D               	bsf	3981,1,c	;volatile
 14190                           
 14191                           ;LCDgraphic.c: 359: }
 14192                           
 14193                           ;LCDgraphic.c: 358: break;
 14194  003B40  D00A               	goto	l3241
 14195  003B42                     l3239:
 14196  003B42  5010               	movf	LCDpage@side,w,c
 14197                           
 14198                           ; Switch size 1, requested type "space"
 14199                           ; Number of cases is 3, Range of values is 0 to 2
 14200                           ; switch strategies available:
 14201                           ; Name         Instructions Cycles
 14202                           ; simple_byte           10     6 (average)
 14203                           ;	Chosen strategy is simple_byte
 14204  003B44  0A00               	xorlw	0	; case 0
 14205  003B46  B4D8               	btfsc	status,2,c
 14206  003B48  D7F4               	goto	l222
 14207  003B4A  0A01               	xorlw	1	; case 1
 14208  003B4C  B4D8               	btfsc	status,2,c
 14209  003B4E  D7F4               	goto	l224
 14210  003B50  0A03               	xorlw	3	; case 2
 14211  003B52  B4D8               	btfsc	status,2,c
 14212  003B54  D7F3               	goto	l225
 14213  003B56                     l3241:
 14214                           
 14215                           ;LCDgraphic.c: 361: LCDcmd(0b10111000 | page);
 14216  003B56  500F               	movf	LCDpage@page,w,c
 14217  003B58  09B8               	iorlw	184
 14218  003B5A  EC43  F01C         	call	_LCDcmd
 14219  003B5E  0012               	return	
 14220  003B60                     __end_of_LCDpage:
 14221                           	opt stack 0
 14222                           tblptru	equ	0xFF8
 14223                           tblptrh	equ	0xFF7
 14224                           tblptrl	equ	0xFF6
 14225                           tablat	equ	0xFF5
 14226                           prodh	equ	0xFF4
 14227                           prodl	equ	0xFF3
 14228                           postinc0	equ	0xFEE
 14229                           wreg	equ	0xFE8
 14230                           indf1	equ	0xFE7
 14231                           postdec1	equ	0xFE5
 14232                           fsr1h	equ	0xFE2
 14233                           fsr1l	equ	0xFE1
 14234                           indf2	equ	0xFDF
 14235                           postinc2	equ	0xFDE
 14236                           postdec2	equ	0xFDD
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function __lcd_waitbusy *****************
 14242 ;; Defined at:
 14243 ;;		line 306 in file "src/LCDgraphic.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;		None
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, status,2, status,0, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14257 ;;      Params:         0       0       0       0       0       0       0       0       0
 14258 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14259 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14260 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14261 ;;Total ram usage:        1 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    2
 14264 ;; This function calls:
 14265 ;;		__lcd_status
 14266 ;; This function is called by:
 14267 ;;		_LCDpage
 14268 ;;		_LCDon
 14269 ;;		_LCDy
 14270 ;;		_LCDchar
 14271 ;;		_LCDclear
 14272 ;;		_LCDstring
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           	psect	text38
 14277  0038A0                     __ptext38:
 14278                           	opt stack 0
 14279  0038A0                     __lcd_waitbusy:
 14280                           	opt stack 25
 14281  0038A0                     l3223:
 14282  0038A0  ECB0  F01D         	call	__lcd_status	;wreg free
 14283  0038A4  6E04               	movwf	??__lcd_waitbusy& (0+255),c
 14284  0038A6  0E90               	movlw	144
 14285  0038A8  1604               	andwf	??__lcd_waitbusy,f,c
 14286  0038AA  B4D8               	btfsc	status,2,c
 14287  0038AC  0012               	return	
 14288  0038AE  D7F8               	goto	l3223
 14289  0038B0                     __end_of__lcd_waitbusy:
 14290                           	opt stack 0
 14291                           tblptru	equ	0xFF8
 14292                           tblptrh	equ	0xFF7
 14293                           tblptrl	equ	0xFF6
 14294                           tablat	equ	0xFF5
 14295                           prodh	equ	0xFF4
 14296                           prodl	equ	0xFF3
 14297                           postinc0	equ	0xFEE
 14298                           wreg	equ	0xFE8
 14299                           indf1	equ	0xFE7
 14300                           postdec1	equ	0xFE5
 14301                           fsr1h	equ	0xFE2
 14302                           fsr1l	equ	0xFE1
 14303                           indf2	equ	0xFDF
 14304                           postinc2	equ	0xFDE
 14305                           postdec2	equ	0xFDD
 14306                           fsr2h	equ	0xFDA
 14307                           fsr2l	equ	0xFD9
 14308                           status	equ	0xFD8
 14309                           
 14310 ;; *************** function __lcd_status *****************
 14311 ;; Defined at:
 14312 ;;		line 209 in file "src/LCDgraphic.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;		None
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;  cs2             1    2[COMRAM] unsigned char 
 14317 ;;  cs1             1    1[COMRAM] unsigned char 
 14318 ;;  status          1    0[COMRAM] unsigned char 
 14319 ;; Return value:  Size  Location     Type
 14320 ;;                  1    wreg      unsigned char 
 14321 ;; Registers used:
 14322 ;;		wreg, status,2, cstack
 14323 ;; Tracked objects:
 14324 ;;		On entry : 0/0
 14325 ;;		On exit  : 0/0
 14326 ;;		Unchanged: 0/0
 14327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14328 ;;      Params:         0       0       0       0       0       0       0       0       0
 14329 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14330 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14331 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14332 ;;Total ram usage:        3 bytes
 14333 ;; Hardware stack levels used:    1
 14334 ;; Hardware stack levels required when called:    1
 14335 ;; This function calls:
 14336 ;;		__lcd_enable
 14337 ;; This function is called by:
 14338 ;;		_LCDinit
 14339 ;;		_LCDreset
 14340 ;;		__lcd_waitbusy
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           	psect	text39
 14345  003B60                     __ptext39:
 14346                           	opt stack 0
 14347  003B60                     __lcd_status:
 14348                           	opt stack 25
 14349                           
 14350                           ;LCDgraphic.c: 211: unsigned char status;
 14351                           ;LCDgraphic.c: 213: unsigned char cs1, cs2;
 14352                           ;LCDgraphic.c: 214: cs1 = LATEbits.LATE0;
 14353                           
 14354                           ;incstack = 0
 14355  003B60  0E00               	movlw	0
 14356  003B62  B08D               	btfsc	3981,0,c	;volatile
 14357  003B64  0E01               	movlw	1
 14358  003B66  6E02               	movwf	__lcd_status@cs1,c
 14359                           
 14360                           ;LCDgraphic.c: 215: cs2 = LATEbits.LATE1;
 14361  003B68  0E00               	movlw	0
 14362  003B6A  B28D               	btfsc	3981,1,c	;volatile
 14363  003B6C  0E01               	movlw	1
 14364  003B6E  6E03               	movwf	__lcd_status@cs2,c
 14365                           
 14366                           ;LCDgraphic.c: 218: PORTD = 0x00;
 14367  003B70  0E00               	movlw	0
 14368  003B72  6E83               	movwf	3971,c	;volatile
 14369                           
 14370                           ;LCDgraphic.c: 220: TRISD = 0xFF;
 14371  003B74  6895               	setf	3989,c	;volatile
 14372                           
 14373                           ;LCDgraphic.c: 223: LATCbits.LATC2=0; LATCbits.LATC1=1; LATEbits.LATE0 = 1; LATEbits.LAT
      +                          E1 = 1;
 14374  003B76  948B               	bcf	3979,2,c	;volatile
 14375  003B78  828B               	bsf	3979,1,c	;volatile
 14376  003B7A  808D               	bsf	3981,0,c	;volatile
 14377  003B7C  828D               	bsf	3981,1,c	;volatile
 14378                           
 14379                           ;LCDgraphic.c: 224: _delay((unsigned long)((1)*(40000000/4000000.0)));
 14380  003B7E  0E03               	movlw	3
 14381  003B80                     u6107:
 14382  003B80  2EE8               	decfsz	wreg,f,c
 14383  003B82  D7FE               	goto	u6107
 14384  003B84  F000               	nop	
 14385                           
 14386                           ;LCDgraphic.c: 227: _lcd_enable();
 14387  003B86  EC49  F01C         	call	__lcd_enable	;wreg free
 14388                           
 14389                           ;LCDgraphic.c: 230: status = PORTD;
 14390  003B8A  CF83 F001          	movff	3971,__lcd_status@status	;volatile
 14391                           
 14392                           ;LCDgraphic.c: 233: LATCbits.LATC1 = 0; LATEbits.LATE0 = cs1; LATEbits.LATE1 = cs2;
 14393  003B8E  928B               	bcf	3979,1,c	;volatile
 14394  003B90  B002               	btfsc	__lcd_status@cs1,0,c
 14395  003B92  D002               	bra	u3035
 14396  003B94  908D               	bcf	3981,0,c	;volatile
 14397  003B96  D001               	bra	u3036
 14398  003B98                     u3035:
 14399  003B98  808D               	bsf	3981,0,c	;volatile
 14400  003B9A                     u3036:
 14401  003B9A  B003               	btfsc	__lcd_status@cs2,0,c
 14402  003B9C  D002               	bra	u3045
 14403  003B9E  928D               	bcf	3981,1,c	;volatile
 14404  003BA0  D001               	bra	u3046
 14405  003BA2                     u3045:
 14406  003BA2  828D               	bsf	3981,1,c	;volatile
 14407  003BA4                     u3046:
 14408                           
 14409                           ;LCDgraphic.c: 237: _delay((unsigned long)((10)*(40000000/4000000.0)));
 14410  003BA4  0E21               	movlw	33
 14411  003BA6                     u6117:
 14412  003BA6  2EE8               	decfsz	wreg,f,c
 14413  003BA8  D7FE               	goto	u6117
 14414  003BAA  F000               	nop	
 14415                           
 14416                           ;LCDgraphic.c: 240: TRISD = 0x00;
 14417  003BAC  0E00               	movlw	0
 14418  003BAE  6E95               	movwf	3989,c	;volatile
 14419                           
 14420                           ;LCDgraphic.c: 242: return status;
 14421  003BB0  5001               	movf	__lcd_status@status,w,c
 14422  003BB2  0012               	return	
 14423  003BB4                     __end_of__lcd_status:
 14424                           	opt stack 0
 14425                           tblptru	equ	0xFF8
 14426                           tblptrh	equ	0xFF7
 14427                           tblptrl	equ	0xFF6
 14428                           tablat	equ	0xFF5
 14429                           prodh	equ	0xFF4
 14430                           prodl	equ	0xFF3
 14431                           postinc0	equ	0xFEE
 14432                           wreg	equ	0xFE8
 14433                           indf1	equ	0xFE7
 14434                           postdec1	equ	0xFE5
 14435                           fsr1h	equ	0xFE2
 14436                           fsr1l	equ	0xFE1
 14437                           indf2	equ	0xFDF
 14438                           postinc2	equ	0xFDE
 14439                           postdec2	equ	0xFDD
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8
 14443                           
 14444 ;; *************** function _LCDcmd *****************
 14445 ;; Defined at:
 14446 ;;		line 259 in file "src/LCDgraphic.c"
 14447 ;; Parameters:    Size  Location     Type
 14448 ;;  data            1    wreg     unsigned char 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  data            1    0[COMRAM] unsigned char 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      void 
 14453 ;; Registers used:
 14454 ;;		wreg, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14460 ;;      Params:         0       0       0       0       0       0       0       0       0
 14461 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14462 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14463 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14464 ;;Total ram usage:        1 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    1
 14467 ;; This function calls:
 14468 ;;		__lcd_enable
 14469 ;; This function is called by:
 14470 ;;		_LCDpage
 14471 ;;		_LCDon
 14472 ;;		_LCDy
 14473 ;;		_emptycolumn
 14474 ;;		_LCDchar
 14475 ;;		_lcdplotpixel2
 14476 ;;		_write_image
 14477 ;;		_LCDStartline
 14478 ;; This function uses a non-reentrant model
 14479 ;;
 14480                           
 14481                           	psect	text40
 14482  003886                     __ptext40:
 14483                           	opt stack 0
 14484  003886                     _LCDcmd:
 14485                           	opt stack 26
 14486                           
 14487                           ;incstack = 0
 14488                           ;LCDcmd@data stored from wreg
 14489  003886  6E01               	movwf	LCDcmd@data,c
 14490                           
 14491                           ;LCDgraphic.c: 262: PORTD = data;
 14492  003888  C001  FF83         	movff	LCDcmd@data,3971	;volatile
 14493                           
 14494                           ;LCDgraphic.c: 264: _lcd_enable();
 14495  00388C  EC49  F01C         	call	__lcd_enable	;wreg free
 14496  003890  0012               	return		;funcret
 14497  003892                     __end_of_LCDcmd:
 14498                           	opt stack 0
 14499                           tblptru	equ	0xFF8
 14500                           tblptrh	equ	0xFF7
 14501                           tblptrl	equ	0xFF6
 14502                           tablat	equ	0xFF5
 14503                           prodh	equ	0xFF4
 14504                           prodl	equ	0xFF3
 14505                           postinc0	equ	0xFEE
 14506                           wreg	equ	0xFE8
 14507                           indf1	equ	0xFE7
 14508                           postdec1	equ	0xFE5
 14509                           fsr1h	equ	0xFE2
 14510                           fsr1l	equ	0xFE1
 14511                           indf2	equ	0xFDF
 14512                           postinc2	equ	0xFDE
 14513                           postdec2	equ	0xFDD
 14514                           fsr2h	equ	0xFDA
 14515                           fsr2l	equ	0xFD9
 14516                           status	equ	0xFD8
 14517                           
 14518 ;; *************** function __lcd_enable *****************
 14519 ;; Defined at:
 14520 ;;		line 157 in file "src/LCDgraphic.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;		None
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;		None
 14525 ;; Return value:  Size  Location     Type
 14526 ;;                  1    wreg      void 
 14527 ;; Registers used:
 14528 ;;		wreg
 14529 ;; Tracked objects:
 14530 ;;		On entry : 0/0
 14531 ;;		On exit  : 0/0
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14534 ;;      Params:         0       0       0       0       0       0       0       0       0
 14535 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14536 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14537 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14538 ;;Total ram usage:        0 bytes
 14539 ;; Hardware stack levels used:    1
 14540 ;; This function calls:
 14541 ;;		Nothing
 14542 ;; This function is called by:
 14543 ;;		__lcd_status
 14544 ;;		_LCDcmd
 14545 ;;		_LCDread
 14546 ;; This function uses a non-reentrant model
 14547 ;;
 14548                           
 14549                           	psect	text41
 14550  003892                     __ptext41:
 14551                           	opt stack 0
 14552  003892                     __lcd_enable:
 14553                           	opt stack 25
 14554                           
 14555                           ;LCDgraphic.c: 159: LATCbits.LATC0 = 1;
 14556                           
 14557                           ;incstack = 0
 14558  003892  808B               	bsf	3979,0,c	;volatile
 14559                           
 14560                           ;LCDgraphic.c: 160: _delay((unsigned long)((2)*(40000000/4000000.0)));
 14561  003894  0E06               	movlw	6
 14562  003896                     u6127:
 14563  003896  2EE8               	decfsz	wreg,f,c
 14564  003898  D7FE               	goto	u6127
 14565  00389A  D000               	nop2		;nop
 14566                           
 14567                           ;LCDgraphic.c: 161: LATCbits.LATC0 = 0;
 14568  00389C  908B               	bcf	3979,0,c	;volatile
 14569  00389E  0012               	return		;funcret
 14570  0038A0                     __end_of__lcd_enable:
 14571                           	opt stack 0
 14572                           tblptru	equ	0xFF8
 14573                           tblptrh	equ	0xFF7
 14574                           tblptrl	equ	0xFF6
 14575                           tablat	equ	0xFF5
 14576                           prodh	equ	0xFF4
 14577                           prodl	equ	0xFF3
 14578                           postinc0	equ	0xFEE
 14579                           wreg	equ	0xFE8
 14580                           indf1	equ	0xFE7
 14581                           postdec1	equ	0xFE5
 14582                           fsr1h	equ	0xFE2
 14583                           fsr1l	equ	0xFE1
 14584                           indf2	equ	0xFDF
 14585                           postinc2	equ	0xFDE
 14586                           postdec2	equ	0xFDD
 14587                           fsr2h	equ	0xFDA
 14588                           fsr2l	equ	0xFD9
 14589                           status	equ	0xFD8
 14590                           tblptru	equ	0xFF8
 14591                           tblptrh	equ	0xFF7
 14592                           tblptrl	equ	0xFF6
 14593                           tablat	equ	0xFF5
 14594                           prodh	equ	0xFF4
 14595                           prodl	equ	0xFF3
 14596                           postinc0	equ	0xFEE
 14597                           wreg	equ	0xFE8
 14598                           indf1	equ	0xFE7
 14599                           postdec1	equ	0xFE5
 14600                           fsr1h	equ	0xFE2
 14601                           fsr1l	equ	0xFE1
 14602                           indf2	equ	0xFDF
 14603                           postinc2	equ	0xFDE
 14604                           postdec2	equ	0xFDD
 14605                           fsr2h	equ	0xFDA
 14606                           fsr2l	equ	0xFD9
 14607                           status	equ	0xFD8
 14608                           
 14609                           	psect	rparam
 14610  0000                     tblptru	equ	0xFF8
 14611                           tblptrh	equ	0xFF7
 14612                           tblptrl	equ	0xFF6
 14613                           tablat	equ	0xFF5
 14614                           prodh	equ	0xFF4
 14615                           prodl	equ	0xFF3
 14616                           postinc0	equ	0xFEE
 14617                           wreg	equ	0xFE8
 14618                           indf1	equ	0xFE7
 14619                           postdec1	equ	0xFE5
 14620                           fsr1h	equ	0xFE2
 14621                           fsr1l	equ	0xFE1
 14622                           indf2	equ	0xFDF
 14623                           postinc2	equ	0xFDE
 14624                           postdec2	equ	0xFDD
 14625                           fsr2h	equ	0xFDA
 14626                           fsr2l	equ	0xFD9
 14627                           status	equ	0xFD8


Data Sizes:
    Strings     73
    Constant    1626
    Data        0
    BSS         1031
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160    160     160
    BANK1           256    256     256
    BANK2           256     41      43
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 40
		 -> main@buf_360(BANK0[13]), main@bottom_buf(BANK0[40]), main@buf_344(BANK0[10]), main@buf(BANK0[10]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> main@buf_360(BANK0[13]), main@bottom_buf(BANK0[40]), main@buf_344(BANK0[10]), main@buf(BANK0[10]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 13
		 -> main@buf_360(BANK0[13]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 40
		 -> main@bottom_buf(BANK0[40]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 40
		 -> main@bottom_buf(BANK0[40]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_9(CODE[9]), STR_8(CODE[9]), STR_7(CODE[8]), STR_6(CODE[10]), 
		 -> STR_5(CODE[10]), STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), 
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf_360(BANK0[13]), main@bottom_buf(BANK0[40]), main@buf_344(BANK0[10]), main@buf(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    write_image@image	PTR const unsigned char  size(2) Largest target is 1024
		 -> image(CODE[1024]), 

    LCDstring@buffer	PTR const unsigned char  size(2) Largest target is 40
		 -> main@buf_360(BANK0[13]), main@bottom_buf(BANK0[40]), main@buf_344(BANK0[10]), main@buf(BANK0[10]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 40
		 -> main@bottom_buf(BANK0[40]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _xyaxis->_lcdplotpixel2
    _lcdplotpixel2->_LCDpage
    _write_image->_LCDpage
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awtoft
    ___lltoft->___ftpack
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _LCDstring->_LCDchar
    _emptycolumn->_LCDcmd
    ___awdiv->___awmod
    _LCDinit->_LCDclear
    _LCDreset->__lcd_status
    _LCDon->__lcd_waitbusy
    _LCDclear->_LCDchar
    _LCDchar->___wmul
    ___wmul->___awdiv
    _LCDy->__lcd_waitbusy
    _LCDpage->___awdiv
    __lcd_waitbusy->__lcd_status

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               484   484      0  171060
                                             89 COMRAM     2     2      0
                                             23 BANK0    137   137      0
                                              0 BANK1    256   256      0
                                              0 BANK2     41    41      0
                           _LCDclear
                            _LCDinit
                            _LCDpage
                          _LCDstring
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             ___wmul
                                _abs
                      _lcdplotpixel2
                            _sprintf
                             _strcat
                        _write_image
                             _xyaxis
 ---------------------------------------------------------------------------------
 (1) _xyaxis                                               4     4      0   10847
                                             36 COMRAM     4     4      0
                      _lcdplotpixel2
 ---------------------------------------------------------------------------------
 (2) _lcdplotpixel2                                       20    17      3   10711
                                             16 COMRAM    20    17      3
                             _LCDcmd
                            _LCDpage
                               _LCDy
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _write_image                                         27    24      3    4414
                                             16 COMRAM    27    24      3
                             _LCDcmd
                            _LCDpage
                               _LCDy
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     226
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   64679
                                             76 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   16108
                                             39 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   15910
                                             39 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    8336
                                             24 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     956
                                             61 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4667
                                             61 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4370
                                             49 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1032
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     322
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2810
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2914
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2495
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDstring                                           34    32      2   16646
                                             44 COMRAM    34    32      2
                            _LCDchar
                            _LCDpage
                               _LCDy
                            ___awdiv
                      __lcd_waitbusy
                        _emptycolumn
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _emptycolumn                                          4     4      0      46
                                              1 COMRAM     4     4      0
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2732
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              3     3      0   12665
                                             50 COMRAM     3     3      0
                           _LCDclear
                              _LCDon
                           _LCDreset
                        __lcd_status
 ---------------------------------------------------------------------------------
 (2) _LCDreset                                             1     1      0      69
                                              3 COMRAM     1     1      0
                        __lcd_status
 ---------------------------------------------------------------------------------
 (2) _LCDon                                                1     1      0     113
                                              4 COMRAM     1     1      0
                             _LCDcmd
                      __lcd_waitbusy
 ---------------------------------------------------------------------------------
 (2) _LCDclear                                             6     6      0   12368
                                             44 COMRAM     6     6      0
                            _LCDchar
                            _LCDpage
                               _LCDy
                      __lcd_waitbusy
 ---------------------------------------------------------------------------------
 (2) _LCDchar                                             24    23      1    8727
                                             20 COMRAM    24    23      1
                             _LCDcmd
                            _LCDpage
                               _LCDy
                             ___wmul
                      __lcd_waitbusy
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3103
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _LCDy                                                 2     1      1    1439
                                              4 COMRAM     2     1      1
                             _LCDcmd
                      __lcd_waitbusy
 ---------------------------------------------------------------------------------
 (3) _LCDpage                                              2     1      1    1929
                                             14 COMRAM     2     1      1
                             _LCDcmd
                            ___awdiv (ARG)
                      __lcd_waitbusy
 ---------------------------------------------------------------------------------
 (4) __lcd_waitbusy                                        1     1      0      69
                                              3 COMRAM     1     1      0
                        __lcd_status
 ---------------------------------------------------------------------------------
 (5) __lcd_status                                          3     3      0      69
                                              0 COMRAM     3     3      0
                        __lcd_enable
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                              0 COMRAM     1     1      0
                        __lcd_enable
 ---------------------------------------------------------------------------------
 (6) __lcd_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDchar
       _LCDcmd
         __lcd_enable
       _LCDpage
         _LCDcmd
           __lcd_enable
         ___awdiv (ARG)
           ___awmod (ARG)
         __lcd_waitbusy (ARG)
           __lcd_status
             __lcd_enable
       _LCDy
         _LCDcmd
           __lcd_enable
         __lcd_waitbusy
           __lcd_status
             __lcd_enable
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     _LCDpage
       _LCDcmd
         __lcd_enable
       ___awdiv (ARG)
         ___awmod (ARG)
       __lcd_waitbusy (ARG)
         __lcd_status
           __lcd_enable
     _LCDy
       _LCDcmd
         __lcd_enable
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     __lcd_waitbusy
       __lcd_status
         __lcd_enable
   _LCDinit
     _LCDclear
       _LCDchar
         _LCDcmd
           __lcd_enable
         _LCDpage
           _LCDcmd
             __lcd_enable
           ___awdiv (ARG)
             ___awmod (ARG)
           __lcd_waitbusy (ARG)
             __lcd_status
               __lcd_enable
         _LCDy
           _LCDcmd
             __lcd_enable
           __lcd_waitbusy
             __lcd_status
               __lcd_enable
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __lcd_waitbusy
           __lcd_status
             __lcd_enable
       _LCDpage
         _LCDcmd
           __lcd_enable
         ___awdiv (ARG)
           ___awmod (ARG)
         __lcd_waitbusy (ARG)
           __lcd_status
             __lcd_enable
       _LCDy
         _LCDcmd
           __lcd_enable
         __lcd_waitbusy
           __lcd_status
             __lcd_enable
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     _LCDon
       _LCDcmd
         __lcd_enable
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     _LCDreset
       __lcd_status
         __lcd_enable
     __lcd_status
       __lcd_enable
   _LCDpage
     _LCDcmd
       __lcd_enable
     ___awdiv (ARG)
       ___awmod (ARG)
     __lcd_waitbusy (ARG)
       __lcd_status
         __lcd_enable
   _LCDstring
     _LCDchar
       _LCDcmd
         __lcd_enable
       _LCDpage
         _LCDcmd
           __lcd_enable
         ___awdiv (ARG)
           ___awmod (ARG)
         __lcd_waitbusy (ARG)
           __lcd_status
             __lcd_enable
       _LCDy
         _LCDcmd
           __lcd_enable
         __lcd_waitbusy
           __lcd_status
             __lcd_enable
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     _LCDpage
       _LCDcmd
         __lcd_enable
       ___awdiv (ARG)
         ___awmod (ARG)
       __lcd_waitbusy (ARG)
         __lcd_status
           __lcd_enable
     _LCDy
       _LCDcmd
         __lcd_enable
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     ___awdiv
       ___awmod (ARG)
     __lcd_waitbusy
       __lcd_status
         __lcd_enable
     _emptycolumn
       _LCDcmd
         __lcd_enable
     _strlen
   ___awdiv
     ___awmod (ARG)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _abs (ARG)
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _abs (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _abs (ARG)
     ___ftpack (ARG)
   ___ftge
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _abs (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _abs (ARG)
   ___fttol
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _abs (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _abs
   _lcdplotpixel2
     _LCDcmd
       __lcd_enable
     _LCDpage
       _LCDcmd
         __lcd_enable
       ___awdiv (ARG)
         ___awmod (ARG)
       __lcd_waitbusy (ARG)
         __lcd_status
           __lcd_enable
     _LCDy
       _LCDcmd
         __lcd_enable
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
     ___awdiv
       ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___ftpack (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _abs (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _abs (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _abs (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _abs (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _abs (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _abs (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcat
   _write_image
     _LCDcmd
       __lcd_enable
     _LCDpage
       _LCDcmd
         __lcd_enable
       ___awdiv (ARG)
         ___awmod (ARG)
       __lcd_waitbusy (ARG)
         __lcd_status
           __lcd_enable
     _LCDy
       _LCDcmd
         __lcd_enable
       __lcd_waitbusy
         __lcd_status
           __lcd_enable
   _xyaxis
     _lcdplotpixel2
       _LCDcmd
         __lcd_enable
       _LCDpage
         _LCDcmd
           __lcd_enable
         ___awdiv (ARG)
           ___awmod (ARG)
         __lcd_waitbusy (ARG)
           __lcd_status
             __lcd_enable
       _LCDy
         _LCDcmd
           __lcd_enable
         __lcd_waitbusy
           __lcd_status
             __lcd_enable
       ___awdiv
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     401      21       50.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     29      2B       9       16.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22A      20        0.0%
DATA                 0      0     62B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jun  7 16:02:01 2016

                        l54 399E                          l81 694A                          l90 6B56  
                        l82 691C                          l91 6B28                          l67 64CE  
                        l76 678A                          l85 6996                          l69 6770  
              ___awdiv@sign 000C         ___wmul@multiplicand 0011                ___ftadd@exp1 003D  
              ___ftadd@exp2 003C                ___ftadd@sign 003B                         l110 700A  
                       l104 6E56                         l113 7082                         l131 743C  
                       l125 73D8                         l109 7036                         l222 3B32  
                       l134 7472                         l118 7262                         l119 7236  
                       l224 3B38                         l240 3BE2                         l136 7474  
                       l128 73FA                         l225 3B3C                         l241 3BE6  
                       l233 3BC4                         l250 5750                         l238 3BDC  
                       l337 4776                         l277 3F52                         l456 618C  
                       l713 4072                         l810 394C                         l378 4EE6  
                       l740 48C8                         l751 4978                         l760 4994  
                       l736 489E                         l681 4476                         l771 4146  
                       l860 3E2E                         l870 3CBA                         l785 45A8  
                       l778 451A                         l779 4542          lcdplotpixel2@F4454 7BAC  
                       _abs 3980                         _pic 795B                ___awmod@sign 0006  
                       prod 000FF3                         wreg 000FE8                __CFG_FOSC$HS 000000  
               main@buf_344 00B6                 main@buf_360 009F                __CFG_LVP$OFF 000000  
              ___ftdiv@cntr 0022             __end_of_LCDchar 5752                ___ftdiv@sign 0027  
              __CFG_WDT$OFF 000000                        ?_abs 0001                        l4001 425A  
                      l4011 3DE0                        l4013 3DEC                        l3223 38A0  
                      l4023 3E20                        l4015 3DF0                        l4031 3C78  
                      l4103 4CF8                        l3241 3B56                        l3401 565C  
                      l3313 52F4                        l4033 3C84                        l4201 5CC2  
                      l3411 56A4                        l4035 3C88                        l4211 5CEE  
                      l4203 5CD8                        l4115 4D9C                        l3229 3B22  
                      l3317 531E                        l3309 52E2                        l4045 3C10  
                      l4301 6076                        l4213 5D12                        l4109 4D88  
                      l5101 75E6                        l5013 7274                        l3239 3B42  
                      l3415 56B4                        l3351 5444                        l4063 3AE0  
                      l4039 3CAC                        l4047 3C1C                        l3503 4294  
                      l4207 5CE8                        l4135 4E24                        l4151 4ED8  
                      l4127 4DD0                        l5031 735E                        l5023 72A4  
                      l3257 3BEC                        l3337 53F0                        l3329 5366  
                      l3425 5734                        l3281 402A                        l3273 3FF4  
                      l3441 48D6                        l3601 3CEC                        l4305 609A  
                      l4145 4EC4                        l4161 45D2                        l5113 76FE  
                      l5033 737E                        l5017 728A                        l5025 72A8  
           __end_of_LCDpage 3B60                        l3259 3C00                        l4067 3AF4  
                      l4059 3AD0                        l3435 48AC                        l3523 42EE  
                      l4323 615A                        l4307 60A0                        l4315 6134  
                      l4219 5D2C                        l4139 4E34                        l4091 4C9C  
                      l5123 7774                        l5043 73B6                        l5051 73F4  
                      l3381 559E                        l3373 551E                        l3701 38DE  
                      l4413 57D6                        l4405 579C                        l3285 4040  
                      l3277 4002                        l3621 3D32                        l3613 3D1A  
                      l3605 3CFA                        l3533 4316                        l3509 42BC  
                      l4341 6210                        l4325 616E                        l4317 6142  
                      l4261 5EE8                        l4253 5E7C                        l4245 5E14  
                      l4229 5D72                        l4173 4602                        l4157 45C2  
                      l5133 78A8                        l5125 778A                        l5037 7396  
                      l3359 54CE                        l4431 582C                        l4415 57E0  
                      l4423 57FE                        l4407 57AC                        l3287 405E  
                      l3279 400C                        l3463 4928                        l3607 3D02  
                      l3527 42FE                        l4351 62F4                        l4263 5EFE  
                      l4183 5C40                        l4079 4C68                        l4167 45EA  
                      l5151 7934                        l5119 7754                        l5071 74B6  
                      l5063 745C          lcdplotpixel2@blank 0012                        l3393 55D2  
                      l3369 550E                        l3641 3EFC                        l3633 3EDE  
                      l3553 3E54                        l4505 59B6                        l4513 59D4  
                      l4441 584C                        l4425 5814                        l3289 4068  
                      l3465 4932                        l3457 4906                        l3609 3D06  
                      l3617 3D24                        l3537 4326                        l4353 6302  
                      l4337 61BE                        l4329 6190                        l4273 5F66  
                      l4257 5EA2                        l4361 6328                        l4169 45F2  
                      l5129 7860                        l5073 74BC                        l5049 73E6  
                      l4611 5BFE                        l4427 581C                        l3483 49B0  
                      l3475 4966                        l3467 493C                        l4371 6372  
                      l4283 5FC4                        l4259 5EB8                        l4099 4CE8  
                      l4179 461A                        l3661 3F4C                        l3653 3F2E  
                      l3645 3F0C                        l3629 3ED0                        l3717 390A  
                      l3565 3E7A                        l3581 3EAC                        l3725 3D6A  
                      l3733 3A16                        l4453 588A                        l4461 58A8  
                      l3493 49E0                        l3477 4970                        l3469 4944  
                      l4269 5F40                        l4197 5C88                        l4189 5C58  
                      l4381 63C6                        l5085 7592                        l3639 3EF4  
                      l3567 3E82                        l3559 3E64                        l3735 3A1A  
                      l4527 5A2A                        l4535 5A48                        l4463 58BE  
                      l3903 440E                        l3751 4B4C                        l4375 639E  
                      l4367 634E                        l4359 631A                        l4287 602A  
                      l4383 63E0                        l4623 3A90                        l3671 474E  
                      l5087 75B2                        l5079 74E0                        l3649 3F1E  
           __end_of_LCDinit 3B12                        l3585 3EBA                        l3577 3EA2  
                      l3569 3E86                        l4545 5A94                        l4553 5AB2  
                      l4537 5A5E                        l3825 44E0                        l3809 38C6  
                      l4289 6030                        l4625 3A94                        l3681 4812  
                      l4619 5C1C                        l4539 5A6E                        l4555 5AC8  
                      l4475 590C                        l4483 592A                        l4643 40E2  
                      l3915 443C                        l3819 44B4                        l4379 63C2  
                      l4627 3AA4                        l4573 5B22                        l4637 40BA  
                      l3941 3F84                        l3933 3A5C                        l3925 4464  
                      l3597 3CE0                        l3773 501C                        l4629 3AAC  
                      l3677 47F8                        l4733 6478                        l4583 5B4C  
                      l4399 5782                        l4663 4120                        l3951 3FE0  
                      l3927 4470                        l3919 444C                        l3855 456E  
                      l3759 4C0C                        l3791 5210                        l3783 50E4  
                      l4911 6DD4                        l4815 695C                        l4489 595C  
                      l4497 597A                        l3945 3FB4                        l3881 439C  
                      l3865 4596                        l4921 6E26                        l4825 698C  
                      l4737 648E                        l4729 6462                        l4499 5990  
                      l3875 437E                        l3867 45A2                        l3859 457E  
                      l3779 50C0                        l4843 6A12                        l4819 6972  
                      l4827 6990                        l4763 66B6                        l4747 64EA  
                      l4739 6492                        l4589 5B72                        l4597 5B90  
                      l4685 39E8                        l3965 41A4                        l3797 52B4  
                      l4917 6E12                        l4925 6E3C                        l3983 420A  
                      l3895 43DE                        l4951 6FA4                        l4863 6B68  
                      l4775 6756                        l4759 66A0                        l3993 4232  
                      l4881 6C36                        l4873 6B98                        l4769 6706  
                      l3995 423E                        l3987 421A                        l4867 6B7E  
                      l4875 6B9C                        l4795 6806                        l4779 675E  
                      l3997 4244                        l4965 7048                        l4893 6CB0  
                      l4885 6C7E                        l4975 7078                        l4969 705E  
                      l4977 707C                        l4889 6C98                        l4899 6CD4  
                      l4999 71D0                        STR_1 7FF8                        STR_2 7FF1  
                      STR_3 7FE3                        STR_4 7FEA                        STR_5 7FB5  
                      STR_6 7FBF                        STR_7 7FDB                        STR_8 7FC9  
                      STR_9 7FD2                        u4001 4498                        u3035 3B98  
                      u3036 3B9A                        u3300 55D0                        u3220 5364  
                      u3045 3BA2                        u3205 530A                        u4021 44C4  
                      u3046 3BA4                        u3310 565A                        u3230 53EE  
                      u3215 5328                        u3250 5442                        u4211 4188  
                      u3260 54CC                        u3325 567A                        u3245 540E  
                      u4230 41C2                        u3351 486A          lcdplotpixel2@index 0022  
                      u4400 4C66                        u3361 487E                        u4410 4C9A  
                      u6010 7930                        u3275 54EC                        u4235 41BA  
                      u4500 4DCE                        u6020 7956                        u5221 40A2  
                      u5160 5B20                        u3800 4716                        u5241 40CA  
                      u3561 427C                        u4425 4CA6                        u5170 5B4A  
                      u5410 67E2                        u6107 3B80                        u4515 4DDA  
                      u5500 69EE                        u5420 6804                        u6117 3BA6  
                      u3581 42A4                        _LCDy 3BB4                        u4710 5DB2  
                      u3830 47D2                        u5510 6A10                        u5430 68DE  
                      u5350 66E0                        u6127 3896                        u4455 4D20  
                      u5520 6AEA                        u4545 4E5C                        u4465 4D34  
                      u3825 47AE                        u6057 647E                        u5610 6CD2  
                      u5450 6902                        u5370 6730                        u4715 5DA8  
                      u4555 4E70                        u4475 4D66                        u6067 73BC  
                      u5700 6FCE                        u5620 6DAC                        u5540 6B0E  
                      u5460 694A                        u4565 4EA2                        u6077 793A  
                      u5550 6B56                        u6087 3AE6                        u5720 6FF2  
                      u5640 6DEA                        u6097 38D6                        u5810 721E  
                      u5730 7036                        u5820 7262                        u3885 3D56  
                      u4870 6184                        u3895 3D74                        u5680 6EAE  
                      u5770 70DA                        u5870 73D8                        u5790 71FA  
        lcdplotpixel2@pixel 001F          lcdplotpixel2@value 0020                        abs@a 0001  
                      _main 63EE                ___ftpack@arg 0001        __size_of__lcd_enable 000E  
              ___ftpack@exp 0004                        fsr1h 000FE2                        fsr2h 000FDA  
                      indf1 000FE7                        fsr1l 000FE1                        indf2 000FDF  
                      fsr2l 000FD9                        prodh 000FF4                        prodl 000FF3  
                      start 0000                _sprintf$1201 0060        __size_of__lcd_status 0054  
              ___ftmul@cntr 0026                ___param_bank 000010                ___ftmul@sign 0027  
              ?_emptycolumn 0001                ___fttol@exp1 004C                       ??_abs 0003  
              ___fttol@lval 0048          __size_of_LCDstring 04E0                       ?_LCDy 0005  
          __end_of_LCDclear 3F54                       ?_main 0001             __end_of___awdiv 3EC4  
           __end_of___ftadd 4A06             __end_of___awmod 3D3C             __end_of___ftdiv 4178  
          __end_of_LCDreset 38EE             __end_of___ftneg 395A             __end_of___lldiv 3E40  
           __end_of___ftmul 4360             ___awdiv@divisor 0009             __end_of___llmod 3CCC  
           __end_of___ftsub 3A86             __end_of___fttol 426C                       _LCDon 38EE  
           ___awdiv@counter 000B                       _PORTC 000F82                       _PORTD 000F83  
                     _PORTE 000F84                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
           LCDchar@position 0015                 _write_image 4C4C                ___lltoft@exp 0011  
             _lcdplotpixel2 4706              write_image@val 002A               ___awtoft@sign 0018  
           __end_of_dpowers 7B5E                       _image 7BB5                       _scale 4EE8  
           __end_of_isdigit 38CE               ___ftpack@sign 0005                       main@a 020C  
                     main@i 00DC                       main@j 00CC                       main@y 00C4  
                     tablat 000FF5                       status 000FD8             __end_of_sprintf 63EE  
              __end_of_LCDy 3C0A             __initialization 39A8                __end_of_main 795A  
                    ??_LCDy 0006               main@delta_343 00ED                      ??_main 005A  
             ___fttol@sign1 0047               __activetblptr 000002                      ?_LCDon 0001  
      __size_of__tdiv_to_l_ 0132                   ??_LCDchar 0016               main@amplitude 0216  
                 ??_LCDpage 0010                   ??_LCDinit 0033              ?_lcdplotpixel2 0011  
               LCDpage@page 000F                 LCDpage@side 0010    write_image@top_to_bottom 0013  
                    _ADCON0 000FC2            ___llmod@dividend 0001                      ?_scale 0028  
                    _ADRESH 000FC4                      _ADRESL 000FC3            ___awdiv@dividend 0007  
          __end_of___awtoft 3A0C            __end_of___ftpack 4092            __end_of___lltoft 3C66  
         __end_of_LCDstring 5C32                      _LCDcmd 3886            __end_of___lwtoft 3936  
           write_image@page 0028               main@s_val_336 00E0            __end_of__powers_ 7BAC  
                    ___ftge 3F54                      ___wmul 395A                   ??___awdiv 000B  
                 ??___ftadd 0038                   ??___awmod 0005                   ??___ftdiv 001F  
                 ??___ftneg 0004                   ??___lldiv 0009                   ??___ftmul 001F  
                 ??___llmod 0009                   ??___ftsub 0044                   ??___fttol 0042  
         LCDchar@char_index 002B                      _fround 4A06                      clear_0 39B0  
          ___awdiv@quotient 000D             ___awmod@divisor 0003                      _pixels 03FF  
           ___awmod@counter 0005                      main@y1 00C0                      main@y2 00C2  
                    _strcat 3A86                      _strlen 3A0C       ___ftmul@f3_as_product 0023  
                    _xyaxis 45BA                   ??_isdigit 0001                __mediumconst 795A  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_sprintf 0054                 LCDstring@l1 004B      __size_of__lcd_waitbusy 0010  
                __accesstop 0060     __end_of__initialization 39CA                LCDchar@i_515 0022  
              LCDchar@i_516 0024                LCDchar@i_517 0026                LCDchar@i_518 0028  
           __CFG_PBADEN$OFF 000000                  ___ftadd@f1 0032                  ___ftadd@f2 0035  
                ___ftge@ff1 0001                  ___ftge@ff2 0004                   ?_LCDclear 0001  
             ___rparam_used 000001                LCDchar@index 001E                  ___ftdiv@f1 0019  
                ___ftdiv@f2 001C                  ___ftdiv@f3 0023               __end_of_LCDon 3912  
                 ?_LCDreset 0001                  ___ftneg@f1 0001                  ___awtoft@c 0015  
                ___ftmul@f1 0019                  ___ftmul@f2 001C                  ___ftsub@f1 003E  
                ___ftsub@f2 0041                  ___fttol@f1 003E              __pcstackCOMRAM 0001  
                ___lltoft@c 0009               __end_of_image 7FB5               __end_of_scale 52D8  
      __size_of_emptycolumn 0082                   LCDclear@i 002D                   LCDclear@j 0031  
                ___lwtoft@c 0009             ??_lcdplotpixel2 0014                     ??_LCDon 0005  
                 LCDy@value 0005                  __div_to_l_ 4360             __div_to_l_@exp1 000C  
           __div_to_l_@cntr 000B                     ??_scale 002B             __div_to_l_@quot 0007  
            main@cur1_x_new 00FA              main@cur1_y_new 00F2              main@cur2_x_new 00FC  
            main@cur2_y_new 00F4                  __pbssBANK2 0229                     ?_LCDcmd 0001  
                   LCDon@on 0005                  ??_LCDclear 002D               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                  ??_LCDreset 0004                     ?___ftge 0001  
                   ?___wmul 000F               __lcd_waitbusy 38A0                     ?_fround 0028  
                 ?___awtoft 0015                   ?___ftpack 0001                   ?___lltoft 0009  
                   ?_strcat 0001                     ?_strlen 0001                   ?___lwtoft 0009  
            main@bottom_buf 0077                     ?_xyaxis 0001          __lcd_status@status 0001  
                   _LCDchar 52D8                     _LCDpage 3B12                     _LCDinit 3AC8  
              ?_write_image 0011               ??__lcd_enable 0001             __size_of_LCDcmd 000C  
             ??__lcd_status 0001        write_image@n_val_569 001F            write_image@i_567 0026  
          write_image@j_570 0022           __end_of__npowers_ 7B85                     __Hparam 0000  
                _scale$1200 002B                     __Lparam 0000            write_image@image 0011  
          write_image@n_val 001E             __size_of___ftge 0090                     ___awdiv 3E40  
                   ___ftadd 485A                     ___awmod 3CCC                     ___ftdiv 4092  
                   ___ftneg 3936                     ___lldiv 3DBE             __size_of___wmul 0026  
                   ___ftmul 426C                     ___llmod 3C66                     ___ftsub 3A46  
                   ___fttol 4178              ?__lcd_waitbusy 0001                     __pcinit 39A8  
                ??___awtoft 0018                  ??___ftpack 0006             __size_of_fround 0246  
                   __ramtop 0800             __lcd_status@cs1 0002             __lcd_status@cs2 0003  
                ??___lltoft 000D                     __ptext0 63EE                     __ptext1 45BA  
                   __ptext2 4706                     __ptext3 4C4C                     __ptext4 3A86  
                   __ptext5 5C32                     __ptext6 4EE8                     __ptext7 38B0  
                   __ptext8 4A06                     __ptext9 426C                  ??___lwtoft 000C  
           __size_of_strcat 0042             __size_of_strlen 003A                 ?__div_to_l_ 0001  
                   _dpowers 7B36                __size_of_abs 0028             __size_of_xyaxis 014C  
                   _isdigit 38B0            ___awmod@dividend 0001                     main@Vpp 00D6  
                   main@buf 00AC                     main@max 00E6                     _sprintf 5C32  
                   main@min 00E4        end_of_initialization 39CA               __Lmediumconst 795A  
                 _LCDstring 5752         __end_of__lcd_enable 38A0             ___lldiv@divisor 0005  
           ___lldiv@counter 000D         __end_of__lcd_status 3BB4                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
            __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004                     strlen@s 0001  
             ??__tdiv_to_l_ 0007                   _PORTBbits 000F81                     xyaxis@i 0025  
                main@cur1_x 021F                  main@cur1_y 021B                  main@cur2_x 0221  
                main@cur2_y 021D                 ___ftdiv@exp 0026              __end_of_LCDcmd 3892  
         lcdplotpixel2@data 0016                  main@freeze 00CE                write_image@i 0024  
              write_image@j 0020                  main@s_time 0207                  ?_LCDstring 002D  
       __size_of__div_to_l_ 0128           __size_of_LCDclear 0090                 ___ftmul@exp 0022  
           ??__lcd_waitbusy 0004           __size_of_LCDreset 0020              __end_of___ftge 3FE4  
            __end_of___wmul 3980              __end_of_fround 4C4C               LCDclear@i_521 002F  
            __end_of_strcat 3AC8              __end_of_strlen 3A46                  LCDcmd@data 0001  
       start_initialization 39A8              __end_of_xyaxis 4706                  LCDchar@tmp 002A  
       __end_of__tdiv_to_l_ 45BA                 __end_of_abs 39A8                 __end_of_pic 7B36  
      __size_of_write_image 029C                 __lcd_enable 3892                    ??_LCDcmd 0001  
           ___llmod@divisor 0005                 __lcd_status 3B60             ___llmod@counter 0009  
        write_image@val_568 002B                    ??___ftge 0007               ??_emptycolumn 0002  
                  ??___wmul 0013                    ??_fround 002B               sprintf@tmpval 006D  
                  ??_strcat 0005                    ??_strlen 0003                  LCDstring@i 0034  
                LCDstring@p 004A                    ??_xyaxis 0025                  fround@prec 0031  
         __size_of___awtoft 0038           __size_of___ftpack 00AE                 __pbssBIGRAM 03FF  
                  ?_LCDchar 0015           __size_of___lltoft 005C                 __pbssCOMRAM 005C  
                  ?_LCDpage 000F       __end_of_lcdplotpixel2 485A                    ?_LCDinit 0001  
         __size_of___lwtoft 0024               __pcstackBANK0 0060               __pcstackBANK1 0100  
             __pcstackBANK2 0200               _selected_side 0229                    LCDchar@c 001D  
                  LCDchar@i 0020                    LCDy@side 0006                    LCDinit@i 0034  
               sprintf@flag 0065                 sprintf@fval 0073                 sprintf@prec 0071  
               ??_LCDstring 002F                   _main$1195 0223                   _main$1196 0226  
                 _main$1197 00D9               __pmediumconst 795A                    ?___awdiv 0007  
                  ?___ftadd 0032                    ?___awmod 0001                    ?___ftdiv 0019  
                  ?___ftneg 0001                    ?___lldiv 0001                    ?___ftmul 0019  
                  ?___llmod 0001                    ?___ftsub 003E                   __npowers_ 7B5E  
                  ?___fttol 003E          main@s_time_pot_348 00D4                 __tdiv_to_l_ 4488  
       __end_of_emptycolumn 3DBE                ??__div_to_l_ 0007              __size_of_LCDon 0024  
                  ?_isdigit 0001                   _curr_page 005E                    ?_sprintf 004D  
            __size_of_scale 03F0              ___wmul@product 0013                    _LATCbits 000F8B  
                  _LATEbits 000F8D                    _LCDclear 3EC4                    _LCDreset 38CE  
__end_oflcdplotpixel2@F4454 7BB5          __end_of__div_to_l_ 4488       emptycolumn@char_index 0004  
                _ADCON0bits 000FC2                  _ADCON1bits 000FC1                  _ADCON2bits 000FC0  
                 main@i_321 020A                   main@i_323 00F6                   main@i_315 0219  
                 main@i_332 0212                   main@i_341 0210                   main@i_326 00F8  
                 main@i_342 0200                   main@i_354 0214                   main@i_338 020E  
                 main@i_339 00FE                   main@i_347 00E2                   main@i_364 00E8  
                 main@i_349 0202           ___wmul@multiplier 000F                   main@y_340 00CA  
                 main@y_333 00D2                   main@y_325 00C6                   main@y_337 00C8  
                 main@y_359 00F0                   main@delta 00EA                   main@max_y 00D1  
                 main@min_y 00D0                   main@s_val 00DE                   main@y_div 0204  
          __size_of_LCDchar 047A            __size_of_LCDpage 004E            __size_of_LCDinit 004A  
                  __Hrparam 0000                    __Lrparam 0000                 _emptycolumn 3D3C  
          __size_of___awdiv 0084            __size_of___ftadd 01AC            __size_of___awmod 0070  
          __size_of___ftdiv 00E6            __size_of___ftneg 0024            __size_of___lldiv 0082  
          __size_of___ftmul 00F4            __size_of___llmod 0066            __size_of___ftsub 0040  
          __size_of___fttol 00F4                    ___awtoft 39D4                    ___ftpack 3FE4  
               _curr_column 005C                 _fround$1198 002E                 _fround$1199 002B  
                  ___lltoft 3C0A                 _isdigit$851 0002                    ___lwtoft 3912  
                sprintf@exp 006B                  sprintf@val 0067                  strcat@from 0003  
          __size_of_isdigit 001E                    __ptext10 3CCC                    __ptext11 4488  
                  __ptext20 3F54                    __ptext12 4360                    __ptext21 3980  
                  __ptext13 3C0A                    __ptext30 3AC8                    __ptext22 3912  
                  __ptext14 3C66                    __ptext31 38CE                    __ptext23 4092  
                  __ptext15 3DBE                    __ptext40 3886                    __ptext32 38EE  
                  __ptext24 39D4                    __ptext16 4178                    __ptext41 3892  
                  __ptext33 3EC4                    __ptext25 3FE4                    __ptext17 3A46  
                  __ptext34 52D8                    __ptext26 5752                    __ptext18 485A  
                  __ptext35 395A                    __ptext27 3A0C                    __ptext19 3936  
                  __ptext36 3BB4                    __ptext28 3D3C                    __ptext37 3B12  
                  __ptext29 3E40                    __ptext38 38A0                    __ptext39 3B60  
                  __powers_ 7B85                ?__lcd_enable 0001            __size_of_sprintf 07BC  
             __size_of_LCDy 0056               __size_of_main 156C                ?__lcd_status 0001  
               xyaxis@i_553 0027       __end_of__lcd_waitbusy 38B0                    main@data 0100  
           lcdplotpixel2@rx 0024             lcdplotpixel2@ry 0011               ??_write_image 0014  
                  isdigit@c 0003                    scale@scl 002E                   sprintf@ap 0063  
          __tdiv_to_l_@exp1 000F                   sprintf@sp 004D            __tdiv_to_l_@cntr 000E  
          __tdiv_to_l_@quot 000A             LCDstring@buffer 002D             LCDstring@length 004D  
          ___lldiv@dividend 0001                ?__tdiv_to_l_ 0001              LCDstring@i_531 0046  
            LCDstring@i_540 0042              LCDstring@i_532 0036              LCDstring@i_541 0044  
            LCDstring@i_534 0038              LCDstring@i_535 003A              LCDstring@i_536 003C  
            LCDstring@i_537 003E              LCDstring@i_538 0040              LCDstring@i_539 0048  
                  sprintf@c 0076                    sprintf@f 004F                    strcat@cp 0005  
                  strcat@to 0001            ___lldiv@quotient 0009                    strlen@cp 0005  
       __end_of_write_image 4EE8      __size_of_lcdplotpixel2 0154  
